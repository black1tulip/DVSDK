/*
 *  Do not modify this file; it is automatically 
 *  generated and any modifications will be overwritten.
 */
#define __nested__
#define __config__
#ifndef xdc_std__include
#ifndef __nested__
#define __nested__
#include <xdc/std.h>
#undef __nested__
#else
#include <xdc/std.h>
#endif
#endif


/*
 * ======== module defines ========
 */

/*
 * ======== module includes ========
 */

/*
 * ======== internal module decls ========
 */

/*
 * ======== internal instance decls ========
 */

/*
 * ======== declarations ========
 */

/*
 * ======== module templates ========
 */

/* module ti.sdo.fc.edma3.Settings */



/* C code contribution from ti/sdo/fc/edma3/Settings.xdt */


#include <xdc/std.h>
#include <ti/sdo/fc/rman/rman.h>
#include <ti/sdo/fc/edma3/edma3_config.h>

/*
 * Declare alloc/Free functions before using them
 */
extern Bool _ALG_allocMemory(IALG_MemRec *memTab, Int numRecs);
extern Void _ALG_freeMemory(IALG_MemRec *memTab, Int numRecs);

/*
 *  ======== EDMA3_PARAMS ========
 *  EDMA3_PARAMS structure is created using the configured values
 */
EDMA3_Params EDMA3_PARAMS = {
   1,
    0,
   _ALG_allocMemory,
   _ALG_freeMemory,
    NULL,
    NULL,
    0,
   1,
};

/* Base key value for DMAN3 Linux IPC objects */
UInt32 _EDMA3_ipcKeyBase = 0x33414d44;


/* module ti.sdo.fc.global.Settings */

Bool ti_sdo_fc_multiProcess = TRUE;

/* module ti.sdo.fc.ires.addrspace.ADDRSPACE */

    
Bool ADDRSPACE_noTranslation = FALSE;

/* module ti.sdo.fc.ires.edma3chan.EDMA3CHAN */

 

/* module ti.sdo.fc.ires.vicp.VICP2 */



/* Generated code from ti.sdo.fc.ires.vicp.VICP2.xdt */
unsigned int _VICP2_imcopConfigBase = (unsigned int)30015488;

/* Base key value for VICP2 Linux IPC objects */
UInt32 _VICP2_ipcKeyBase = 0x50434956;

/* Device is TMS320DM365 */
Bool _VICP2_dm355 = 0;
Bool _VICP2_dm365 = 1;

/* module ti.sdo.fc.rman.RMAN */

/* C code contribution from ti/sdo/fc/rman/RMAN.xdt */
 
#include <ti/sdo/fc/rman/rman.h>


        /* declaration of user-supplied RMAN.persistentAllocFxn */
        extern Bool _ALG_allocMemory(IALG_MemRec *memTab, Int numRecs);
        extern Void _ALG_freeMemory(IALG_MemRec *memTab, Int numRecs);

extern RMAN_SemHandle Sem_create(Int key, Int count);

extern Void Sem_delete(RMAN_SemHandle sem);

extern Int Sem_pend(RMAN_SemHandle sem, UInt32 count);

extern Void Sem_post(RMAN_SemHandle sem);

/* Table of user-configured size to store the registration entries */ 
__FAR__ IRESMAN_Fxns * RMAN_TABLE[11];

/* Table of user-configured size to store the freed entries */ 
__FAR__ short RMAN_FREE_ENTRIES[11];

/*
 * Number of entries statically configured for the Resource Registry table
 */
__FAR__ short RMAN_numRegistryEntries  = 0;
 
/*
 * Static configuration entries for the table
 */
__FAR__ IRESMAN_Fxns ** RMAN_registryEntries = NULL;
 
/*
 * Initialization arguments for the entries to be registered
 */
__FAR__ IRESMAN_Params ** RMAN_registryResmanArgs = NULL;

/*
 *   ========== RMAN_PARAMS ===========
 *   Module configuration for RMAN implementation
 *   It is set at design time by system integrator to adjust the behavior of 
 *   module to be optimal for its execution environment
 */
RMAN_Params RMAN_PARAMS = {
 
    /* size of the registry table */ 
    11,

    /* persistentAllocFxn */
    _ALG_allocMemory,
 
    /* persistentFreeFxn */
    _ALG_freeMemory,
  
    /* yieldFxn */
    NULL,

    /* flag indicating if yield to same priority is allowed */
    FALSE,
};



static __FAR__ IRESMAN_Fxns * _entries[0 + 1];
static __FAR__ IRESMAN_Params * _params[0 + 1];

IRES_Status RMAN_autoRegister()
{
    /* Populate the RMAN_registryEntries etc tables, to be able to do 
       static registration of these arguments */ 
    IRES_Status status = IRES_OK;
    
    RMAN_numRegistryEntries = 0;


    RMAN_registryEntries = (IRESMAN_Fxns **)(&_entries);
    RMAN_registryResmanArgs = (IRESMAN_Params **)(&_params);

    return (status);
}

/* module ti.sdo.fc.rman.examples.EXAMPLE */


/* module ti.sdo.fc.utils.SHM */

 

/* module ti.sdo.fc.utils.SMGRMP */

 

/* module ti.sdo.fc.utils.gtinfra.GTINFRA */


#include <ti/sdo/utils/trace/gt.h>
 

/* module ti.sdo.fc.vicpsync.VICPSYNC */

 

/* Device is TMS320DM365 */
Bool _VICPSYNC_dm355 = 0; 
Bool _VICPSYNC_dm365 = 1; 

/* module ti.sdo.utils.trace.GT */




/*
 * C code contribution from ti/sdo/utils/GT.xdt 
 */
#include <xdc/std.h>
#include <ti/sdo/utils/trace/gt.h>

extern Void printfCaller(String fmt, ...); 
extern Ptr myMalloc(Int size);
 

GT_Config _ti_sdo_utils_trace_GT_params = {
    printfCaller,
    NULL,
    NULL,
    NULL,
    myMalloc,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL    
};

GT_Config *GT = &_ti_sdo_utils_trace_GT_params;

/* module xdc.cfg.Program */

/*
 *  ======== __ASM__ ========
 *  Define this program's package-path relative assembly directory
 */
__FAR__ char *__ASM__ = "@(#)__ASM__ = /db/swcoe_asp/DM360/Kaleido/dm360/mpeg4_decoder/Client/Test/Src/mp4vdecTestApp/package/cfg/mp4vdecTestApp_x470MV";

/*
 *  ======== __ISA__ ========
 *  Define the ISA of this executable.  This symbol is used by platform
 *  specific "exec" commands that support more than one ISA; e.g., gdb
 */
__FAR__ char *__ISA__ = "@(#)__ISA__ = v5T";

/*
 *  ======== __PLAT__ ========
 *  Define the name of the platform that can run this executable.  This
 *  symbol is used by platform independent "exec" commands
 */
__FAR__ char *__PLAT__ = "@(#)__PLAT__ = ti.platforms.evmDM365";

/*
 *  ======== __TARG__ ========
 *  Define the name of the target used to build this executable.
 */
__FAR__ char *__TARG__ = "@(#)__TARG__ = gnu.targets.MVArm9";


/*
 * ======== module configuration ========
 */

/*
 * ======== post initialization ========
 */

/*
 * ======== program globals ========
 */

/*
 * ======== package includes ========
 */

/* package xdc */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc__dummy__;
#define __xdc_PKGVERS 1, 1, 1, 0
#define __xdc_PKGNAME xdc
#define __xdc_PKGPREFIX xdc_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.corevers */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_corevers__dummy__;
#define __xdc_PKGVERS 16, 0, 1, 0
#define __xdc_PKGNAME xdc.corevers
#define __xdc_PKGPREFIX xdc_corevers_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.services.global */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_services_global__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME xdc.services.global
#define __xdc_PKGPREFIX xdc_services_global_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.shelf */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_shelf__dummy__;
#define __xdc_PKGVERS 1, 0, 0, 0
#define __xdc_PKGNAME xdc.shelf
#define __xdc_PKGPREFIX xdc_shelf_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.services.spec */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_services_spec__dummy__;
#define __xdc_PKGVERS 1, 0, 0, 0
#define __xdc_PKGNAME xdc.services.spec
#define __xdc_PKGPREFIX xdc_services_spec_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.services.intern.xsr */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_services_intern_xsr__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME xdc.services.intern.xsr
#define __xdc_PKGPREFIX xdc_services_intern_xsr_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.services.intern.gen */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_services_intern_gen__dummy__;
#define __xdc_PKGVERS 1, 0, 0, 0
#define __xdc_PKGNAME xdc.services.intern.gen
#define __xdc_PKGPREFIX xdc_services_intern_gen_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.services.intern.cmd */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_services_intern_cmd__dummy__;
#define __xdc_PKGVERS 1, 0, 0, 0
#define __xdc_PKGNAME xdc.services.intern.cmd
#define __xdc_PKGPREFIX xdc_services_intern_cmd_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.rov */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_rov__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME xdc.rov
#define __xdc_PKGPREFIX xdc_rov_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.runtime */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_runtime__dummy__;
#define __xdc_PKGVERS 2, 0, 0, 0
#define __xdc_PKGNAME xdc.runtime
#define __xdc_PKGPREFIX xdc_runtime_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else
#ifdef xdc_runtime_Assert___used
/*
 *  ======== module Assert ========
 *  Do not modify this file; it is generated from the specification Assert.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Assert__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Assert.h>
#undef __nested__
#else
#include <xdc/runtime/Assert.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Assert___LOGOBJ) && xdc_runtime_Assert___DGSINCL & 0x1
#define xdc_runtime_Assert___L_ENTRY 1
#else
#define xdc_runtime_Assert___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Assert___LOGOBJ) && xdc_runtime_Assert___DGSINCL & 0x2
#define xdc_runtime_Assert___L_EXIT 1
#else
#define xdc_runtime_Assert___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Assert___LOGOBJ) && xdc_runtime_Assert___DGSINCL & 0x4
#define xdc_runtime_Assert___L_LIFECYCLE 1
#else
#define xdc_runtime_Assert___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Assert_ */

/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Assert_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Assert_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Assert_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Assert_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Assert_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Assert_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Assert_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Assert_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Assert_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Assert_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Assert_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Assert_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Assert_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Assert_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Assert_Module_GateProxy_query

#if defined(xdc_runtime_Assert___EXPORT) && defined(__ti__)
#if xdc_runtime_Assert___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Assert_Module__startupDone__S);
#endif
#endif

#if defined(xdc_runtime_Assert___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Assert_Module__diagsEnabled xdc_runtime_Assert_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__diagsIncluded xdc_runtime_Assert_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__diagsMask xdc_runtime_Assert_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__gateObj xdc_runtime_Assert_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__gatePrms xdc_runtime_Assert_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__id xdc_runtime_Assert_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__loggerDefined xdc_runtime_Assert_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__loggerObj xdc_runtime_Assert_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__loggerFxn4 xdc_runtime_Assert_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__loggerFxn8 xdc_runtime_Assert_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Module__startupDoneFxn xdc_runtime_Assert_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Object__count xdc_runtime_Assert_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Object__heap xdc_runtime_Assert_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Object__sizeof xdc_runtime_Assert_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_Object__table xdc_runtime_Assert_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Assert_E_assertFailed xdc_runtime_Assert_E_assertFailed__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Assert_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Assert_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Assert_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Assert_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Assert_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Assert_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Assert_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Assert_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Assert_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Assert_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Assert_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Assert___ROMPATCH
__FAR__ xdc_runtime_Assert_Module__MTAB__C__qual xdc_runtime_Assert_MTab__ xdc_runtime_Assert_Module__MTAB__C = {
#if xdc_runtime_Assert___scope == -1
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Assert_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Assert_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Assert_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Assert_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Assert_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Assert_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Assert_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Assert_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Assert_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Assert_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Assert_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Assert_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Assert_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Assert_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Assert_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Assert_Module_GateProxy_query

#if defined(xdc_runtime_Assert___EXPORT) && defined(__ti__)
#if xdc_runtime_Assert___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Assert_Module__startupDone__S);
#endif
#endif
#endif /* __isrom__ */

#if xdc_runtime_Assert___scope != -1
xdc_Bool xdc_runtime_Assert_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Assert___scope */

#endif /* xdc_runtime_Assert___used */

#ifdef xdc_runtime_Core___used
/*
 *  ======== module Core ========
 *  Do not modify this file; it is generated from the specification Core.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Core__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Core.h>
#undef __nested__
#else
#include <xdc/runtime/Core.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Core___LOGOBJ) && xdc_runtime_Core___DGSINCL & 0x1
#define xdc_runtime_Core___L_ENTRY 1
#else
#define xdc_runtime_Core___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Core___LOGOBJ) && xdc_runtime_Core___DGSINCL & 0x2
#define xdc_runtime_Core___L_EXIT 1
#else
#define xdc_runtime_Core___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Core___LOGOBJ) && xdc_runtime_Core___DGSINCL & 0x4
#define xdc_runtime_Core___L_LIFECYCLE 1
#else
#define xdc_runtime_Core___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Core_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Core_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Core_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Core_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Core_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Core_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Core_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Core_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Core_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Core_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Core_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Core_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Core_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Core_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Core_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Core_Module_GateProxy_query

#if defined(xdc_runtime_Core___EXPORT) && defined(__ti__)
#if xdc_runtime_Core___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Core_Module__startupDone__S);
#endif
#endif

#if defined(xdc_runtime_Core___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Core_Module__diagsEnabled xdc_runtime_Core_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__diagsIncluded xdc_runtime_Core_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__diagsMask xdc_runtime_Core_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__gateObj xdc_runtime_Core_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__gatePrms xdc_runtime_Core_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__id xdc_runtime_Core_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__loggerDefined xdc_runtime_Core_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__loggerObj xdc_runtime_Core_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__loggerFxn4 xdc_runtime_Core_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__loggerFxn8 xdc_runtime_Core_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Module__startupDoneFxn xdc_runtime_Core_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Object__count xdc_runtime_Core_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Object__heap xdc_runtime_Core_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Object__sizeof xdc_runtime_Core_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_Object__table xdc_runtime_Core_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Core_A_initializedParams xdc_runtime_Core_A_initializedParams__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Core_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Core_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Core_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Core_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Core_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Core_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Core_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Core_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Core_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Core_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Core_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Core___ROMPATCH
__FAR__ xdc_runtime_Core_Module__MTAB__C__qual xdc_runtime_Core_MTab__ xdc_runtime_Core_Module__MTAB__C = {
#if xdc_runtime_Core___scope == -1
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Core_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Core_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Core_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Core_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Core_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Core_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Core_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Core_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Core_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Core_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Core_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Core_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Core_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Core_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Core_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Core_Module_GateProxy_query

#if defined(xdc_runtime_Core___EXPORT) && defined(__ti__)
#if xdc_runtime_Core___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Core_Module__startupDone__S);
#endif
#endif
#endif /* __isrom__ */

#if xdc_runtime_Core___scope != -1
xdc_Bool xdc_runtime_Core_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Core___scope */

#endif /* xdc_runtime_Core___used */

#ifdef xdc_runtime_Defaults___used
/*
 *  ======== module Defaults ========
 *  Do not modify this file; it is generated from the specification Defaults.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Defaults__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Defaults.h>
#undef __nested__
#else
#include <xdc/runtime/Defaults.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Defaults___LOGOBJ) && xdc_runtime_Defaults___DGSINCL & 0x1
#define xdc_runtime_Defaults___L_ENTRY 1
#else
#define xdc_runtime_Defaults___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Defaults___LOGOBJ) && xdc_runtime_Defaults___DGSINCL & 0x2
#define xdc_runtime_Defaults___L_EXIT 1
#else
#define xdc_runtime_Defaults___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Defaults___LOGOBJ) && xdc_runtime_Defaults___DGSINCL & 0x4
#define xdc_runtime_Defaults___L_LIFECYCLE 1
#else
#define xdc_runtime_Defaults___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Defaults_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Defaults_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Defaults_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Defaults_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Defaults_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Defaults_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Defaults_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Defaults_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Defaults_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Defaults_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Defaults_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Defaults_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Defaults_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Defaults_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Defaults_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Defaults_Module_GateProxy_query

#if defined(xdc_runtime_Defaults___EXPORT) && defined(__ti__)
#if xdc_runtime_Defaults___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Defaults_Module__startupDone__S);
#endif
#endif

#if defined(xdc_runtime_Defaults___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Defaults_Module__diagsEnabled xdc_runtime_Defaults_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__diagsIncluded xdc_runtime_Defaults_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__diagsMask xdc_runtime_Defaults_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__gateObj xdc_runtime_Defaults_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__gatePrms xdc_runtime_Defaults_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__id xdc_runtime_Defaults_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__loggerDefined xdc_runtime_Defaults_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__loggerObj xdc_runtime_Defaults_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__loggerFxn4 xdc_runtime_Defaults_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__loggerFxn8 xdc_runtime_Defaults_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Module__startupDoneFxn xdc_runtime_Defaults_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Object__count xdc_runtime_Defaults_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Object__heap xdc_runtime_Defaults_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Object__sizeof xdc_runtime_Defaults_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Defaults_Object__table xdc_runtime_Defaults_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Defaults_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Defaults_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Defaults_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Defaults_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Defaults_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Defaults_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Defaults_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Defaults_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Defaults_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Defaults_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Defaults_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Defaults___ROMPATCH
__FAR__ xdc_runtime_Defaults_Module__MTAB__C__qual xdc_runtime_Defaults_MTab__ xdc_runtime_Defaults_Module__MTAB__C = {
#if xdc_runtime_Defaults___scope == -1
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Defaults_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Defaults_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Defaults_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Defaults_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Defaults_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Defaults_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Defaults_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Defaults_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Defaults_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Defaults_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Defaults_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Defaults_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Defaults_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Defaults_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Defaults_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Defaults_Module_GateProxy_query

#if defined(xdc_runtime_Defaults___EXPORT) && defined(__ti__)
#if xdc_runtime_Defaults___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Defaults_Module__startupDone__S);
#endif
#endif
#endif /* __isrom__ */

#if xdc_runtime_Defaults___scope != -1
xdc_Bool xdc_runtime_Defaults_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Defaults___scope */

#endif /* xdc_runtime_Defaults___used */

#ifdef xdc_runtime_Diags___used
/*
 *  ======== module Diags ========
 *  Do not modify this file; it is generated from the specification Diags.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Diags__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Diags.h>
#undef __nested__
#else
#include <xdc/runtime/Diags.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Diags___LOGOBJ) && xdc_runtime_Diags___DGSINCL & 0x1
#define xdc_runtime_Diags___L_ENTRY 1
#else
#define xdc_runtime_Diags___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Diags___LOGOBJ) && xdc_runtime_Diags___DGSINCL & 0x2
#define xdc_runtime_Diags___L_EXIT 1
#else
#define xdc_runtime_Diags___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Diags___LOGOBJ) && xdc_runtime_Diags___DGSINCL & 0x4
#define xdc_runtime_Diags___L_LIFECYCLE 1
#else
#define xdc_runtime_Diags___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Diags_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Diags_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Diags_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Diags_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Diags_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Diags_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Diags_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Diags_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Diags_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Diags_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Diags_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Diags_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Diags_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Diags_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Diags_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Diags_Module_GateProxy_query
#if xdc_runtime_Diags___scope != -1 || defined(xdc_runtime_Diags_setMask__PATCH)
#undef __FN__
#ifdef xdc_runtime_Diags_setMask__PATCH
#define __FN__ xdc_runtime_Diags_setMask__PATCH
#else
#define __FN__ xdc_runtime_Diags_setMask__F
#endif
xdc_Void xdc_runtime_Diags_setMask__E( xdc_String control ) {
#if xdc_runtime_Diags___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Diags_setMask__ENTRY_EVT, (xdc_IArg)control);
#endif
#if xdc_runtime_Diags___L_EXIT
    __FN__(control);
    xdc_runtime_Log_write1(xdc_runtime_Diags_setMask__EXIT_EVT, 0);
#else
    __FN__(control);
#endif
}
#endif

#if defined(xdc_runtime_Diags___EXPORT) && defined(__ti__)
#if xdc_runtime_Diags___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Diags_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Diags_setMask__E);
#endif

#if defined(xdc_runtime_Diags___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Diags_Module__diagsEnabled xdc_runtime_Diags_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__diagsIncluded xdc_runtime_Diags_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__diagsMask xdc_runtime_Diags_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__gateObj xdc_runtime_Diags_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__gatePrms xdc_runtime_Diags_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__id xdc_runtime_Diags_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__loggerDefined xdc_runtime_Diags_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__loggerObj xdc_runtime_Diags_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__loggerFxn4 xdc_runtime_Diags_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__loggerFxn8 xdc_runtime_Diags_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Module__startupDoneFxn xdc_runtime_Diags_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Object__count xdc_runtime_Diags_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Object__heap xdc_runtime_Diags_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Object__sizeof xdc_runtime_Diags_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_Object__table xdc_runtime_Diags_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_setMaskEnabled xdc_runtime_Diags_setMaskEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Diags_dictBase xdc_runtime_Diags_dictBase__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Diags_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Diags_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Diags_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Diags_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Diags_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Diags_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Diags_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Diags_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Diags_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Diags_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Diags_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Diags_setMask__E( xdc_String control ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Diags___ROMPATCH
__FAR__ xdc_runtime_Diags_Module__MTAB__C__qual xdc_runtime_Diags_MTab__ xdc_runtime_Diags_Module__MTAB__C = {
#if xdc_runtime_Diags___scope == -1
    xdc_runtime_Diags_setMask__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Diags_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Diags_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Diags_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Diags_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Diags_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Diags_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Diags_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Diags_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Diags_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Diags_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Diags_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Diags_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Diags_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Diags_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Diags_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Diags_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Diags___ROMPATCH
#define __FN__ xdc_runtime_Diags_Module__MTAB__C.setMask
#else
#define __FN__ xdc_runtime_Diags_setMask__F
#endif
xdc_Void xdc_runtime_Diags_setMask__E( xdc_String control ) {
    __FN__(control);
}
#undef __FN__
#define __FN__ xdc_runtime_Diags_setMask__F
xdc_Void xdc_runtime_Diags_setMask__R( xdc_String control ) {
#if xdc_runtime_Diags___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Diags_setMask__ENTRY_EVT, (xdc_IArg)control);
#endif
#if xdc_runtime_Diags___L_EXIT
    __FN__(control);
    xdc_runtime_Log_write1(xdc_runtime_Diags_setMask__EXIT_EVT, 0);
#else
    __FN__(control);
#endif
}

#if defined(xdc_runtime_Diags___EXPORT) && defined(__ti__)
#if xdc_runtime_Diags___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Diags_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Diags_setMask__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Diags___scope != -1
xdc_Bool xdc_runtime_Diags_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Diags___scope */

#endif /* xdc_runtime_Diags___used */

#ifdef xdc_runtime_Error___used
/*
 *  ======== module Error ========
 *  Do not modify this file; it is generated from the specification Error.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Error__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Error.h>
#undef __nested__
#else
#include <xdc/runtime/Error.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Error___LOGOBJ) && xdc_runtime_Error___DGSINCL & 0x1
#define xdc_runtime_Error___L_ENTRY 1
#else
#define xdc_runtime_Error___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Error___LOGOBJ) && xdc_runtime_Error___DGSINCL & 0x2
#define xdc_runtime_Error___L_EXIT 1
#else
#define xdc_runtime_Error___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Error___LOGOBJ) && xdc_runtime_Error___DGSINCL & 0x4
#define xdc_runtime_Error___L_LIFECYCLE 1
#else
#define xdc_runtime_Error___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Error_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Error_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Error_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Error_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Error_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Error_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Error_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Error_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Error_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Error_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Error_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Error_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Error_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Error_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Error_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Error_Module_GateProxy_query
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_check__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_check__PATCH
#define __FN__ xdc_runtime_Error_check__PATCH
#else
#define __FN__ xdc_runtime_Error_check__F
#endif
xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_check__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_check__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_getData__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_getData__PATCH
#define __FN__ xdc_runtime_Error_getData__PATCH
#else
#define __FN__ xdc_runtime_Error_getData__F
#endif
xdc_runtime_Error_Data* xdc_runtime_Error_getData__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Error_Data* __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getData__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getData__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_getCode__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_getCode__PATCH
#define __FN__ xdc_runtime_Error_getCode__PATCH
#else
#define __FN__ xdc_runtime_Error_getCode__F
#endif
xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_UInt16 __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getCode__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getCode__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_getId__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_getId__PATCH
#define __FN__ xdc_runtime_Error_getId__PATCH
#else
#define __FN__ xdc_runtime_Error_getId__F
#endif
xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Error_Id __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getId__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getId__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_getMsg__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_getMsg__PATCH
#define __FN__ xdc_runtime_Error_getMsg__PATCH
#else
#define __FN__ xdc_runtime_Error_getMsg__F
#endif
xdc_String xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getMsg__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getMsg__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_getSite__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_getSite__PATCH
#define __FN__ xdc_runtime_Error_getSite__PATCH
#else
#define __FN__ xdc_runtime_Error_getSite__F
#endif
xdc_runtime_Types_Site* xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Types_Site* __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getSite__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getSite__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_init__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_init__PATCH
#define __FN__ xdc_runtime_Error_init__PATCH
#else
#define __FN__ xdc_runtime_Error_init__F
#endif
xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_init__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_init__EXIT_EVT, 0);
#else
    __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_print__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_print__PATCH
#define __FN__ xdc_runtime_Error_print__PATCH
#else
#define __FN__ xdc_runtime_Error_print__F
#endif
xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_print__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_print__EXIT_EVT, 0);
#else
    __FN__(eb);
#endif
}
#endif
#if xdc_runtime_Error___scope != -1 || defined(xdc_runtime_Error_raiseX__PATCH)
#undef __FN__
#ifdef xdc_runtime_Error_raiseX__PATCH
#define __FN__ xdc_runtime_Error_raiseX__PATCH
#else
#define __FN__ xdc_runtime_Error_raiseX__F
#endif
xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block* eb, xdc_runtime_Types_ModuleId mod, xdc_String file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Error_raiseX__ENTRY_EVT, (xdc_IArg)eb, (xdc_IArg)mod, (xdc_IArg)file, (xdc_IArg)line);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb, mod, file, line, id, arg1, arg2);
    xdc_runtime_Log_write1(xdc_runtime_Error_raiseX__EXIT_EVT, 0);
#else
    __FN__(eb, mod, file, line, id, arg1, arg2);
#endif
}
#endif

#if defined(xdc_runtime_Error___EXPORT) && defined(__ti__)
#if xdc_runtime_Error___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_check__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getData__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getCode__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getId__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getMsg__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getSite__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_init__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_print__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_raiseX__E);
#endif

#if defined(xdc_runtime_Error___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Error_Module__diagsEnabled xdc_runtime_Error_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__diagsIncluded xdc_runtime_Error_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__diagsMask xdc_runtime_Error_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__gateObj xdc_runtime_Error_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__gatePrms xdc_runtime_Error_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__id xdc_runtime_Error_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__loggerDefined xdc_runtime_Error_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__loggerObj xdc_runtime_Error_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__loggerFxn4 xdc_runtime_Error_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__loggerFxn8 xdc_runtime_Error_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Module__startupDoneFxn xdc_runtime_Error_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Object__count xdc_runtime_Error_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Object__heap xdc_runtime_Error_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Object__sizeof xdc_runtime_Error_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_Object__table xdc_runtime_Error_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_E_generic xdc_runtime_Error_E_generic__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_E_memory xdc_runtime_Error_E_memory__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_policy xdc_runtime_Error_policy__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_raiseHook xdc_runtime_Error_raiseHook__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Error_maxDepth xdc_runtime_Error_maxDepth__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Error_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Error_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Error_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Error_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Error_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Error_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Error_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Error_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_runtime_Error_Data* xdc_runtime_Error_getData__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_String xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_runtime_Types_Site* xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block* eb, xdc_runtime_Types_ModuleId mod, xdc_String file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Error___ROMPATCH
__FAR__ xdc_runtime_Error_Module__MTAB__C__qual xdc_runtime_Error_MTab__ xdc_runtime_Error_Module__MTAB__C = {
#if xdc_runtime_Error___scope == -1
    xdc_runtime_Error_check__E,
    xdc_runtime_Error_getData__E,
    xdc_runtime_Error_getCode__E,
    xdc_runtime_Error_getId__E,
    xdc_runtime_Error_getMsg__E,
    xdc_runtime_Error_getSite__E,
    xdc_runtime_Error_init__E,
    xdc_runtime_Error_print__E,
    xdc_runtime_Error_raiseX__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Error_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Error_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Error_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Error_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Error_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Error_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Error_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Error_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Error_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Error_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Error_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Error_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Error_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Error_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Error_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Error_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.check
#else
#define __FN__ xdc_runtime_Error_check__F
#endif
xdc_Bool xdc_runtime_Error_check__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.getData
#else
#define __FN__ xdc_runtime_Error_getData__F
#endif
xdc_runtime_Error_Data* xdc_runtime_Error_getData__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.getCode
#else
#define __FN__ xdc_runtime_Error_getCode__F
#endif
xdc_UInt16 xdc_runtime_Error_getCode__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.getId
#else
#define __FN__ xdc_runtime_Error_getId__F
#endif
xdc_runtime_Error_Id xdc_runtime_Error_getId__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.getMsg
#else
#define __FN__ xdc_runtime_Error_getMsg__F
#endif
xdc_String xdc_runtime_Error_getMsg__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.getSite
#else
#define __FN__ xdc_runtime_Error_getSite__F
#endif
xdc_runtime_Types_Site* xdc_runtime_Error_getSite__E( xdc_runtime_Error_Block* eb ) {
    return __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.init
#else
#define __FN__ xdc_runtime_Error_init__F
#endif
xdc_Void xdc_runtime_Error_init__E( xdc_runtime_Error_Block* eb ) {
    __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.print
#else
#define __FN__ xdc_runtime_Error_print__F
#endif
xdc_Void xdc_runtime_Error_print__E( xdc_runtime_Error_Block* eb ) {
    __FN__(eb);
}
#undef __FN__
#ifdef xdc_runtime_Error___ROMPATCH
#define __FN__ xdc_runtime_Error_Module__MTAB__C.raiseX
#else
#define __FN__ xdc_runtime_Error_raiseX__F
#endif
xdc_Void xdc_runtime_Error_raiseX__E( xdc_runtime_Error_Block* eb, xdc_runtime_Types_ModuleId mod, xdc_String file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 ) {
    __FN__(eb, mod, file, line, id, arg1, arg2);
}
#undef __FN__
#define __FN__ xdc_runtime_Error_check__F
xdc_Bool xdc_runtime_Error_check__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_check__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_check__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_getData__F
xdc_runtime_Error_Data* xdc_runtime_Error_getData__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Error_Data* __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getData__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getData__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_getCode__F
xdc_UInt16 xdc_runtime_Error_getCode__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_UInt16 __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getCode__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getCode__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_getId__F
xdc_runtime_Error_Id xdc_runtime_Error_getId__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Error_Id __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getId__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getId__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_getMsg__F
xdc_String xdc_runtime_Error_getMsg__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getMsg__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getMsg__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_getSite__F
xdc_runtime_Types_Site* xdc_runtime_Error_getSite__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_EXIT
    xdc_runtime_Types_Site* __ret;
#else
#endif
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_getSite__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __ret = __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_getSite__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_init__F
xdc_Void xdc_runtime_Error_init__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_init__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_init__EXIT_EVT, 0);
#else
    __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_print__F
xdc_Void xdc_runtime_Error_print__R( xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Error_print__ENTRY_EVT, (xdc_IArg)eb);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb);
    xdc_runtime_Log_write1(xdc_runtime_Error_print__EXIT_EVT, 0);
#else
    __FN__(eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Error_raiseX__F
xdc_Void xdc_runtime_Error_raiseX__R( xdc_runtime_Error_Block* eb, xdc_runtime_Types_ModuleId mod, xdc_String file, xdc_Int line, xdc_runtime_Error_Id id, xdc_IArg arg1, xdc_IArg arg2 ) {
#if xdc_runtime_Error___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Error_raiseX__ENTRY_EVT, (xdc_IArg)eb, (xdc_IArg)mod, (xdc_IArg)file, (xdc_IArg)line);
#endif
#if xdc_runtime_Error___L_EXIT
    __FN__(eb, mod, file, line, id, arg1, arg2);
    xdc_runtime_Log_write1(xdc_runtime_Error_raiseX__EXIT_EVT, 0);
#else
    __FN__(eb, mod, file, line, id, arg1, arg2);
#endif
}

#if defined(xdc_runtime_Error___EXPORT) && defined(__ti__)
#if xdc_runtime_Error___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_check__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getData__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getCode__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getId__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getMsg__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_getSite__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_init__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_print__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Error_raiseX__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Error___scope != -1
xdc_Bool xdc_runtime_Error_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Error___scope */

#endif /* xdc_runtime_Error___used */

#ifdef xdc_runtime_Gate___used
/*
 *  ======== module Gate ========
 *  Do not modify this file; it is generated from the specification Gate.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Gate__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Gate.h>
#undef __nested__
#else
#include <xdc/runtime/Gate.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Gate___LOGOBJ) && xdc_runtime_Gate___DGSINCL & 0x1
#define xdc_runtime_Gate___L_ENTRY 1
#else
#define xdc_runtime_Gate___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Gate___LOGOBJ) && xdc_runtime_Gate___DGSINCL & 0x2
#define xdc_runtime_Gate___L_EXIT 1
#else
#define xdc_runtime_Gate___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Gate___LOGOBJ) && xdc_runtime_Gate___DGSINCL & 0x4
#define xdc_runtime_Gate___L_LIFECYCLE 1
#else
#define xdc_runtime_Gate___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Gate_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Gate_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Gate_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Gate_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Gate_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Gate_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Gate_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Gate_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Gate_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Gate_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Gate_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Gate_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Gate_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Gate_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Gate_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Gate_Module_GateProxy_query
#if xdc_runtime_Gate___scope != -1 || defined(xdc_runtime_Gate_enterSystem__PATCH)
#undef __FN__
#ifdef xdc_runtime_Gate_enterSystem__PATCH
#define __FN__ xdc_runtime_Gate_enterSystem__PATCH
#else
#define __FN__ xdc_runtime_Gate_enterSystem__F
#endif
xdc_IArg xdc_runtime_Gate_enterSystem__E( void ) {
#if xdc_runtime_Gate___L_EXIT
    xdc_IArg __ret;
#else
#endif
#if xdc_runtime_Gate___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Gate_enterSystem__ENTRY_EVT);
#endif
#if xdc_runtime_Gate___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Gate_enterSystem__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_Gate___scope != -1 || defined(xdc_runtime_Gate_leaveSystem__PATCH)
#undef __FN__
#ifdef xdc_runtime_Gate_leaveSystem__PATCH
#define __FN__ xdc_runtime_Gate_leaveSystem__PATCH
#else
#define __FN__ xdc_runtime_Gate_leaveSystem__F
#endif
xdc_Void xdc_runtime_Gate_leaveSystem__E( xdc_IArg key ) {
#if xdc_runtime_Gate___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Gate_leaveSystem__ENTRY_EVT, (xdc_IArg)key);
#endif
#if xdc_runtime_Gate___L_EXIT
    __FN__(key);
    xdc_runtime_Log_write1(xdc_runtime_Gate_leaveSystem__EXIT_EVT, 0);
#else
    __FN__(key);
#endif
}
#endif

#if defined(xdc_runtime_Gate___EXPORT) && defined(__ti__)
#if xdc_runtime_Gate___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_enterSystem__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_leaveSystem__E);
#endif

#if defined(xdc_runtime_Gate___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Gate_Module__diagsEnabled xdc_runtime_Gate_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__diagsIncluded xdc_runtime_Gate_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__diagsMask xdc_runtime_Gate_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__gateObj xdc_runtime_Gate_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__gatePrms xdc_runtime_Gate_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__id xdc_runtime_Gate_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__loggerDefined xdc_runtime_Gate_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__loggerObj xdc_runtime_Gate_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__loggerFxn4 xdc_runtime_Gate_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__loggerFxn8 xdc_runtime_Gate_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Module__startupDoneFxn xdc_runtime_Gate_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Object__count xdc_runtime_Gate_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Object__heap xdc_runtime_Gate_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Object__sizeof xdc_runtime_Gate_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Gate_Object__table xdc_runtime_Gate_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Gate_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Gate_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Gate_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Gate_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Gate_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Gate_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Gate_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Gate_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Gate_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Gate_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Gate_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_IArg xdc_runtime_Gate_enterSystem__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Gate_leaveSystem__E( xdc_IArg key ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Gate___ROMPATCH
__FAR__ xdc_runtime_Gate_Module__MTAB__C__qual xdc_runtime_Gate_MTab__ xdc_runtime_Gate_Module__MTAB__C = {
#if xdc_runtime_Gate___scope == -1
    xdc_runtime_Gate_enterSystem__E,
    xdc_runtime_Gate_leaveSystem__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Gate_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Gate_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Gate_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Gate_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Gate_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Gate_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Gate_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Gate_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Gate_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Gate_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Gate_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Gate_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Gate_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Gate_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Gate_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Gate_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Gate___ROMPATCH
#define __FN__ xdc_runtime_Gate_Module__MTAB__C.enterSystem
#else
#define __FN__ xdc_runtime_Gate_enterSystem__F
#endif
xdc_IArg xdc_runtime_Gate_enterSystem__E( void ) {
    return __FN__();
}
#undef __FN__
#ifdef xdc_runtime_Gate___ROMPATCH
#define __FN__ xdc_runtime_Gate_Module__MTAB__C.leaveSystem
#else
#define __FN__ xdc_runtime_Gate_leaveSystem__F
#endif
xdc_Void xdc_runtime_Gate_leaveSystem__E( xdc_IArg key ) {
    __FN__(key);
}
#undef __FN__
#define __FN__ xdc_runtime_Gate_enterSystem__F
xdc_IArg xdc_runtime_Gate_enterSystem__R( void ) {
#if xdc_runtime_Gate___L_EXIT
    xdc_IArg __ret;
#else
#endif
#if xdc_runtime_Gate___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Gate_enterSystem__ENTRY_EVT);
#endif
#if xdc_runtime_Gate___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Gate_enterSystem__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Gate_leaveSystem__F
xdc_Void xdc_runtime_Gate_leaveSystem__R( xdc_IArg key ) {
#if xdc_runtime_Gate___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Gate_leaveSystem__ENTRY_EVT, (xdc_IArg)key);
#endif
#if xdc_runtime_Gate___L_EXIT
    __FN__(key);
    xdc_runtime_Log_write1(xdc_runtime_Gate_leaveSystem__EXIT_EVT, 0);
#else
    __FN__(key);
#endif
}

#if defined(xdc_runtime_Gate___EXPORT) && defined(__ti__)
#if xdc_runtime_Gate___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_enterSystem__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Gate_leaveSystem__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Gate___scope != -1
xdc_Bool xdc_runtime_Gate_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Gate___scope */

#endif /* xdc_runtime_Gate___used */

#ifdef xdc_runtime_GateNull___used
/*
 *  ======== module GateNull ========
 *  Do not modify this file; it is generated from the specification GateNull.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_GateNull__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/GateNull.h>
#undef __nested__
#else
#include <xdc/runtime/GateNull.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_GateNull___LOGOBJ) && xdc_runtime_GateNull___DGSINCL & 0x1
#define xdc_runtime_GateNull___L_ENTRY 1
#else
#define xdc_runtime_GateNull___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_GateNull___LOGOBJ) && xdc_runtime_GateNull___DGSINCL & 0x2
#define xdc_runtime_GateNull___L_EXIT 1
#else
#define xdc_runtime_GateNull___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_GateNull___LOGOBJ) && xdc_runtime_GateNull___DGSINCL & 0x4
#define xdc_runtime_GateNull___L_LIFECYCLE 1
#else
#define xdc_runtime_GateNull___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_GateNull_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_GateNull_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_GateNull_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_GateNull_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_GateNull_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_GateNull_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_GateNull_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_GateNull_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_GateNull_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_GateNull_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_GateNull_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_GateNull_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_GateNull_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_GateNull_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_GateNull_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_GateNull_Module_GateProxy_query
#if xdc_runtime_GateNull___scope != -1 || defined(xdc_runtime_GateNull_query__PATCH)
#undef __FN__
#ifdef xdc_runtime_GateNull_query__PATCH
#define __FN__ xdc_runtime_GateNull_query__PATCH
#else
#define __FN__ xdc_runtime_GateNull_query__F
#endif
xdc_Bool xdc_runtime_GateNull_query__E( xdc_Int qual ) {
#if xdc_runtime_GateNull___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_GateNull_query__ENTRY_EVT, (xdc_IArg)qual);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __ret = __FN__(qual);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_query__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(qual);
#endif
}
#endif
#if xdc_runtime_GateNull___scope != -1 || defined(xdc_runtime_GateNull_enter__PATCH)
#undef __FN__
#ifdef xdc_runtime_GateNull_enter__PATCH
#define __FN__ xdc_runtime_GateNull_enter__PATCH
#else
#define __FN__ xdc_runtime_GateNull_enter__F
#endif
xdc_IArg xdc_runtime_GateNull_enter__E( xdc_runtime_GateNull_Handle _this ) {
#if xdc_runtime_GateNull___L_EXIT
    xdc_IArg __ret;
#else
#endif
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_GateNull_enter__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_enter__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#endif
#if xdc_runtime_GateNull___scope != -1 || defined(xdc_runtime_GateNull_leave__PATCH)
#undef __FN__
#ifdef xdc_runtime_GateNull_leave__PATCH
#define __FN__ xdc_runtime_GateNull_leave__PATCH
#else
#define __FN__ xdc_runtime_GateNull_leave__F
#endif
xdc_Void xdc_runtime_GateNull_leave__E( xdc_runtime_GateNull_Handle _this, xdc_IArg key ) {
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_GateNull_leave__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)key);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __FN__((void*)_this, key);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_leave__EXIT_EVT, 0);
#else
    __FN__((void*)_this, key);
#endif
}
#endif

#if defined(xdc_runtime_GateNull___EXPORT) && defined(__ti__)
#if xdc_runtime_GateNull___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_query__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_enter__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_leave__E);
#endif

#if defined(xdc_runtime_GateNull___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_GateNull_Module__diagsEnabled xdc_runtime_GateNull_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__diagsIncluded xdc_runtime_GateNull_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__diagsMask xdc_runtime_GateNull_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__gateObj xdc_runtime_GateNull_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__gatePrms xdc_runtime_GateNull_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__id xdc_runtime_GateNull_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__loggerDefined xdc_runtime_GateNull_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__loggerObj xdc_runtime_GateNull_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__loggerFxn4 xdc_runtime_GateNull_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__loggerFxn8 xdc_runtime_GateNull_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Module__startupDoneFxn xdc_runtime_GateNull_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Object__count xdc_runtime_GateNull_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Object__heap xdc_runtime_GateNull_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Object__sizeof xdc_runtime_GateNull_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_GateNull_Object__table xdc_runtime_GateNull_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_GateNull_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_GateNull_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_GateNull_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_GateNull_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_GateNull_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_GateNull_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_GateNull_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_GateNull_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_GateNull_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_GateNull_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_GateNull_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_GateNull_query__E( xdc_Int qual ) __attribute__ ((externally_visible));
xdc_IArg xdc_runtime_GateNull_enter__E( xdc_runtime_GateNull_Handle ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_GateNull_leave__E( xdc_runtime_GateNull_Handle, xdc_IArg key ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_GateNull___ROMPATCH
__FAR__ xdc_runtime_GateNull_Module__MTAB__C__qual xdc_runtime_GateNull_MTab__ xdc_runtime_GateNull_Module__MTAB__C = {
#if xdc_runtime_GateNull___scope == -1
    xdc_runtime_GateNull_query__E,
    xdc_runtime_GateNull_enter__E,
    xdc_runtime_GateNull_leave__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_GateNull_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_GateNull_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_GateNull_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_GateNull_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_GateNull_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_GateNull_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_GateNull_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_GateNull_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_GateNull_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_GateNull_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_GateNull_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_GateNull_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_GateNull_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_GateNull_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_GateNull_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_GateNull_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_GateNull___ROMPATCH
#define __FN__ xdc_runtime_GateNull_Module__MTAB__C.query
#else
#define __FN__ xdc_runtime_GateNull_query__F
#endif
xdc_Bool xdc_runtime_GateNull_query__E( xdc_Int qual ) {
    return __FN__(qual);
}
#undef __FN__
#ifdef xdc_runtime_GateNull___ROMPATCH
#define __FN__ xdc_runtime_GateNull_Module__MTAB__C.enter
#else
#define __FN__ xdc_runtime_GateNull_enter__F
#endif
xdc_IArg xdc_runtime_GateNull_enter__E( xdc_runtime_GateNull_Handle _this ) {
    return __FN__((void*)_this);
}
#undef __FN__
#ifdef xdc_runtime_GateNull___ROMPATCH
#define __FN__ xdc_runtime_GateNull_Module__MTAB__C.leave
#else
#define __FN__ xdc_runtime_GateNull_leave__F
#endif
xdc_Void xdc_runtime_GateNull_leave__E( xdc_runtime_GateNull_Handle _this, xdc_IArg key ) {
    __FN__((void*)_this, key);
}
#undef __FN__
#define __FN__ xdc_runtime_GateNull_query__F
xdc_Bool xdc_runtime_GateNull_query__R( xdc_Int qual ) {
#if xdc_runtime_GateNull___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_GateNull_query__ENTRY_EVT, (xdc_IArg)qual);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __ret = __FN__(qual);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_query__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(qual);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_GateNull_enter__F
xdc_IArg xdc_runtime_GateNull_enter__R( xdc_runtime_GateNull_Handle _this ) {
#if xdc_runtime_GateNull___L_EXIT
    xdc_IArg __ret;
#else
#endif
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_GateNull_enter__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_enter__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_GateNull_leave__F
xdc_Void xdc_runtime_GateNull_leave__R( xdc_runtime_GateNull_Handle _this, xdc_IArg key ) {
#if xdc_runtime_GateNull___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_GateNull_leave__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)key);
#endif
#if xdc_runtime_GateNull___L_EXIT
    __FN__((void*)_this, key);
    xdc_runtime_Log_write1(xdc_runtime_GateNull_leave__EXIT_EVT, 0);
#else
    __FN__((void*)_this, key);
#endif
}

#if defined(xdc_runtime_GateNull___EXPORT) && defined(__ti__)
#if xdc_runtime_GateNull___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_query__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_enter__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_GateNull_leave__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_GateNull___scope != -1
#ifdef xdc_runtime_GateNull___FXNTAB
#ifndef __isrom__
#if xdc_runtime_GateNull___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_GateNull___scope == -1 || !defined(__xdc_runtime_IGateProvider_Interface__BASE__CR)
#ifndef __xdc_runtime_IGateProvider_Interface__BASE__C
#define __xdc_runtime_IGateProvider_Interface__BASE__C
__FAR__ xdc_runtime_IGateProvider_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IGateProvider_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_GateNull_Module__FXNS__C, ".const:xdc_runtime_GateNull_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_GateNull_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_GateNull_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_GateNull_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_GateNull_Fxns__ xdc_runtime_GateNull_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_IGateProvider_Interface__BASE__C,
    &xdc_runtime_GateNull_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_GateNull_query__E,
    xdc_runtime_GateNull_enter__E,
    xdc_runtime_GateNull_leave__E,
    {

#ifdef xdc_runtime_GateNull___OBJHEAP
        xdc_runtime_GateNull_Object__create__S,
#else
        /* create__ */ 0,
#endif
#ifdef xdc_runtime_GateNull___DELETE
        xdc_runtime_GateNull_Object__delete__S,
#else
        /* delete__ */ 0,
#endif
        xdc_runtime_GateNull_Handle__label__S,
        xdc_runtime_GateNull_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_GateNull_Module__startupDone__S(void) {

    return 1;
}
xdc_runtime_Types_Label* xdc_runtime_GateNull_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {
    lab->handle = obj;
    lab->modId = xdc_runtime_GateNull_Module__id__D;
#ifdef xdc_runtime_GateNull___NAMEDINST
    xdc_runtime_Core_assignLabel(lab, ((xdc_runtime_GateNull_Object__*)obj)->__name, 1);
#else
    xdc_runtime_Core_assignLabel(lab, 0, 0);
#endif
    return lab;
}
xdc_Void xdc_runtime_GateNull_Params__init__S( xdc_Ptr prms, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {
#ifdef xdc_runtime_GateNull___OBJHEAP
    xdc_runtime_Core_assignParams__I(prms, (xdc_Ptr)(src ? src : &xdc_runtime_GateNull_Object__PARAMS__C), psz, isz);
#endif
}
xdc_Ptr xdc_runtime_GateNull_Object__get__S( xdc_Ptr oa, xdc_Int i ) {
    if (oa) return ((xdc_runtime_GateNull_Object*)oa) + i;
    if (xdc_runtime_GateNull_Object__count__C == 0) return 0;
    return ((xdc_runtime_GateNull_Object*)xdc_runtime_GateNull_Object__table__C) + i;
}

#ifdef xdc_runtime_GateNull___OBJHEAP
extern xdc_Ptr xdc_runtime_GateNull_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_GateNull___ParamsPtr __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_GateNull_Params prms;
    xdc_runtime_GateNull_Object* obj;
    obj = xdc_runtime_Core_createObject__I(&xdc_runtime_GateNull_Object__DESC__C, __oa, __osz, &prms, (xdc_Ptr)__pa, __psz, __eb);
    if (!obj) return 0;
#ifdef xdc_runtime_GateNull___DELETE
#define xdc_runtime_GateNull___ISTAT 
#else
#define xdc_runtime_GateNull___ISTAT
#endif
#if xdc_runtime_GateNull___L_LIFECYCLE
#ifdef xdc_runtime_GateNull___NAMEDINST
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, (xdc_IArg)(((xdc_runtime_GateNull_Object__*)obj)->__name));
#else
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, 0);
#endif
#endif
    return obj;
}
#else
extern xdc_Ptr xdc_runtime_GateNull_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_GateNull___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_GateNull_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"create policy error", 0);
    return 0;
}
#endif

#ifdef xdc_runtime_GateNull___DELETE
extern xdc_Void xdc_runtime_GateNull_Object__destruct__S( xdc_Ptr obj ) {
#if xdc_runtime_GateNull___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_destruct, (xdc_IArg)obj);
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_GateNull_Object__DESC__C, obj, 0, -1, TRUE);
}
extern xdc_Void xdc_runtime_GateNull_Object__delete__S( xdc_Ptr instp ) {
#if xdc_runtime_GateNull___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_delete, (xdc_IArg)(*((xdc_runtime_GateNull_Object**)instp)));
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_GateNull_Object__DESC__C, *((xdc_runtime_GateNull_Object**)instp), 0, -1, FALSE);
    *((xdc_runtime_GateNull_Handle*)instp) = 0;
}
#else
extern xdc_Void xdc_runtime_GateNull_Object__destruct__S( xdc_Ptr obj ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_GateNull_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
extern xdc_Void xdc_runtime_GateNull_Object__delete__S( xdc_Ptr instp ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_GateNull_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
#endif

extern xdc_Ptr xdc_runtime_GateNull_Object__first__S(void) {
#ifdef xdc_runtime_GateNull___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = (xdc_runtime_Types_InstHdr *)xdc_runtime_GateNull_Module__root__V.hdr.link.next;
    if (iHdr != (xdc_runtime_Types_InstHdr *)&xdc_runtime_GateNull_Module__root__V) {
        return (iHdr + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

extern xdc_Ptr xdc_runtime_GateNull_Object__next__S(xdc_Ptr obj) {
#ifdef xdc_runtime_GateNull___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = ((xdc_runtime_Types_InstHdr *)obj) - 1;
    if (iHdr->link.next != (xdc_runtime_Types_Link *)&xdc_runtime_GateNull_Module__root__V) {
        return ((xdc_runtime_Types_InstHdr *)(iHdr->link.next) + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

#endif /* xdc_runtime_GateNull___scope */

#if (defined(__isrom__) && defined(xdc_runtime_GateNull___OBJHEAP_ISNULL)) || (!defined(__isrom__) && (xdc_runtime_GateNull___scope != -1 || !defined(xdc_runtime_GateNull___OBJHEAP_ISNULL)))
typedef struct { xdc_runtime_GateNull_Object2__ s0; char c; } xdc_runtime_GateNull___S1;
__FAR__ xdc_runtime_GateNull_Object__DESC__C__qual xdc_runtime_Core_ObjDesc xdc_runtime_GateNull_Object__DESC__C = {
#ifdef xdc_runtime_GateNull___FXNTAB
    (Ptr)&xdc_runtime_GateNull_Module__FXNS__C, /* fxnTab */
#else
    (Ptr)0, /* fxnTab */
#endif
    &xdc_runtime_GateNull_Module__root__V.hdr.link, /* modLink */
    sizeof(xdc_runtime_GateNull___S1) - sizeof(xdc_runtime_GateNull_Object2__), /* objAlign */
#ifdef xdc_runtime_GateNull___OBJHEAP
    xdc_runtime_GateNull___OBJHEAP, /* objHeap */
#else
    0, /* objHeap */
#endif
#ifdef xdc_runtime_GateNull___NAMEDINST
    offsetof(xdc_runtime_GateNull_Object__, __name), /* objName */
#else
    0, /* objName */
#endif
    sizeof(xdc_runtime_GateNull_Object2__), /* objSize */
    (Ptr)&xdc_runtime_GateNull_Object__PARAMS__C, /* prmsInit */
    sizeof(xdc_runtime_GateNull_Params), /* prmsSize */
};
#endif
#endif /* xdc_runtime_GateNull___used */

#ifdef xdc_runtime_Log___used
/*
 *  ======== module Log ========
 *  Do not modify this file; it is generated from the specification Log.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Log__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Log.h>
#undef __nested__
#else
#include <xdc/runtime/Log.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Log___LOGOBJ) && xdc_runtime_Log___DGSINCL & 0x1
#define xdc_runtime_Log___L_ENTRY 1
#else
#define xdc_runtime_Log___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Log___LOGOBJ) && xdc_runtime_Log___DGSINCL & 0x2
#define xdc_runtime_Log___L_EXIT 1
#else
#define xdc_runtime_Log___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Log___LOGOBJ) && xdc_runtime_Log___DGSINCL & 0x4
#define xdc_runtime_Log___L_LIFECYCLE 1
#else
#define xdc_runtime_Log___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Log_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Log_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Log_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Log_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Log_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Log_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Log_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Log_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Log_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Log_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Log_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Log_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Log_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Log_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Log_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Log_Module_GateProxy_query
#if xdc_runtime_Log___scope != -1 || defined(xdc_runtime_Log_doPrint__PATCH)
#undef __FN__
#ifdef xdc_runtime_Log_doPrint__PATCH
#define __FN__ xdc_runtime_Log_doPrint__PATCH
#else
#define __FN__ xdc_runtime_Log_doPrint__F
#endif
xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec* evRec ) {
#if xdc_runtime_Log___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Log_doPrint__ENTRY_EVT, (xdc_IArg)evRec);
#endif
#if xdc_runtime_Log___L_EXIT
    __FN__(evRec);
    xdc_runtime_Log_write1(xdc_runtime_Log_doPrint__EXIT_EVT, 0);
#else
    __FN__(evRec);
#endif
}
#endif

#if defined(xdc_runtime_Log___EXPORT) && defined(__ti__)
#if xdc_runtime_Log___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Log_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Log_doPrint__E);
#endif

#if defined(xdc_runtime_Log___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Log_Module__diagsEnabled xdc_runtime_Log_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__diagsIncluded xdc_runtime_Log_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__diagsMask xdc_runtime_Log_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__gateObj xdc_runtime_Log_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__gatePrms xdc_runtime_Log_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__id xdc_runtime_Log_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__loggerDefined xdc_runtime_Log_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__loggerObj xdc_runtime_Log_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__loggerFxn4 xdc_runtime_Log_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__loggerFxn8 xdc_runtime_Log_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Module__startupDoneFxn xdc_runtime_Log_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Object__count xdc_runtime_Log_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Object__heap xdc_runtime_Log_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Object__sizeof xdc_runtime_Log_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_Object__table xdc_runtime_Log_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_L_construct xdc_runtime_Log_L_construct__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_L_create xdc_runtime_Log_L_create__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_L_destruct xdc_runtime_Log_L_destruct__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Log_L_delete xdc_runtime_Log_L_delete__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Log_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Log_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Log_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Log_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Log_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Log_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Log_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Log_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Log_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Log_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Log_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec* evRec ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Log___ROMPATCH
__FAR__ xdc_runtime_Log_Module__MTAB__C__qual xdc_runtime_Log_MTab__ xdc_runtime_Log_Module__MTAB__C = {
#if xdc_runtime_Log___scope == -1
    xdc_runtime_Log_doPrint__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Log_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Log_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Log_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Log_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Log_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Log_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Log_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Log_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Log_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Log_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Log_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Log_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Log_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Log_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Log_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Log_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Log___ROMPATCH
#define __FN__ xdc_runtime_Log_Module__MTAB__C.doPrint
#else
#define __FN__ xdc_runtime_Log_doPrint__F
#endif
xdc_Void xdc_runtime_Log_doPrint__E( xdc_runtime_Log_EventRec* evRec ) {
    __FN__(evRec);
}
#undef __FN__
#define __FN__ xdc_runtime_Log_doPrint__F
xdc_Void xdc_runtime_Log_doPrint__R( xdc_runtime_Log_EventRec* evRec ) {
#if xdc_runtime_Log___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Log_doPrint__ENTRY_EVT, (xdc_IArg)evRec);
#endif
#if xdc_runtime_Log___L_EXIT
    __FN__(evRec);
    xdc_runtime_Log_write1(xdc_runtime_Log_doPrint__EXIT_EVT, 0);
#else
    __FN__(evRec);
#endif
}

#if defined(xdc_runtime_Log___EXPORT) && defined(__ti__)
#if xdc_runtime_Log___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Log_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Log_doPrint__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Log___scope != -1
xdc_Bool xdc_runtime_Log_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Log___scope */

#endif /* xdc_runtime_Log___used */

#ifdef xdc_runtime_LoggerBuf___used
/*
 *  ======== module LoggerBuf ========
 *  Do not modify this file; it is generated from the specification LoggerBuf.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_LoggerBuf__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/LoggerBuf.h>
#undef __nested__
#else
#include <xdc/runtime/LoggerBuf.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerBuf___LOGOBJ) && xdc_runtime_LoggerBuf___DGSINCL & 0x1
#define xdc_runtime_LoggerBuf___L_ENTRY 1
#else
#define xdc_runtime_LoggerBuf___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerBuf___LOGOBJ) && xdc_runtime_LoggerBuf___DGSINCL & 0x2
#define xdc_runtime_LoggerBuf___L_EXIT 1
#else
#define xdc_runtime_LoggerBuf___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerBuf___LOGOBJ) && xdc_runtime_LoggerBuf___DGSINCL & 0x4
#define xdc_runtime_LoggerBuf___L_LIFECYCLE 1
#else
#define xdc_runtime_LoggerBuf___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_LoggerBuf_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_LoggerBuf_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_LoggerBuf_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_LoggerBuf_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_LoggerBuf_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_LoggerBuf_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_LoggerBuf_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_LoggerBuf_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_LoggerBuf_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_LoggerBuf_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_LoggerBuf_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_LoggerBuf_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_LoggerBuf_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_LoggerBuf_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_LoggerBuf_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_LoggerBuf_Module_GateProxy_query
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_write4__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_write4__PATCH
#define __FN__ xdc_runtime_LoggerBuf_write4__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_write4__F
#endif
xdc_Void xdc_runtime_LoggerBuf_write4__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write6(xdc_runtime_LoggerBuf_write4__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_write4__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_write8__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_write8__PATCH
#define __FN__ xdc_runtime_LoggerBuf_write8__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_write8__F
#endif
xdc_Void xdc_runtime_LoggerBuf_write8__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write8(xdc_runtime_LoggerBuf_write8__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4, (xdc_IArg)a5, (xdc_IArg)a6);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_write8__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_flushAll__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_flushAll__PATCH
#define __FN__ xdc_runtime_LoggerBuf_flushAll__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_flushAll__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flushAll__E( void ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_LoggerBuf_flushAll__ENTRY_EVT);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAll__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_flushAllInternal__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_flushAllInternal__PATCH
#define __FN__ xdc_runtime_LoggerBuf_flushAllInternal__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_flushAllInternal__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flushAllInternal__E( xdc_Int stat ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAllInternal__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAllInternal__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_enable__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_enable__PATCH
#define __FN__ xdc_runtime_LoggerBuf_enable__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_enable__F
#endif
xdc_Bool xdc_runtime_LoggerBuf_enable__E( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_enable__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_enable__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_disable__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_disable__PATCH
#define __FN__ xdc_runtime_LoggerBuf_disable__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_disable__F
#endif
xdc_Bool xdc_runtime_LoggerBuf_disable__E( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_disable__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_disable__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_reset__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_reset__PATCH
#define __FN__ xdc_runtime_LoggerBuf_reset__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_reset__F
#endif
xdc_Void xdc_runtime_LoggerBuf_reset__E( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_reset__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_reset__EXIT_EVT, 0);
#else
    __FN__((void*)_this);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_flush__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_flush__PATCH
#define __FN__ xdc_runtime_LoggerBuf_flush__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_flush__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flush__E( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flush__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flush__EXIT_EVT, 0);
#else
    __FN__((void*)_this);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1 || defined(xdc_runtime_LoggerBuf_getNextEntry__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerBuf_getNextEntry__PATCH
#define __FN__ xdc_runtime_LoggerBuf_getNextEntry__PATCH
#else
#define __FN__ xdc_runtime_LoggerBuf_getNextEntry__F
#endif
xdc_Int xdc_runtime_LoggerBuf_getNextEntry__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Log_EventRec* evtRec ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_LoggerBuf_getNextEntry__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evtRec);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this, evtRec);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_getNextEntry__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, evtRec);
#endif
}
#endif
#if xdc_runtime_LoggerBuf___scope != -1
xdc_Int xdc_runtime_LoggerBuf_Module_startup__E( xdc_Int state ) { return xdc_runtime_LoggerBuf_Module_startup__F(state); }
#endif

#if defined(xdc_runtime_LoggerBuf___EXPORT) && defined(__ti__)
#if xdc_runtime_LoggerBuf___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Params__init__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_write4__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_write8__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flushAll__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flushAllInternal__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_enable__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_disable__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_reset__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flush__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_getNextEntry__E);
#endif

#if defined(xdc_runtime_LoggerBuf___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_LoggerBuf_Module__diagsEnabled xdc_runtime_LoggerBuf_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__diagsIncluded xdc_runtime_LoggerBuf_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__diagsMask xdc_runtime_LoggerBuf_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__gateObj xdc_runtime_LoggerBuf_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__gatePrms xdc_runtime_LoggerBuf_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__id xdc_runtime_LoggerBuf_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__loggerDefined xdc_runtime_LoggerBuf_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__loggerObj xdc_runtime_LoggerBuf_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__loggerFxn4 xdc_runtime_LoggerBuf_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__loggerFxn8 xdc_runtime_LoggerBuf_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Module__startupDoneFxn xdc_runtime_LoggerBuf_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Object__count xdc_runtime_LoggerBuf_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Object__heap xdc_runtime_LoggerBuf_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Object__sizeof xdc_runtime_LoggerBuf_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_Object__table xdc_runtime_LoggerBuf_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerBuf_enableFlush xdc_runtime_LoggerBuf_enableFlush__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_LoggerBuf_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerBuf_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerBuf_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerBuf_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerBuf_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerBuf_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerBuf_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerBuf_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_write4__E( xdc_runtime_LoggerBuf_Handle, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_write8__E( xdc_runtime_LoggerBuf_Handle, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_flushAll__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_flushAllInternal__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerBuf_enable__E( xdc_runtime_LoggerBuf_Handle ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerBuf_disable__E( xdc_runtime_LoggerBuf_Handle ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_reset__E( xdc_runtime_LoggerBuf_Handle ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerBuf_flush__E( xdc_runtime_LoggerBuf_Handle ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_LoggerBuf_getNextEntry__E( xdc_runtime_LoggerBuf_Handle, xdc_runtime_Log_EventRec* evtRec ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
__FAR__ xdc_runtime_LoggerBuf_Module__MTAB__C__qual xdc_runtime_LoggerBuf_MTab__ xdc_runtime_LoggerBuf_Module__MTAB__C = {
#if xdc_runtime_LoggerBuf___scope == -1
    xdc_runtime_LoggerBuf_write4__E,
    xdc_runtime_LoggerBuf_write8__E,
    xdc_runtime_LoggerBuf_flushAll__E,
    xdc_runtime_LoggerBuf_flushAllInternal__E,
    xdc_runtime_LoggerBuf_enable__E,
    xdc_runtime_LoggerBuf_disable__E,
    xdc_runtime_LoggerBuf_reset__E,
    xdc_runtime_LoggerBuf_flush__E,
    xdc_runtime_LoggerBuf_getNextEntry__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_LoggerBuf_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_LoggerBuf_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_LoggerBuf_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_LoggerBuf_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_LoggerBuf_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_LoggerBuf_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_LoggerBuf_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_LoggerBuf_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_LoggerBuf_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_LoggerBuf_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_LoggerBuf_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_LoggerBuf_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_LoggerBuf_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_LoggerBuf_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_LoggerBuf_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_LoggerBuf_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.write4
#else
#define __FN__ xdc_runtime_LoggerBuf_write4__F
#endif
xdc_Void xdc_runtime_LoggerBuf_write4__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
    __FN__((void*)_this, evt, a1, a2, a3, a4);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.write8
#else
#define __FN__ xdc_runtime_LoggerBuf_write8__F
#endif
xdc_Void xdc_runtime_LoggerBuf_write8__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.flushAll
#else
#define __FN__ xdc_runtime_LoggerBuf_flushAll__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flushAll__E( void ) {
    __FN__();
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.flushAllInternal
#else
#define __FN__ xdc_runtime_LoggerBuf_flushAllInternal__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flushAllInternal__E( xdc_Int stat ) {
    __FN__(stat);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.enable
#else
#define __FN__ xdc_runtime_LoggerBuf_enable__F
#endif
xdc_Bool xdc_runtime_LoggerBuf_enable__E( xdc_runtime_LoggerBuf_Handle _this ) {
    return __FN__((void*)_this);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.disable
#else
#define __FN__ xdc_runtime_LoggerBuf_disable__F
#endif
xdc_Bool xdc_runtime_LoggerBuf_disable__E( xdc_runtime_LoggerBuf_Handle _this ) {
    return __FN__((void*)_this);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.reset
#else
#define __FN__ xdc_runtime_LoggerBuf_reset__F
#endif
xdc_Void xdc_runtime_LoggerBuf_reset__E( xdc_runtime_LoggerBuf_Handle _this ) {
    __FN__((void*)_this);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.flush
#else
#define __FN__ xdc_runtime_LoggerBuf_flush__F
#endif
xdc_Void xdc_runtime_LoggerBuf_flush__E( xdc_runtime_LoggerBuf_Handle _this ) {
    __FN__((void*)_this);
}
#undef __FN__
#ifdef xdc_runtime_LoggerBuf___ROMPATCH
#define __FN__ xdc_runtime_LoggerBuf_Module__MTAB__C.getNextEntry
#else
#define __FN__ xdc_runtime_LoggerBuf_getNextEntry__F
#endif
xdc_Int xdc_runtime_LoggerBuf_getNextEntry__E( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Log_EventRec* evtRec ) {
    return __FN__((void*)_this, evtRec);
}
#if xdc_runtime_LoggerBuf___scope != -1
xdc_Int xdc_runtime_LoggerBuf_Module_startup__E( xdc_Int state ) { return xdc_runtime_LoggerBuf_Module_startup__F(state); }
#endif
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_write4__F
xdc_Void xdc_runtime_LoggerBuf_write4__R( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write6(xdc_runtime_LoggerBuf_write4__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_write4__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_write8__F
xdc_Void xdc_runtime_LoggerBuf_write8__R( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write8(xdc_runtime_LoggerBuf_write8__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4, (xdc_IArg)a5, (xdc_IArg)a6);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_write8__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_flushAll__F
xdc_Void xdc_runtime_LoggerBuf_flushAll__R( void ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_LoggerBuf_flushAll__ENTRY_EVT);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAll__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_flushAllInternal__F
xdc_Void xdc_runtime_LoggerBuf_flushAllInternal__R( xdc_Int stat ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAllInternal__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flushAllInternal__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_enable__F
xdc_Bool xdc_runtime_LoggerBuf_enable__R( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_enable__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_enable__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_disable__F
xdc_Bool xdc_runtime_LoggerBuf_disable__R( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_disable__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_disable__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_reset__F
xdc_Void xdc_runtime_LoggerBuf_reset__R( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_reset__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_reset__EXIT_EVT, 0);
#else
    __FN__((void*)_this);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_flush__F
xdc_Void xdc_runtime_LoggerBuf_flush__R( xdc_runtime_LoggerBuf_Handle _this ) {
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flush__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_flush__EXIT_EVT, 0);
#else
    __FN__((void*)_this);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerBuf_getNextEntry__F
xdc_Int xdc_runtime_LoggerBuf_getNextEntry__R( xdc_runtime_LoggerBuf_Handle _this, xdc_runtime_Log_EventRec* evtRec ) {
#if xdc_runtime_LoggerBuf___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_LoggerBuf___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_LoggerBuf_getNextEntry__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evtRec);
#endif
#if xdc_runtime_LoggerBuf___L_EXIT
    __ret = __FN__((void*)_this, evtRec);
    xdc_runtime_Log_write1(xdc_runtime_LoggerBuf_getNextEntry__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, evtRec);
#endif
}

#if defined(xdc_runtime_LoggerBuf___EXPORT) && defined(__ti__)
#if xdc_runtime_LoggerBuf___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Params__init__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_write4__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_write8__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flushAll__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flushAllInternal__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_enable__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_disable__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_reset__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_flush__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerBuf_getNextEntry__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_LoggerBuf___scope != -1
#ifdef xdc_runtime_LoggerBuf___FXNTAB
#ifndef __isrom__
#if xdc_runtime_LoggerBuf___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_LoggerBuf___scope == -1 || !defined(__xdc_runtime_ILogger_Interface__BASE__CR)
#ifndef __xdc_runtime_ILogger_Interface__BASE__C
#define __xdc_runtime_ILogger_Interface__BASE__C
__FAR__ xdc_runtime_ILogger_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ILogger_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_LoggerBuf_Module__FXNS__C, ".const:xdc_runtime_LoggerBuf_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_LoggerBuf_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_LoggerBuf_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_LoggerBuf_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_LoggerBuf_Fxns__ xdc_runtime_LoggerBuf_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ILogger_Interface__BASE__C,
    &xdc_runtime_LoggerBuf_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_LoggerBuf_write4__E,
    xdc_runtime_LoggerBuf_write8__E,
    {

#ifdef xdc_runtime_LoggerBuf___OBJHEAP
        xdc_runtime_LoggerBuf_Object__create__S,
#else
        /* create__ */ 0,
#endif
#ifdef xdc_runtime_LoggerBuf___DELETE
        xdc_runtime_LoggerBuf_Object__delete__S,
#else
        /* delete__ */ 0,
#endif
        xdc_runtime_LoggerBuf_Handle__label__S,
        xdc_runtime_LoggerBuf_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_LoggerBuf_Module__startupDone__S(void) {

    return xdc_runtime_LoggerBuf_Module__startupDone__F();
}
xdc_runtime_Types_Label* xdc_runtime_LoggerBuf_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {
    lab->handle = obj;
    lab->modId = xdc_runtime_LoggerBuf_Module__id__D;
#ifdef xdc_runtime_LoggerBuf___NAMEDINST
    xdc_runtime_Core_assignLabel(lab, ((xdc_runtime_LoggerBuf_Object__*)obj)->__name, 1);
#else
    xdc_runtime_Core_assignLabel(lab, 0, 0);
#endif
    return lab;
}
xdc_Void xdc_runtime_LoggerBuf_Params__init__S( xdc_Ptr prms, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {
#ifdef xdc_runtime_LoggerBuf___OBJHEAP
    xdc_runtime_Core_assignParams__I(prms, (xdc_Ptr)(src ? src : &xdc_runtime_LoggerBuf_Object__PARAMS__C), psz, isz);
#endif
}
xdc_Ptr xdc_runtime_LoggerBuf_Object__get__S( xdc_Ptr oa, xdc_Int i ) {
    if (oa) return ((xdc_runtime_LoggerBuf_Object*)oa) + i;
    if (xdc_runtime_LoggerBuf_Object__count__C == 0) return 0;
    return ((xdc_runtime_LoggerBuf_Object*)xdc_runtime_LoggerBuf_Object__table__C) + i;
}

#ifdef xdc_runtime_LoggerBuf___OBJHEAP
extern xdc_Ptr xdc_runtime_LoggerBuf_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerBuf___ParamsPtr __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_LoggerBuf_Params prms;
    xdc_runtime_LoggerBuf_Object* obj;
#ifdef xdc_runtime_LoggerBuf___DELETE
    int iStat;
#endif
    obj = xdc_runtime_Core_createObject__I(&xdc_runtime_LoggerBuf_Object__DESC__C, __oa, __osz, &prms, (xdc_Ptr)__pa, __psz, __eb);
    if (!obj) return 0;
#ifdef xdc_runtime_LoggerBuf___DELETE
#define xdc_runtime_LoggerBuf___ISTAT iStat = 
#else
#define xdc_runtime_LoggerBuf___ISTAT
#endif
    xdc_runtime_LoggerBuf___ISTAT xdc_runtime_LoggerBuf_Instance_init__F(obj, &prms, __eb);
    if (xdc_runtime_Error_check(__eb)) {
#ifdef xdc_runtime_LoggerBuf___DELETE
        xdc_runtime_Core_deleteObject__I(&xdc_runtime_LoggerBuf_Object__DESC__C, obj, (xdc_Fxn)xdc_runtime_LoggerBuf_Instance_finalize__F, iStat, (xdc_Bool)(__oa != 0));
#endif
        return 0;
    }
#if xdc_runtime_LoggerBuf___L_LIFECYCLE
#ifdef xdc_runtime_LoggerBuf___NAMEDINST
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, (xdc_IArg)(((xdc_runtime_LoggerBuf_Object__*)obj)->__name));
#else
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, 0);
#endif
#endif
    return obj;
}
#else
extern xdc_Ptr xdc_runtime_LoggerBuf_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerBuf___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerBuf_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"create policy error", 0);
    return 0;
}
#endif

#ifdef xdc_runtime_LoggerBuf___DELETE
extern xdc_Void xdc_runtime_LoggerBuf_Object__destruct__S( xdc_Ptr obj ) {
#if xdc_runtime_LoggerBuf___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_destruct, (xdc_IArg)obj);
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_LoggerBuf_Object__DESC__C, obj, (xdc_Fxn)xdc_runtime_LoggerBuf_Instance_finalize__F, 0, TRUE);
}
extern xdc_Void xdc_runtime_LoggerBuf_Object__delete__S( xdc_Ptr instp ) {
#if xdc_runtime_LoggerBuf___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_delete, (xdc_IArg)(*((xdc_runtime_LoggerBuf_Object**)instp)));
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_LoggerBuf_Object__DESC__C, *((xdc_runtime_LoggerBuf_Object**)instp), (xdc_Fxn)xdc_runtime_LoggerBuf_Instance_finalize__F, 0, FALSE);
    *((xdc_runtime_LoggerBuf_Handle*)instp) = 0;
}
#else
extern xdc_Void xdc_runtime_LoggerBuf_Object__destruct__S( xdc_Ptr obj ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerBuf_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
extern xdc_Void xdc_runtime_LoggerBuf_Object__delete__S( xdc_Ptr instp ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerBuf_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
#endif

extern xdc_Ptr xdc_runtime_LoggerBuf_Object__first__S(void) {
#ifdef xdc_runtime_LoggerBuf___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = (xdc_runtime_Types_InstHdr *)xdc_runtime_LoggerBuf_Module__root__V.hdr.link.next;
    if (iHdr != (xdc_runtime_Types_InstHdr *)&xdc_runtime_LoggerBuf_Module__root__V) {
        return (iHdr + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

extern xdc_Ptr xdc_runtime_LoggerBuf_Object__next__S(xdc_Ptr obj) {
#ifdef xdc_runtime_LoggerBuf___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = ((xdc_runtime_Types_InstHdr *)obj) - 1;
    if (iHdr->link.next != (xdc_runtime_Types_Link *)&xdc_runtime_LoggerBuf_Module__root__V) {
        return ((xdc_runtime_Types_InstHdr *)(iHdr->link.next) + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

#endif /* xdc_runtime_LoggerBuf___scope */

#if (defined(__isrom__) && defined(xdc_runtime_LoggerBuf___OBJHEAP_ISNULL)) || (!defined(__isrom__) && (xdc_runtime_LoggerBuf___scope != -1 || !defined(xdc_runtime_LoggerBuf___OBJHEAP_ISNULL)))
typedef struct { xdc_runtime_LoggerBuf_Object2__ s0; char c; } xdc_runtime_LoggerBuf___S1;
__FAR__ xdc_runtime_LoggerBuf_Object__DESC__C__qual xdc_runtime_Core_ObjDesc xdc_runtime_LoggerBuf_Object__DESC__C = {
#ifdef xdc_runtime_LoggerBuf___FXNTAB
    (Ptr)&xdc_runtime_LoggerBuf_Module__FXNS__C, /* fxnTab */
#else
    (Ptr)0, /* fxnTab */
#endif
    &xdc_runtime_LoggerBuf_Module__root__V.hdr.link, /* modLink */
    sizeof(xdc_runtime_LoggerBuf___S1) - sizeof(xdc_runtime_LoggerBuf_Object2__), /* objAlign */
#ifdef xdc_runtime_LoggerBuf___OBJHEAP
    xdc_runtime_LoggerBuf___OBJHEAP, /* objHeap */
#else
    0, /* objHeap */
#endif
#ifdef xdc_runtime_LoggerBuf___NAMEDINST
    offsetof(xdc_runtime_LoggerBuf_Object__, __name), /* objName */
#else
    0, /* objName */
#endif
    sizeof(xdc_runtime_LoggerBuf_Object2__), /* objSize */
    (Ptr)&xdc_runtime_LoggerBuf_Object__PARAMS__C, /* prmsInit */
    sizeof(xdc_runtime_LoggerBuf_Params), /* prmsSize */
};
#endif
#endif /* xdc_runtime_LoggerBuf___used */

#ifdef xdc_runtime_LoggerSys___used
/*
 *  ======== module LoggerSys ========
 *  Do not modify this file; it is generated from the specification LoggerSys.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_LoggerSys__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/LoggerSys.h>
#undef __nested__
#else
#include <xdc/runtime/LoggerSys.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerSys___LOGOBJ) && xdc_runtime_LoggerSys___DGSINCL & 0x1
#define xdc_runtime_LoggerSys___L_ENTRY 1
#else
#define xdc_runtime_LoggerSys___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerSys___LOGOBJ) && xdc_runtime_LoggerSys___DGSINCL & 0x2
#define xdc_runtime_LoggerSys___L_EXIT 1
#else
#define xdc_runtime_LoggerSys___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_LoggerSys___LOGOBJ) && xdc_runtime_LoggerSys___DGSINCL & 0x4
#define xdc_runtime_LoggerSys___L_LIFECYCLE 1
#else
#define xdc_runtime_LoggerSys___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_LoggerSys_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_LoggerSys_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_LoggerSys_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_LoggerSys_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_LoggerSys_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_LoggerSys_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_LoggerSys_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_LoggerSys_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_LoggerSys_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_LoggerSys_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_LoggerSys_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_LoggerSys_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_LoggerSys_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_LoggerSys_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_LoggerSys_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_LoggerSys_Module_GateProxy_query
#if xdc_runtime_LoggerSys___scope != -1 || defined(xdc_runtime_LoggerSys_write4__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerSys_write4__PATCH
#define __FN__ xdc_runtime_LoggerSys_write4__PATCH
#else
#define __FN__ xdc_runtime_LoggerSys_write4__F
#endif
xdc_Void xdc_runtime_LoggerSys_write4__E( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
#if xdc_runtime_LoggerSys___L_ENTRY
    xdc_runtime_Log_write6(xdc_runtime_LoggerSys_write4__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4);
#endif
#if xdc_runtime_LoggerSys___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4);
    xdc_runtime_Log_write1(xdc_runtime_LoggerSys_write4__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4);
#endif
}
#endif
#if xdc_runtime_LoggerSys___scope != -1 || defined(xdc_runtime_LoggerSys_write8__PATCH)
#undef __FN__
#ifdef xdc_runtime_LoggerSys_write8__PATCH
#define __FN__ xdc_runtime_LoggerSys_write8__PATCH
#else
#define __FN__ xdc_runtime_LoggerSys_write8__F
#endif
xdc_Void xdc_runtime_LoggerSys_write8__E( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
#if xdc_runtime_LoggerSys___L_ENTRY
    xdc_runtime_Log_write8(xdc_runtime_LoggerSys_write8__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4, (xdc_IArg)a5, (xdc_IArg)a6);
#endif
#if xdc_runtime_LoggerSys___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
    xdc_runtime_Log_write1(xdc_runtime_LoggerSys_write8__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
}
#endif

#if defined(xdc_runtime_LoggerSys___EXPORT) && defined(__ti__)
#if xdc_runtime_LoggerSys___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_write4__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_write8__E);
#endif

#if defined(xdc_runtime_LoggerSys___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_LoggerSys_Module__diagsEnabled xdc_runtime_LoggerSys_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__diagsIncluded xdc_runtime_LoggerSys_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__diagsMask xdc_runtime_LoggerSys_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__gateObj xdc_runtime_LoggerSys_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__gatePrms xdc_runtime_LoggerSys_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__id xdc_runtime_LoggerSys_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__loggerDefined xdc_runtime_LoggerSys_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__loggerObj xdc_runtime_LoggerSys_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__loggerFxn4 xdc_runtime_LoggerSys_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__loggerFxn8 xdc_runtime_LoggerSys_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Module__startupDoneFxn xdc_runtime_LoggerSys_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Object__count xdc_runtime_LoggerSys_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Object__heap xdc_runtime_LoggerSys_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Object__sizeof xdc_runtime_LoggerSys_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_LoggerSys_Object__table xdc_runtime_LoggerSys_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_LoggerSys_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerSys_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerSys_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerSys_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerSys_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerSys_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerSys_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerSys_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerSys_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_LoggerSys_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_LoggerSys_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerSys_write4__E( xdc_runtime_LoggerSys_Handle, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_LoggerSys_write8__E( xdc_runtime_LoggerSys_Handle, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_LoggerSys___ROMPATCH
__FAR__ xdc_runtime_LoggerSys_Module__MTAB__C__qual xdc_runtime_LoggerSys_MTab__ xdc_runtime_LoggerSys_Module__MTAB__C = {
#if xdc_runtime_LoggerSys___scope == -1
    xdc_runtime_LoggerSys_write4__E,
    xdc_runtime_LoggerSys_write8__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_LoggerSys_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_LoggerSys_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_LoggerSys_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_LoggerSys_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_LoggerSys_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_LoggerSys_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_LoggerSys_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_LoggerSys_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_LoggerSys_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_LoggerSys_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_LoggerSys_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_LoggerSys_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_LoggerSys_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_LoggerSys_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_LoggerSys_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_LoggerSys_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_LoggerSys___ROMPATCH
#define __FN__ xdc_runtime_LoggerSys_Module__MTAB__C.write4
#else
#define __FN__ xdc_runtime_LoggerSys_write4__F
#endif
xdc_Void xdc_runtime_LoggerSys_write4__E( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
    __FN__((void*)_this, evt, a1, a2, a3, a4);
}
#undef __FN__
#ifdef xdc_runtime_LoggerSys___ROMPATCH
#define __FN__ xdc_runtime_LoggerSys_Module__MTAB__C.write8
#else
#define __FN__ xdc_runtime_LoggerSys_write8__F
#endif
xdc_Void xdc_runtime_LoggerSys_write8__E( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerSys_write4__F
xdc_Void xdc_runtime_LoggerSys_write4__R( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4 ) {
#if xdc_runtime_LoggerSys___L_ENTRY
    xdc_runtime_Log_write6(xdc_runtime_LoggerSys_write4__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4);
#endif
#if xdc_runtime_LoggerSys___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4);
    xdc_runtime_Log_write1(xdc_runtime_LoggerSys_write4__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_LoggerSys_write8__F
xdc_Void xdc_runtime_LoggerSys_write8__R( xdc_runtime_LoggerSys_Handle _this, xdc_runtime_Types_Event evt, xdc_IArg a1, xdc_IArg a2, xdc_IArg a3, xdc_IArg a4, xdc_IArg a5, xdc_IArg a6, xdc_IArg a7, xdc_IArg a8 ) {
#if xdc_runtime_LoggerSys___L_ENTRY
    xdc_runtime_Log_write8(xdc_runtime_LoggerSys_write8__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)evt, (xdc_IArg)a1, (xdc_IArg)a2, (xdc_IArg)a3, (xdc_IArg)a4, (xdc_IArg)a5, (xdc_IArg)a6);
#endif
#if xdc_runtime_LoggerSys___L_EXIT
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
    xdc_runtime_Log_write1(xdc_runtime_LoggerSys_write8__EXIT_EVT, 0);
#else
    __FN__((void*)_this, evt, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
}

#if defined(xdc_runtime_LoggerSys___EXPORT) && defined(__ti__)
#if xdc_runtime_LoggerSys___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_write4__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_LoggerSys_write8__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_LoggerSys___scope != -1
#ifdef xdc_runtime_LoggerSys___FXNTAB
#ifndef __isrom__
#if xdc_runtime_LoggerSys___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_LoggerSys___scope == -1 || !defined(__xdc_runtime_ILogger_Interface__BASE__CR)
#ifndef __xdc_runtime_ILogger_Interface__BASE__C
#define __xdc_runtime_ILogger_Interface__BASE__C
__FAR__ xdc_runtime_ILogger_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ILogger_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_LoggerSys_Module__FXNS__C, ".const:xdc_runtime_LoggerSys_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_LoggerSys_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_LoggerSys_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_LoggerSys_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_LoggerSys_Fxns__ xdc_runtime_LoggerSys_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ILogger_Interface__BASE__C,
    &xdc_runtime_LoggerSys_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_LoggerSys_write4__E,
    xdc_runtime_LoggerSys_write8__E,
    {

#ifdef xdc_runtime_LoggerSys___OBJHEAP
        xdc_runtime_LoggerSys_Object__create__S,
#else
        /* create__ */ 0,
#endif
#ifdef xdc_runtime_LoggerSys___DELETE
        xdc_runtime_LoggerSys_Object__delete__S,
#else
        /* delete__ */ 0,
#endif
        xdc_runtime_LoggerSys_Handle__label__S,
        xdc_runtime_LoggerSys_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_LoggerSys_Module__startupDone__S(void) {

    return 1;
}
xdc_runtime_Types_Label* xdc_runtime_LoggerSys_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {
    lab->handle = obj;
    lab->modId = xdc_runtime_LoggerSys_Module__id__D;
#ifdef xdc_runtime_LoggerSys___NAMEDINST
    xdc_runtime_Core_assignLabel(lab, ((xdc_runtime_LoggerSys_Object__*)obj)->__name, 1);
#else
    xdc_runtime_Core_assignLabel(lab, 0, 0);
#endif
    return lab;
}
xdc_Void xdc_runtime_LoggerSys_Params__init__S( xdc_Ptr prms, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {
#ifdef xdc_runtime_LoggerSys___OBJHEAP
    xdc_runtime_Core_assignParams__I(prms, (xdc_Ptr)(src ? src : &xdc_runtime_LoggerSys_Object__PARAMS__C), psz, isz);
#endif
}
xdc_Ptr xdc_runtime_LoggerSys_Object__get__S( xdc_Ptr oa, xdc_Int i ) {
    if (oa) return ((xdc_runtime_LoggerSys_Object*)oa) + i;
    if (xdc_runtime_LoggerSys_Object__count__C == 0) return 0;
    return ((xdc_runtime_LoggerSys_Object*)xdc_runtime_LoggerSys_Object__table__C) + i;
}

#ifdef xdc_runtime_LoggerSys___OBJHEAP
extern xdc_Ptr xdc_runtime_LoggerSys_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerSys___ParamsPtr __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_LoggerSys_Params prms;
    xdc_runtime_LoggerSys_Object* obj;
    obj = xdc_runtime_Core_createObject__I(&xdc_runtime_LoggerSys_Object__DESC__C, __oa, __osz, &prms, (xdc_Ptr)__pa, __psz, __eb);
    if (!obj) return 0;
#ifdef xdc_runtime_LoggerSys___DELETE
#define xdc_runtime_LoggerSys___ISTAT 
#else
#define xdc_runtime_LoggerSys___ISTAT
#endif
#if xdc_runtime_LoggerSys___L_LIFECYCLE
#ifdef xdc_runtime_LoggerSys___NAMEDINST
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, (xdc_IArg)(((xdc_runtime_LoggerSys_Object__*)obj)->__name));
#else
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, 0);
#endif
#endif
    return obj;
}
#else
extern xdc_Ptr xdc_runtime_LoggerSys_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerSys___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerSys_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"create policy error", 0);
    return 0;
}
#endif

#ifdef xdc_runtime_LoggerSys___DELETE
extern xdc_Void xdc_runtime_LoggerSys_Object__destruct__S( xdc_Ptr obj ) {
#if xdc_runtime_LoggerSys___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_destruct, (xdc_IArg)obj);
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_LoggerSys_Object__DESC__C, obj, 0, -1, TRUE);
}
extern xdc_Void xdc_runtime_LoggerSys_Object__delete__S( xdc_Ptr instp ) {
#if xdc_runtime_LoggerSys___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_delete, (xdc_IArg)(*((xdc_runtime_LoggerSys_Object**)instp)));
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_LoggerSys_Object__DESC__C, *((xdc_runtime_LoggerSys_Object**)instp), 0, -1, FALSE);
    *((xdc_runtime_LoggerSys_Handle*)instp) = 0;
}
#else
extern xdc_Void xdc_runtime_LoggerSys_Object__destruct__S( xdc_Ptr obj ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerSys_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
extern xdc_Void xdc_runtime_LoggerSys_Object__delete__S( xdc_Ptr instp ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_LoggerSys_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
#endif

extern xdc_Ptr xdc_runtime_LoggerSys_Object__first__S(void) {
#ifdef xdc_runtime_LoggerSys___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = (xdc_runtime_Types_InstHdr *)xdc_runtime_LoggerSys_Module__root__V.hdr.link.next;
    if (iHdr != (xdc_runtime_Types_InstHdr *)&xdc_runtime_LoggerSys_Module__root__V) {
        return (iHdr + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

extern xdc_Ptr xdc_runtime_LoggerSys_Object__next__S(xdc_Ptr obj) {
#ifdef xdc_runtime_LoggerSys___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = ((xdc_runtime_Types_InstHdr *)obj) - 1;
    if (iHdr->link.next != (xdc_runtime_Types_Link *)&xdc_runtime_LoggerSys_Module__root__V) {
        return ((xdc_runtime_Types_InstHdr *)(iHdr->link.next) + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

#endif /* xdc_runtime_LoggerSys___scope */

#if (defined(__isrom__) && defined(xdc_runtime_LoggerSys___OBJHEAP_ISNULL)) || (!defined(__isrom__) && (xdc_runtime_LoggerSys___scope != -1 || !defined(xdc_runtime_LoggerSys___OBJHEAP_ISNULL)))
typedef struct { xdc_runtime_LoggerSys_Object2__ s0; char c; } xdc_runtime_LoggerSys___S1;
__FAR__ xdc_runtime_LoggerSys_Object__DESC__C__qual xdc_runtime_Core_ObjDesc xdc_runtime_LoggerSys_Object__DESC__C = {
#ifdef xdc_runtime_LoggerSys___FXNTAB
    (Ptr)&xdc_runtime_LoggerSys_Module__FXNS__C, /* fxnTab */
#else
    (Ptr)0, /* fxnTab */
#endif
    &xdc_runtime_LoggerSys_Module__root__V.hdr.link, /* modLink */
    sizeof(xdc_runtime_LoggerSys___S1) - sizeof(xdc_runtime_LoggerSys_Object2__), /* objAlign */
#ifdef xdc_runtime_LoggerSys___OBJHEAP
    xdc_runtime_LoggerSys___OBJHEAP, /* objHeap */
#else
    0, /* objHeap */
#endif
#ifdef xdc_runtime_LoggerSys___NAMEDINST
    offsetof(xdc_runtime_LoggerSys_Object__, __name), /* objName */
#else
    0, /* objName */
#endif
    sizeof(xdc_runtime_LoggerSys_Object2__), /* objSize */
    (Ptr)&xdc_runtime_LoggerSys_Object__PARAMS__C, /* prmsInit */
    sizeof(xdc_runtime_LoggerSys_Params), /* prmsSize */
};
#endif
#endif /* xdc_runtime_LoggerSys___used */

#ifdef xdc_runtime_Main___used
/*
 *  ======== module Main ========
 *  Do not modify this file; it is generated from the specification Main.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Main__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Main.h>
#undef __nested__
#else
#include <xdc/runtime/Main.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Main___LOGOBJ) && xdc_runtime_Main___DGSINCL & 0x1
#define xdc_runtime_Main___L_ENTRY 1
#else
#define xdc_runtime_Main___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Main___LOGOBJ) && xdc_runtime_Main___DGSINCL & 0x2
#define xdc_runtime_Main___L_EXIT 1
#else
#define xdc_runtime_Main___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Main___LOGOBJ) && xdc_runtime_Main___DGSINCL & 0x4
#define xdc_runtime_Main___L_LIFECYCLE 1
#else
#define xdc_runtime_Main___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Main_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Main_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Main_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Main_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Main_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Main_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Main_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Main_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Main_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Main_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Main_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Main_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Main_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Main_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Main_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Main_Module_GateProxy_query

#if defined(xdc_runtime_Main___EXPORT) && defined(__ti__)
#if xdc_runtime_Main___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Main_Module__startupDone__S);
#endif
#endif

#if defined(xdc_runtime_Main___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Main_Module__diagsEnabled xdc_runtime_Main_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__diagsIncluded xdc_runtime_Main_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__diagsMask xdc_runtime_Main_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__gateObj xdc_runtime_Main_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__gatePrms xdc_runtime_Main_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__id xdc_runtime_Main_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__loggerDefined xdc_runtime_Main_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__loggerObj xdc_runtime_Main_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__loggerFxn4 xdc_runtime_Main_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__loggerFxn8 xdc_runtime_Main_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Module__startupDoneFxn xdc_runtime_Main_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Object__count xdc_runtime_Main_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Object__heap xdc_runtime_Main_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Object__sizeof xdc_runtime_Main_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Main_Object__table xdc_runtime_Main_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Main_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Main_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Main_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Main_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Main_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Main_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Main_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Main_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Main_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Main_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Main_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Main___ROMPATCH
__FAR__ xdc_runtime_Main_Module__MTAB__C__qual xdc_runtime_Main_MTab__ xdc_runtime_Main_Module__MTAB__C = {
#if xdc_runtime_Main___scope == -1
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Main_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Main_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Main_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Main_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Main_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Main_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Main_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Main_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Main_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Main_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Main_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Main_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Main_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Main_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Main_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Main_Module_GateProxy_query

#if defined(xdc_runtime_Main___EXPORT) && defined(__ti__)
#if xdc_runtime_Main___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Main_Module__startupDone__S);
#endif
#endif
#endif /* __isrom__ */

#if xdc_runtime_Main___scope != -1
xdc_Bool xdc_runtime_Main_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Main___scope */

#endif /* xdc_runtime_Main___used */

#ifdef xdc_runtime_Memory___used
/*
 *  ======== module Memory ========
 *  Do not modify this file; it is generated from the specification Memory.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Memory__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Memory.h>
#undef __nested__
#else
#include <xdc/runtime/Memory.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Memory___LOGOBJ) && xdc_runtime_Memory___DGSINCL & 0x1
#define xdc_runtime_Memory___L_ENTRY 1
#else
#define xdc_runtime_Memory___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Memory___LOGOBJ) && xdc_runtime_Memory___DGSINCL & 0x2
#define xdc_runtime_Memory___L_EXIT 1
#else
#define xdc_runtime_Memory___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Memory___LOGOBJ) && xdc_runtime_Memory___DGSINCL & 0x4
#define xdc_runtime_Memory___L_LIFECYCLE 1
#else
#define xdc_runtime_Memory___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Memory_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Memory_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Memory_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Memory_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Memory_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Memory_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Memory_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Memory_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Memory_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Memory_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Memory_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Memory_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Memory_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Memory_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Memory_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Memory_Module_GateProxy_query
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_alloc__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_alloc__PATCH
#define __FN__ xdc_runtime_Memory_alloc__PATCH
#else
#define __FN__ xdc_runtime_Memory_alloc__F
#endif
xdc_Ptr xdc_runtime_Memory_alloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Memory_alloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, eb);
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_calloc__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_calloc__PATCH
#define __FN__ xdc_runtime_Memory_calloc__PATCH
#else
#define __FN__ xdc_runtime_Memory_calloc__F
#endif
xdc_Ptr xdc_runtime_Memory_calloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Memory_calloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_calloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, eb);
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_free__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_free__PATCH
#define __FN__ xdc_runtime_Memory_free__PATCH
#else
#define __FN__ xdc_runtime_Memory_free__F
#endif
xdc_Void xdc_runtime_Memory_free__E( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Memory_free__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_Memory___L_EXIT
    __FN__(heap, block, size);
    xdc_runtime_Log_write1(xdc_runtime_Memory_free__EXIT_EVT, 0);
#else
    __FN__(heap, block, size);
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_getStats__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_getStats__PATCH
#define __FN__ xdc_runtime_Memory_getStats__PATCH
#else
#define __FN__ xdc_runtime_Memory_getStats__F
#endif
xdc_Void xdc_runtime_Memory_getStats__E( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_Memory_getStats__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)stats);
#endif
#if xdc_runtime_Memory___L_EXIT
    __FN__(heap, stats);
    xdc_runtime_Log_write1(xdc_runtime_Memory_getStats__EXIT_EVT, 0);
#else
    __FN__(heap, stats);
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_query__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_query__PATCH
#define __FN__ xdc_runtime_Memory_query__PATCH
#else
#define __FN__ xdc_runtime_Memory_query__F
#endif
xdc_Bool xdc_runtime_Memory_query__E( xdc_runtime_IHeap_Handle heap, xdc_Int qual ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_Memory_query__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)qual);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, qual);
    xdc_runtime_Log_write1(xdc_runtime_Memory_query__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, qual);
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_getMaxDefaultTypeAlign__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_getMaxDefaultTypeAlign__PATCH
#define __FN__ xdc_runtime_Memory_getMaxDefaultTypeAlign__PATCH
#else
#define __FN__ xdc_runtime_Memory_getMaxDefaultTypeAlign__F
#endif
xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__E( void ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_SizeT __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Memory_getMaxDefaultTypeAlign__ENTRY_EVT);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Memory_getMaxDefaultTypeAlign__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_Memory___scope != -1 || defined(xdc_runtime_Memory_valloc__PATCH)
#undef __FN__
#ifdef xdc_runtime_Memory_valloc__PATCH
#define __FN__ xdc_runtime_Memory_valloc__PATCH
#else
#define __FN__ xdc_runtime_Memory_valloc__F
#endif
xdc_Ptr xdc_runtime_Memory_valloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write5(xdc_runtime_Memory_valloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)value, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, value, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_valloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, value, eb);
#endif
}
#endif

#if defined(xdc_runtime_Memory___EXPORT) && defined(__ti__)
#if xdc_runtime_Memory___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_alloc__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_calloc__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_free__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_getStats__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_query__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_getMaxDefaultTypeAlign__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_valloc__E);
#endif

#if defined(xdc_runtime_Memory___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Memory_Module__diagsEnabled xdc_runtime_Memory_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__diagsIncluded xdc_runtime_Memory_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__diagsMask xdc_runtime_Memory_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__gateObj xdc_runtime_Memory_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__gatePrms xdc_runtime_Memory_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__id xdc_runtime_Memory_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__loggerDefined xdc_runtime_Memory_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__loggerObj xdc_runtime_Memory_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__loggerFxn4 xdc_runtime_Memory_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__loggerFxn8 xdc_runtime_Memory_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Module__startupDoneFxn xdc_runtime_Memory_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Object__count xdc_runtime_Memory_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Object__heap xdc_runtime_Memory_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Object__sizeof xdc_runtime_Memory_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_Object__table xdc_runtime_Memory_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Memory_defaultHeapInstance xdc_runtime_Memory_defaultHeapInstance__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Memory_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Memory_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Memory_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Memory_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Memory_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Memory_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_alloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_calloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Memory_free__E( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Memory_getStats__E( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats* stats ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Memory_query__E( xdc_runtime_IHeap_Handle heap, xdc_Int qual ) __attribute__ ((externally_visible));
xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__E( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Memory_valloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Memory___ROMPATCH
__FAR__ xdc_runtime_Memory_Module__MTAB__C__qual xdc_runtime_Memory_MTab__ xdc_runtime_Memory_Module__MTAB__C = {
#if xdc_runtime_Memory___scope == -1
    xdc_runtime_Memory_alloc__E,
    xdc_runtime_Memory_calloc__E,
    xdc_runtime_Memory_free__E,
    xdc_runtime_Memory_getStats__E,
    xdc_runtime_Memory_query__E,
    xdc_runtime_Memory_getMaxDefaultTypeAlign__E,
    xdc_runtime_Memory_valloc__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Memory_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Memory_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Memory_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Memory_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Memory_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Memory_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Memory_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Memory_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Memory_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Memory_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Memory_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Memory_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Memory_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Memory_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Memory_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Memory_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.alloc
#else
#define __FN__ xdc_runtime_Memory_alloc__F
#endif
xdc_Ptr xdc_runtime_Memory_alloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
    return __FN__(heap, size, align, eb);
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.calloc
#else
#define __FN__ xdc_runtime_Memory_calloc__F
#endif
xdc_Ptr xdc_runtime_Memory_calloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
    return __FN__(heap, size, align, eb);
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.free
#else
#define __FN__ xdc_runtime_Memory_free__F
#endif
xdc_Void xdc_runtime_Memory_free__E( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size ) {
    __FN__(heap, block, size);
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.getStats
#else
#define __FN__ xdc_runtime_Memory_getStats__F
#endif
xdc_Void xdc_runtime_Memory_getStats__E( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats* stats ) {
    __FN__(heap, stats);
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.query
#else
#define __FN__ xdc_runtime_Memory_query__F
#endif
xdc_Bool xdc_runtime_Memory_query__E( xdc_runtime_IHeap_Handle heap, xdc_Int qual ) {
    return __FN__(heap, qual);
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.getMaxDefaultTypeAlign
#else
#define __FN__ xdc_runtime_Memory_getMaxDefaultTypeAlign__F
#endif
xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__E( void ) {
    return __FN__();
}
#undef __FN__
#ifdef xdc_runtime_Memory___ROMPATCH
#define __FN__ xdc_runtime_Memory_Module__MTAB__C.valloc
#else
#define __FN__ xdc_runtime_Memory_valloc__F
#endif
xdc_Ptr xdc_runtime_Memory_valloc__E( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block* eb ) {
    return __FN__(heap, size, align, value, eb);
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_alloc__F
xdc_Ptr xdc_runtime_Memory_alloc__R( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Memory_alloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_calloc__F
xdc_Ptr xdc_runtime_Memory_calloc__R( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_Memory_calloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_calloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_free__F
xdc_Void xdc_runtime_Memory_free__R( xdc_runtime_IHeap_Handle heap, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Memory_free__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_Memory___L_EXIT
    __FN__(heap, block, size);
    xdc_runtime_Log_write1(xdc_runtime_Memory_free__EXIT_EVT, 0);
#else
    __FN__(heap, block, size);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_getStats__F
xdc_Void xdc_runtime_Memory_getStats__R( xdc_runtime_IHeap_Handle heap, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_Memory_getStats__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)stats);
#endif
#if xdc_runtime_Memory___L_EXIT
    __FN__(heap, stats);
    xdc_runtime_Log_write1(xdc_runtime_Memory_getStats__EXIT_EVT, 0);
#else
    __FN__(heap, stats);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_query__F
xdc_Bool xdc_runtime_Memory_query__R( xdc_runtime_IHeap_Handle heap, xdc_Int qual ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_Memory_query__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)qual);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, qual);
    xdc_runtime_Log_write1(xdc_runtime_Memory_query__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, qual);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_getMaxDefaultTypeAlign__F
xdc_SizeT xdc_runtime_Memory_getMaxDefaultTypeAlign__R( void ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_SizeT __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Memory_getMaxDefaultTypeAlign__ENTRY_EVT);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Memory_getMaxDefaultTypeAlign__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Memory_valloc__F
xdc_Ptr xdc_runtime_Memory_valloc__R( xdc_runtime_IHeap_Handle heap, xdc_SizeT size, xdc_SizeT align, xdc_Char value, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_Memory___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_Memory___L_ENTRY
    xdc_runtime_Log_write5(xdc_runtime_Memory_valloc__ENTRY_EVT, (xdc_IArg)heap, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)value, (xdc_IArg)eb);
#endif
#if xdc_runtime_Memory___L_EXIT
    __ret = __FN__(heap, size, align, value, eb);
    xdc_runtime_Log_write1(xdc_runtime_Memory_valloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(heap, size, align, value, eb);
#endif
}

#if defined(xdc_runtime_Memory___EXPORT) && defined(__ti__)
#if xdc_runtime_Memory___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_alloc__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_calloc__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_free__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_getStats__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_query__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_getMaxDefaultTypeAlign__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Memory_valloc__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Memory___scope != -1
xdc_Bool xdc_runtime_Memory_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Memory___scope */

#endif /* xdc_runtime_Memory___used */

#ifdef xdc_runtime_HeapMin___used
/*
 *  ======== module HeapMin ========
 *  Do not modify this file; it is generated from the specification HeapMin.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_HeapMin__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/HeapMin.h>
#undef __nested__
#else
#include <xdc/runtime/HeapMin.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapMin___LOGOBJ) && xdc_runtime_HeapMin___DGSINCL & 0x1
#define xdc_runtime_HeapMin___L_ENTRY 1
#else
#define xdc_runtime_HeapMin___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapMin___LOGOBJ) && xdc_runtime_HeapMin___DGSINCL & 0x2
#define xdc_runtime_HeapMin___L_EXIT 1
#else
#define xdc_runtime_HeapMin___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapMin___LOGOBJ) && xdc_runtime_HeapMin___DGSINCL & 0x4
#define xdc_runtime_HeapMin___L_LIFECYCLE 1
#else
#define xdc_runtime_HeapMin___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_HeapMin_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_HeapMin_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_HeapMin_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_HeapMin_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_HeapMin_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_HeapMin_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_HeapMin_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_HeapMin_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_HeapMin_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_HeapMin_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_HeapMin_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_HeapMin_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_HeapMin_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_HeapMin_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_HeapMin_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_HeapMin_Module_GateProxy_query
#if xdc_runtime_HeapMin___scope != -1 || defined(xdc_runtime_HeapMin_getStats__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapMin_getStats__PATCH
#define __FN__ xdc_runtime_HeapMin_getStats__PATCH
#else
#define __FN__ xdc_runtime_HeapMin_getStats__F
#endif
xdc_Void xdc_runtime_HeapMin_getStats__E( xdc_runtime_HeapMin_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_HeapMin_getStats__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)stats);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __FN__((void*)_this, stats);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_getStats__EXIT_EVT, 0);
#else
    __FN__((void*)_this, stats);
#endif
}
#endif
#if xdc_runtime_HeapMin___scope != -1 || defined(xdc_runtime_HeapMin_alloc__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapMin_alloc__PATCH
#define __FN__ xdc_runtime_HeapMin_alloc__PATCH
#else
#define __FN__ xdc_runtime_HeapMin_alloc__F
#endif
xdc_Ptr xdc_runtime_HeapMin_alloc__E( xdc_runtime_HeapMin_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_HeapMin___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_HeapMin_alloc__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __ret = __FN__((void*)_this, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, size, align, eb);
#endif
}
#endif
#if xdc_runtime_HeapMin___scope != -1 || defined(xdc_runtime_HeapMin_free__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapMin_free__PATCH
#define __FN__ xdc_runtime_HeapMin_free__PATCH
#else
#define __FN__ xdc_runtime_HeapMin_free__F
#endif
xdc_Void xdc_runtime_HeapMin_free__E( xdc_runtime_HeapMin_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_HeapMin_free__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __FN__((void*)_this, block, size);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_free__EXIT_EVT, 0);
#else
    __FN__((void*)_this, block, size);
#endif
}
#endif
#if xdc_runtime_HeapMin___scope != -1 || defined(xdc_runtime_HeapMin_isBlocking__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapMin_isBlocking__PATCH
#define __FN__ xdc_runtime_HeapMin_isBlocking__PATCH
#else
#define __FN__ xdc_runtime_HeapMin_isBlocking__F
#endif
xdc_Bool xdc_runtime_HeapMin_isBlocking__E( xdc_runtime_HeapMin_Handle _this ) {
#if xdc_runtime_HeapMin___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_isBlocking__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_isBlocking__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#endif

#if defined(xdc_runtime_HeapMin___EXPORT) && defined(__ti__)
#if xdc_runtime_HeapMin___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_alloc__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_free__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_isBlocking__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_getStats__E);
#endif

#if defined(xdc_runtime_HeapMin___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_HeapMin_Module__diagsEnabled xdc_runtime_HeapMin_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__diagsIncluded xdc_runtime_HeapMin_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__diagsMask xdc_runtime_HeapMin_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__gateObj xdc_runtime_HeapMin_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__gatePrms xdc_runtime_HeapMin_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__id xdc_runtime_HeapMin_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__loggerDefined xdc_runtime_HeapMin_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__loggerObj xdc_runtime_HeapMin_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__loggerFxn4 xdc_runtime_HeapMin_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__loggerFxn8 xdc_runtime_HeapMin_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Module__startupDoneFxn xdc_runtime_HeapMin_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Object__count xdc_runtime_HeapMin_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Object__heap xdc_runtime_HeapMin_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Object__sizeof xdc_runtime_HeapMin_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_Object__table xdc_runtime_HeapMin_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_A_zeroSize xdc_runtime_HeapMin_A_zeroSize__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_E_freeError xdc_runtime_HeapMin_E_freeError__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapMin_freeError xdc_runtime_HeapMin_freeError__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_HeapMin_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapMin_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapMin_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_alloc__E( xdc_runtime_HeapMin_Handle, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_free__E( xdc_runtime_HeapMin_Handle, xdc_Ptr block, xdc_SizeT size ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapMin_isBlocking__E( xdc_runtime_HeapMin_Handle ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_getStats__E( xdc_runtime_HeapMin_Handle, xdc_runtime_Memory_Stats* stats ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapMin_alloc__E( xdc_runtime_HeapMin_Handle, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapMin_free__E( xdc_runtime_HeapMin_Handle, xdc_Ptr block, xdc_SizeT size ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapMin_isBlocking__E( xdc_runtime_HeapMin_Handle ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_HeapMin___ROMPATCH
__FAR__ xdc_runtime_HeapMin_Module__MTAB__C__qual xdc_runtime_HeapMin_MTab__ xdc_runtime_HeapMin_Module__MTAB__C = {
#if xdc_runtime_HeapMin___scope == -1
    xdc_runtime_HeapMin_alloc__E,
    xdc_runtime_HeapMin_free__E,
    xdc_runtime_HeapMin_isBlocking__E,
    xdc_runtime_HeapMin_getStats__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_HeapMin_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_HeapMin_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_HeapMin_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_HeapMin_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_HeapMin_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_HeapMin_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_HeapMin_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_HeapMin_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_HeapMin_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_HeapMin_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_HeapMin_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_HeapMin_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_HeapMin_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_HeapMin_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_HeapMin_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_HeapMin_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_HeapMin___ROMPATCH
#define __FN__ xdc_runtime_HeapMin_Module__MTAB__C.getStats
#else
#define __FN__ xdc_runtime_HeapMin_getStats__F
#endif
xdc_Void xdc_runtime_HeapMin_getStats__E( xdc_runtime_HeapMin_Handle _this, xdc_runtime_Memory_Stats* stats ) {
    __FN__((void*)_this, stats);
}
#undef __FN__
#ifdef xdc_runtime_HeapMin___ROMPATCH
#define __FN__ xdc_runtime_HeapMin_Module__MTAB__C.alloc
#else
#define __FN__ xdc_runtime_HeapMin_alloc__F
#endif
xdc_Ptr xdc_runtime_HeapMin_alloc__E( xdc_runtime_HeapMin_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
    return __FN__((void*)_this, size, align, eb);
}
#undef __FN__
#ifdef xdc_runtime_HeapMin___ROMPATCH
#define __FN__ xdc_runtime_HeapMin_Module__MTAB__C.free
#else
#define __FN__ xdc_runtime_HeapMin_free__F
#endif
xdc_Void xdc_runtime_HeapMin_free__E( xdc_runtime_HeapMin_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
    __FN__((void*)_this, block, size);
}
#undef __FN__
#ifdef xdc_runtime_HeapMin___ROMPATCH
#define __FN__ xdc_runtime_HeapMin_Module__MTAB__C.isBlocking
#else
#define __FN__ xdc_runtime_HeapMin_isBlocking__F
#endif
xdc_Bool xdc_runtime_HeapMin_isBlocking__E( xdc_runtime_HeapMin_Handle _this ) {
    return __FN__((void*)_this);
}
#undef __FN__
#define __FN__ xdc_runtime_HeapMin_getStats__F
xdc_Void xdc_runtime_HeapMin_getStats__R( xdc_runtime_HeapMin_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_HeapMin_getStats__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)stats);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __FN__((void*)_this, stats);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_getStats__EXIT_EVT, 0);
#else
    __FN__((void*)_this, stats);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapMin_alloc__F
xdc_Ptr xdc_runtime_HeapMin_alloc__R( xdc_runtime_HeapMin_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_HeapMin___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_HeapMin_alloc__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __ret = __FN__((void*)_this, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, size, align, eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapMin_free__F
xdc_Void xdc_runtime_HeapMin_free__R( xdc_runtime_HeapMin_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_HeapMin_free__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __FN__((void*)_this, block, size);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_free__EXIT_EVT, 0);
#else
    __FN__((void*)_this, block, size);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapMin_isBlocking__F
xdc_Bool xdc_runtime_HeapMin_isBlocking__R( xdc_runtime_HeapMin_Handle _this ) {
#if xdc_runtime_HeapMin___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_HeapMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_isBlocking__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_HeapMin___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_HeapMin_isBlocking__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}

#if defined(xdc_runtime_HeapMin___EXPORT) && defined(__ti__)
#if xdc_runtime_HeapMin___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_alloc__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_free__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_isBlocking__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapMin_getStats__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_HeapMin___scope != -1
#ifdef xdc_runtime_HeapMin___FXNTAB
#ifndef __isrom__
#if xdc_runtime_HeapMin___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_HeapMin___scope == -1 || !defined(__xdc_runtime_IHeap_Interface__BASE__CR)
#ifndef __xdc_runtime_IHeap_Interface__BASE__C
#define __xdc_runtime_IHeap_Interface__BASE__C
__FAR__ xdc_runtime_IHeap_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_HeapMin_Module__FXNS__C, ".const:xdc_runtime_HeapMin_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_HeapMin_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_HeapMin_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_HeapMin_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_HeapMin_Fxns__ xdc_runtime_HeapMin_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_IHeap_Interface__BASE__C,
    &xdc_runtime_HeapMin_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_HeapMin_alloc__E,
    xdc_runtime_HeapMin_free__E,
    xdc_runtime_HeapMin_isBlocking__E,
    xdc_runtime_HeapMin_getStats__E,
    {

#ifdef xdc_runtime_HeapMin___OBJHEAP
        xdc_runtime_HeapMin_Object__create__S,
#else
        /* create__ */ 0,
#endif
#ifdef xdc_runtime_HeapMin___DELETE
        xdc_runtime_HeapMin_Object__delete__S,
#else
        /* delete__ */ 0,
#endif
        xdc_runtime_HeapMin_Handle__label__S,
        xdc_runtime_HeapMin_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_HeapMin_Module__startupDone__S(void) {

    return 1;
}
xdc_runtime_Types_Label* xdc_runtime_HeapMin_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {
    lab->handle = obj;
    lab->modId = xdc_runtime_HeapMin_Module__id__D;
#ifdef xdc_runtime_HeapMin___NAMEDINST
    xdc_runtime_Core_assignLabel(lab, ((xdc_runtime_HeapMin_Object__*)obj)->__name, 1);
#else
    xdc_runtime_Core_assignLabel(lab, 0, 0);
#endif
    return lab;
}
xdc_Void xdc_runtime_HeapMin_Params__init__S( xdc_Ptr prms, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {
#ifdef xdc_runtime_HeapMin___OBJHEAP
    xdc_runtime_Core_assignParams__I(prms, (xdc_Ptr)(src ? src : &xdc_runtime_HeapMin_Object__PARAMS__C), psz, isz);
#endif
}
xdc_Ptr xdc_runtime_HeapMin_Object__get__S( xdc_Ptr oa, xdc_Int i ) {
    if (oa) return ((xdc_runtime_HeapMin_Object*)oa) + i;
    if (xdc_runtime_HeapMin_Object__count__C == 0) return 0;
    return ((xdc_runtime_HeapMin_Object*)xdc_runtime_HeapMin_Object__table__C) + i;
}

#ifdef xdc_runtime_HeapMin___OBJHEAP
extern xdc_Ptr xdc_runtime_HeapMin_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_HeapMin___ParamsPtr __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_HeapMin_Params prms;
    xdc_runtime_HeapMin_Object* obj;
    obj = xdc_runtime_Core_createObject__I(&xdc_runtime_HeapMin_Object__DESC__C, __oa, __osz, &prms, (xdc_Ptr)__pa, __psz, __eb);
    if (!obj) return 0;
#ifdef xdc_runtime_HeapMin___DELETE
#define xdc_runtime_HeapMin___ISTAT 
#else
#define xdc_runtime_HeapMin___ISTAT
#endif
    xdc_runtime_HeapMin___ISTAT xdc_runtime_HeapMin_Instance_init__F(obj, &prms);
#if xdc_runtime_HeapMin___L_LIFECYCLE
#ifdef xdc_runtime_HeapMin___NAMEDINST
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, (xdc_IArg)(((xdc_runtime_HeapMin_Object__*)obj)->__name));
#else
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, 0);
#endif
#endif
    return obj;
}
#else
extern xdc_Ptr xdc_runtime_HeapMin_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_HeapMin___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapMin_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"create policy error", 0);
    return 0;
}
#endif

#ifdef xdc_runtime_HeapMin___DELETE
extern xdc_Void xdc_runtime_HeapMin_Object__destruct__S( xdc_Ptr obj ) {
#if xdc_runtime_HeapMin___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_destruct, (xdc_IArg)obj);
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_HeapMin_Object__DESC__C, obj, 0, -1, TRUE);
}
extern xdc_Void xdc_runtime_HeapMin_Object__delete__S( xdc_Ptr instp ) {
#if xdc_runtime_HeapMin___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_delete, (xdc_IArg)(*((xdc_runtime_HeapMin_Object**)instp)));
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_HeapMin_Object__DESC__C, *((xdc_runtime_HeapMin_Object**)instp), 0, -1, FALSE);
    *((xdc_runtime_HeapMin_Handle*)instp) = 0;
}
#else
extern xdc_Void xdc_runtime_HeapMin_Object__destruct__S( xdc_Ptr obj ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapMin_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
extern xdc_Void xdc_runtime_HeapMin_Object__delete__S( xdc_Ptr instp ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapMin_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
#endif

extern xdc_Ptr xdc_runtime_HeapMin_Object__first__S(void) {
#ifdef xdc_runtime_HeapMin___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = (xdc_runtime_Types_InstHdr *)xdc_runtime_HeapMin_Module__root__V.hdr.link.next;
    if (iHdr != (xdc_runtime_Types_InstHdr *)&xdc_runtime_HeapMin_Module__root__V) {
        return (iHdr + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

extern xdc_Ptr xdc_runtime_HeapMin_Object__next__S(xdc_Ptr obj) {
#ifdef xdc_runtime_HeapMin___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = ((xdc_runtime_Types_InstHdr *)obj) - 1;
    if (iHdr->link.next != (xdc_runtime_Types_Link *)&xdc_runtime_HeapMin_Module__root__V) {
        return ((xdc_runtime_Types_InstHdr *)(iHdr->link.next) + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

#endif /* xdc_runtime_HeapMin___scope */

#if (defined(__isrom__) && defined(xdc_runtime_HeapMin___OBJHEAP_ISNULL)) || (!defined(__isrom__) && (xdc_runtime_HeapMin___scope != -1 || !defined(xdc_runtime_HeapMin___OBJHEAP_ISNULL)))
typedef struct { xdc_runtime_HeapMin_Object2__ s0; char c; } xdc_runtime_HeapMin___S1;
__FAR__ xdc_runtime_HeapMin_Object__DESC__C__qual xdc_runtime_Core_ObjDesc xdc_runtime_HeapMin_Object__DESC__C = {
#ifdef xdc_runtime_HeapMin___FXNTAB
    (Ptr)&xdc_runtime_HeapMin_Module__FXNS__C, /* fxnTab */
#else
    (Ptr)0, /* fxnTab */
#endif
    &xdc_runtime_HeapMin_Module__root__V.hdr.link, /* modLink */
    sizeof(xdc_runtime_HeapMin___S1) - sizeof(xdc_runtime_HeapMin_Object2__), /* objAlign */
#ifdef xdc_runtime_HeapMin___OBJHEAP
    xdc_runtime_HeapMin___OBJHEAP, /* objHeap */
#else
    0, /* objHeap */
#endif
#ifdef xdc_runtime_HeapMin___NAMEDINST
    offsetof(xdc_runtime_HeapMin_Object__, __name), /* objName */
#else
    0, /* objName */
#endif
    sizeof(xdc_runtime_HeapMin_Object2__), /* objSize */
    (Ptr)&xdc_runtime_HeapMin_Object__PARAMS__C, /* prmsInit */
    sizeof(xdc_runtime_HeapMin_Params), /* prmsSize */
};
#endif
#endif /* xdc_runtime_HeapMin___used */

#ifdef xdc_runtime_HeapStd___used
/*
 *  ======== module HeapStd ========
 *  Do not modify this file; it is generated from the specification HeapStd.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_HeapStd__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/HeapStd.h>
#undef __nested__
#else
#include <xdc/runtime/HeapStd.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapStd___LOGOBJ) && xdc_runtime_HeapStd___DGSINCL & 0x1
#define xdc_runtime_HeapStd___L_ENTRY 1
#else
#define xdc_runtime_HeapStd___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapStd___LOGOBJ) && xdc_runtime_HeapStd___DGSINCL & 0x2
#define xdc_runtime_HeapStd___L_EXIT 1
#else
#define xdc_runtime_HeapStd___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_HeapStd___LOGOBJ) && xdc_runtime_HeapStd___DGSINCL & 0x4
#define xdc_runtime_HeapStd___L_LIFECYCLE 1
#else
#define xdc_runtime_HeapStd___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_HeapStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_HeapStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_HeapStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_HeapStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_HeapStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_HeapStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_HeapStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_HeapStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_HeapStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_HeapStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_HeapStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_HeapStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_HeapStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_HeapStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_HeapStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_HeapStd_Module_GateProxy_query
#if xdc_runtime_HeapStd___scope != -1 || defined(xdc_runtime_HeapStd_free__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapStd_free__PATCH
#define __FN__ xdc_runtime_HeapStd_free__PATCH
#else
#define __FN__ xdc_runtime_HeapStd_free__F
#endif
xdc_Void xdc_runtime_HeapStd_free__E( xdc_runtime_HeapStd_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_HeapStd_free__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __FN__((void*)_this, block, size);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_free__EXIT_EVT, 0);
#else
    __FN__((void*)_this, block, size);
#endif
}
#endif
#if xdc_runtime_HeapStd___scope != -1 || defined(xdc_runtime_HeapStd_getStats__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapStd_getStats__PATCH
#define __FN__ xdc_runtime_HeapStd_getStats__PATCH
#else
#define __FN__ xdc_runtime_HeapStd_getStats__F
#endif
xdc_Void xdc_runtime_HeapStd_getStats__E( xdc_runtime_HeapStd_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_HeapStd_getStats__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)stats);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __FN__((void*)_this, stats);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_getStats__EXIT_EVT, 0);
#else
    __FN__((void*)_this, stats);
#endif
}
#endif
#if xdc_runtime_HeapStd___scope != -1 || defined(xdc_runtime_HeapStd_alloc__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapStd_alloc__PATCH
#define __FN__ xdc_runtime_HeapStd_alloc__PATCH
#else
#define __FN__ xdc_runtime_HeapStd_alloc__F
#endif
xdc_Ptr xdc_runtime_HeapStd_alloc__E( xdc_runtime_HeapStd_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_HeapStd___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_HeapStd_alloc__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __ret = __FN__((void*)_this, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, size, align, eb);
#endif
}
#endif
#if xdc_runtime_HeapStd___scope != -1 || defined(xdc_runtime_HeapStd_isBlocking__PATCH)
#undef __FN__
#ifdef xdc_runtime_HeapStd_isBlocking__PATCH
#define __FN__ xdc_runtime_HeapStd_isBlocking__PATCH
#else
#define __FN__ xdc_runtime_HeapStd_isBlocking__F
#endif
xdc_Bool xdc_runtime_HeapStd_isBlocking__E( xdc_runtime_HeapStd_Handle _this ) {
#if xdc_runtime_HeapStd___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_isBlocking__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_isBlocking__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}
#endif

#if defined(xdc_runtime_HeapStd___EXPORT) && defined(__ti__)
#if xdc_runtime_HeapStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_alloc__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_free__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_isBlocking__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_getStats__E);
#endif

#if defined(xdc_runtime_HeapStd___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_HeapStd_Module__diagsEnabled xdc_runtime_HeapStd_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__diagsIncluded xdc_runtime_HeapStd_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__diagsMask xdc_runtime_HeapStd_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__gateObj xdc_runtime_HeapStd_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__gatePrms xdc_runtime_HeapStd_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__id xdc_runtime_HeapStd_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__loggerDefined xdc_runtime_HeapStd_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__loggerObj xdc_runtime_HeapStd_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__loggerFxn4 xdc_runtime_HeapStd_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__loggerFxn8 xdc_runtime_HeapStd_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Module__startupDoneFxn xdc_runtime_HeapStd_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Object__count xdc_runtime_HeapStd_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Object__heap xdc_runtime_HeapStd_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Object__sizeof xdc_runtime_HeapStd_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_Object__table xdc_runtime_HeapStd_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_E_noRTSMemory xdc_runtime_HeapStd_E_noRTSMemory__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_A_zeroSize xdc_runtime_HeapStd_A_zeroSize__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_A_invalidTotalFreeSize xdc_runtime_HeapStd_A_invalidTotalFreeSize__C __attribute__ ((externally_visible));
const CT__xdc_runtime_HeapStd_A_invalidAlignment xdc_runtime_HeapStd_A_invalidAlignment__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_HeapStd_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapStd_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapStd_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapStd_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapStd_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapStd_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_alloc__E( xdc_runtime_HeapStd_Handle, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapStd_free__E( xdc_runtime_HeapStd_Handle, xdc_Ptr block, xdc_SizeT size ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapStd_isBlocking__E( xdc_runtime_HeapStd_Handle ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_HeapStd_getStats__E( xdc_runtime_HeapStd_Handle, xdc_runtime_Memory_Stats* stats ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_HeapStd_alloc__E( xdc_runtime_HeapStd_Handle, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_HeapStd_isBlocking__E( xdc_runtime_HeapStd_Handle ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_HeapStd___ROMPATCH
__FAR__ xdc_runtime_HeapStd_Module__MTAB__C__qual xdc_runtime_HeapStd_MTab__ xdc_runtime_HeapStd_Module__MTAB__C = {
#if xdc_runtime_HeapStd___scope == -1
    xdc_runtime_HeapStd_alloc__E,
    xdc_runtime_HeapStd_free__E,
    xdc_runtime_HeapStd_isBlocking__E,
    xdc_runtime_HeapStd_getStats__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_HeapStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_HeapStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_HeapStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_HeapStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_HeapStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_HeapStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_HeapStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_HeapStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_HeapStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_HeapStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_HeapStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_HeapStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_HeapStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_HeapStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_HeapStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_HeapStd_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_HeapStd___ROMPATCH
#define __FN__ xdc_runtime_HeapStd_Module__MTAB__C.free
#else
#define __FN__ xdc_runtime_HeapStd_free__F
#endif
xdc_Void xdc_runtime_HeapStd_free__E( xdc_runtime_HeapStd_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
    __FN__((void*)_this, block, size);
}
#undef __FN__
#ifdef xdc_runtime_HeapStd___ROMPATCH
#define __FN__ xdc_runtime_HeapStd_Module__MTAB__C.getStats
#else
#define __FN__ xdc_runtime_HeapStd_getStats__F
#endif
xdc_Void xdc_runtime_HeapStd_getStats__E( xdc_runtime_HeapStd_Handle _this, xdc_runtime_Memory_Stats* stats ) {
    __FN__((void*)_this, stats);
}
#undef __FN__
#ifdef xdc_runtime_HeapStd___ROMPATCH
#define __FN__ xdc_runtime_HeapStd_Module__MTAB__C.alloc
#else
#define __FN__ xdc_runtime_HeapStd_alloc__F
#endif
xdc_Ptr xdc_runtime_HeapStd_alloc__E( xdc_runtime_HeapStd_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
    return __FN__((void*)_this, size, align, eb);
}
#undef __FN__
#ifdef xdc_runtime_HeapStd___ROMPATCH
#define __FN__ xdc_runtime_HeapStd_Module__MTAB__C.isBlocking
#else
#define __FN__ xdc_runtime_HeapStd_isBlocking__F
#endif
xdc_Bool xdc_runtime_HeapStd_isBlocking__E( xdc_runtime_HeapStd_Handle _this ) {
    return __FN__((void*)_this);
}
#undef __FN__
#define __FN__ xdc_runtime_HeapStd_free__F
xdc_Void xdc_runtime_HeapStd_free__R( xdc_runtime_HeapStd_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_HeapStd_free__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)block, (xdc_IArg)size);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __FN__((void*)_this, block, size);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_free__EXIT_EVT, 0);
#else
    __FN__((void*)_this, block, size);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapStd_getStats__F
xdc_Void xdc_runtime_HeapStd_getStats__R( xdc_runtime_HeapStd_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_HeapStd_getStats__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)stats);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __FN__((void*)_this, stats);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_getStats__EXIT_EVT, 0);
#else
    __FN__((void*)_this, stats);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapStd_alloc__F
xdc_Ptr xdc_runtime_HeapStd_alloc__R( xdc_runtime_HeapStd_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#if xdc_runtime_HeapStd___L_EXIT
    xdc_Ptr __ret;
#else
#endif
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write4(xdc_runtime_HeapStd_alloc__ENTRY_EVT, (xdc_IArg)_this, (xdc_IArg)size, (xdc_IArg)align, (xdc_IArg)eb);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __ret = __FN__((void*)_this, size, align, eb);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_alloc__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this, size, align, eb);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_HeapStd_isBlocking__F
xdc_Bool xdc_runtime_HeapStd_isBlocking__R( xdc_runtime_HeapStd_Handle _this ) {
#if xdc_runtime_HeapStd___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_HeapStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_isBlocking__ENTRY_EVT, (xdc_IArg)_this);
#endif
#if xdc_runtime_HeapStd___L_EXIT
    __ret = __FN__((void*)_this);
    xdc_runtime_Log_write1(xdc_runtime_HeapStd_isBlocking__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__((void*)_this);
#endif
}

#if defined(xdc_runtime_HeapStd___EXPORT) && defined(__ti__)
#if xdc_runtime_HeapStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Handle__label__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__create__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__delete__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__destruct__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__get__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__first__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Object__next__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_Params__init__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_alloc__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_free__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_isBlocking__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_HeapStd_getStats__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_HeapStd___scope != -1
#ifdef xdc_runtime_HeapStd___FXNTAB
#ifndef __isrom__
#if xdc_runtime_HeapStd___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_HeapStd___scope == -1 || !defined(__xdc_runtime_IHeap_Interface__BASE__CR)
#ifndef __xdc_runtime_IHeap_Interface__BASE__C
#define __xdc_runtime_IHeap_Interface__BASE__C
__FAR__ xdc_runtime_IHeap_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IHeap_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_HeapStd_Module__FXNS__C, ".const:xdc_runtime_HeapStd_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_HeapStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_HeapStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_HeapStd_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_HeapStd_Fxns__ xdc_runtime_HeapStd_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_IHeap_Interface__BASE__C,
    &xdc_runtime_HeapStd_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_HeapStd_alloc__E,
    xdc_runtime_HeapStd_free__E,
    xdc_runtime_HeapStd_isBlocking__E,
    xdc_runtime_HeapStd_getStats__E,
    {

#ifdef xdc_runtime_HeapStd___OBJHEAP
        xdc_runtime_HeapStd_Object__create__S,
#else
        /* create__ */ 0,
#endif
#ifdef xdc_runtime_HeapStd___DELETE
        xdc_runtime_HeapStd_Object__delete__S,
#else
        /* delete__ */ 0,
#endif
        xdc_runtime_HeapStd_Handle__label__S,
        xdc_runtime_HeapStd_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_HeapStd_Module__startupDone__S(void) {

    return 1;
}
xdc_runtime_Types_Label* xdc_runtime_HeapStd_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {
    lab->handle = obj;
    lab->modId = xdc_runtime_HeapStd_Module__id__D;
#ifdef xdc_runtime_HeapStd___NAMEDINST
    xdc_runtime_Core_assignLabel(lab, ((xdc_runtime_HeapStd_Object__*)obj)->__name, 1);
#else
    xdc_runtime_Core_assignLabel(lab, 0, 0);
#endif
    return lab;
}
xdc_Void xdc_runtime_HeapStd_Params__init__S( xdc_Ptr prms, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {
#ifdef xdc_runtime_HeapStd___OBJHEAP
    xdc_runtime_Core_assignParams__I(prms, (xdc_Ptr)(src ? src : &xdc_runtime_HeapStd_Object__PARAMS__C), psz, isz);
#endif
}
xdc_Ptr xdc_runtime_HeapStd_Object__get__S( xdc_Ptr oa, xdc_Int i ) {
    if (oa) return ((xdc_runtime_HeapStd_Object*)oa) + i;
    if (xdc_runtime_HeapStd_Object__count__C == 0) return 0;
    return ((xdc_runtime_HeapStd_Object*)xdc_runtime_HeapStd_Object__table__C) + i;
}

#ifdef xdc_runtime_HeapStd___OBJHEAP
extern xdc_Ptr xdc_runtime_HeapStd_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_HeapStd___ParamsPtr __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_HeapStd_Params prms;
    xdc_runtime_HeapStd_Object* obj;
#ifdef xdc_runtime_HeapStd___DELETE
    int iStat;
#endif
    obj = xdc_runtime_Core_createObject__I(&xdc_runtime_HeapStd_Object__DESC__C, __oa, __osz, &prms, (xdc_Ptr)__pa, __psz, __eb);
    if (!obj) return 0;
#ifdef xdc_runtime_HeapStd___DELETE
#define xdc_runtime_HeapStd___ISTAT iStat = 
#else
#define xdc_runtime_HeapStd___ISTAT
#endif
    xdc_runtime_HeapStd___ISTAT xdc_runtime_HeapStd_Instance_init__F(obj, &prms, __eb);
    if (xdc_runtime_Error_check(__eb)) {
#ifdef xdc_runtime_HeapStd___DELETE
        xdc_runtime_Core_deleteObject__I(&xdc_runtime_HeapStd_Object__DESC__C, obj, 0, iStat, (xdc_Bool)(__oa != 0));
#endif
        return 0;
    }
#if xdc_runtime_HeapStd___L_LIFECYCLE
#ifdef xdc_runtime_HeapStd___NAMEDINST
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, (xdc_IArg)(((xdc_runtime_HeapStd_Object__*)obj)->__name));
#else
    xdc_runtime_Log_write2(__oa ? xdc_runtime_Log_L_construct : xdc_runtime_Log_L_create, (xdc_IArg)obj, 0);
#endif
#endif
    return obj;
}
#else
extern xdc_Ptr xdc_runtime_HeapStd_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_HeapStd___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapStd_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"create policy error", 0);
    return 0;
}
#endif

#ifdef xdc_runtime_HeapStd___DELETE
extern xdc_Void xdc_runtime_HeapStd_Object__destruct__S( xdc_Ptr obj ) {
#if xdc_runtime_HeapStd___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_destruct, (xdc_IArg)obj);
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_HeapStd_Object__DESC__C, obj, 0, 0, TRUE);
}
extern xdc_Void xdc_runtime_HeapStd_Object__delete__S( xdc_Ptr instp ) {
#if xdc_runtime_HeapStd___L_LIFECYCLE
    xdc_runtime_Log_write1(xdc_runtime_Log_L_delete, (xdc_IArg)(*((xdc_runtime_HeapStd_Object**)instp)));
#endif
    xdc_runtime_Core_deleteObject__I(&xdc_runtime_HeapStd_Object__DESC__C, *((xdc_runtime_HeapStd_Object**)instp), 0, 0, FALSE);
    *((xdc_runtime_HeapStd_Handle*)instp) = 0;
}
#else
extern xdc_Void xdc_runtime_HeapStd_Object__destruct__S( xdc_Ptr obj ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapStd_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
extern xdc_Void xdc_runtime_HeapStd_Object__delete__S( xdc_Ptr instp ) {
    xdc_runtime_Error_raiseX(NULL, xdc_runtime_HeapStd_Module__id__C, NULL, 0, xdc_runtime_Error_E_generic, (xdc_IArg)"delete policy error", 0);
}
#endif

extern xdc_Ptr xdc_runtime_HeapStd_Object__first__S(void) {
#ifdef xdc_runtime_HeapStd___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = (xdc_runtime_Types_InstHdr *)xdc_runtime_HeapStd_Module__root__V.hdr.link.next;
    if (iHdr != (xdc_runtime_Types_InstHdr *)&xdc_runtime_HeapStd_Module__root__V) {
        return (iHdr + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

extern xdc_Ptr xdc_runtime_HeapStd_Object__next__S(xdc_Ptr obj) {
#ifdef xdc_runtime_HeapStd___OBJHEAP
    xdc_runtime_Types_InstHdr *iHdr = ((xdc_runtime_Types_InstHdr *)obj) - 1;
    if (iHdr->link.next != (xdc_runtime_Types_Link *)&xdc_runtime_HeapStd_Module__root__V) {
        return ((xdc_runtime_Types_InstHdr *)(iHdr->link.next) + 1);
    }
    else {
        return (NULL);
    }
#else
    return (NULL);
#endif
}

#endif /* xdc_runtime_HeapStd___scope */

#if (defined(__isrom__) && defined(xdc_runtime_HeapStd___OBJHEAP_ISNULL)) || (!defined(__isrom__) && (xdc_runtime_HeapStd___scope != -1 || !defined(xdc_runtime_HeapStd___OBJHEAP_ISNULL)))
typedef struct { xdc_runtime_HeapStd_Object2__ s0; char c; } xdc_runtime_HeapStd___S1;
__FAR__ xdc_runtime_HeapStd_Object__DESC__C__qual xdc_runtime_Core_ObjDesc xdc_runtime_HeapStd_Object__DESC__C = {
#ifdef xdc_runtime_HeapStd___FXNTAB
    (Ptr)&xdc_runtime_HeapStd_Module__FXNS__C, /* fxnTab */
#else
    (Ptr)0, /* fxnTab */
#endif
    &xdc_runtime_HeapStd_Module__root__V.hdr.link, /* modLink */
    sizeof(xdc_runtime_HeapStd___S1) - sizeof(xdc_runtime_HeapStd_Object2__), /* objAlign */
#ifdef xdc_runtime_HeapStd___OBJHEAP
    xdc_runtime_HeapStd___OBJHEAP, /* objHeap */
#else
    0, /* objHeap */
#endif
#ifdef xdc_runtime_HeapStd___NAMEDINST
    offsetof(xdc_runtime_HeapStd_Object__, __name), /* objName */
#else
    0, /* objName */
#endif
    sizeof(xdc_runtime_HeapStd_Object2__), /* objSize */
    (Ptr)&xdc_runtime_HeapStd_Object__PARAMS__C, /* prmsInit */
    sizeof(xdc_runtime_HeapStd_Params), /* prmsSize */
};
#endif
#endif /* xdc_runtime_HeapStd___used */

#ifdef xdc_runtime_Startup___used
/*
 *  ======== module Startup ========
 *  Do not modify this file; it is generated from the specification Startup.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Startup__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Startup.h>
#undef __nested__
#else
#include <xdc/runtime/Startup.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Startup___LOGOBJ) && xdc_runtime_Startup___DGSINCL & 0x1
#define xdc_runtime_Startup___L_ENTRY 1
#else
#define xdc_runtime_Startup___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Startup___LOGOBJ) && xdc_runtime_Startup___DGSINCL & 0x2
#define xdc_runtime_Startup___L_EXIT 1
#else
#define xdc_runtime_Startup___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Startup___LOGOBJ) && xdc_runtime_Startup___DGSINCL & 0x4
#define xdc_runtime_Startup___L_LIFECYCLE 1
#else
#define xdc_runtime_Startup___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Startup_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Startup_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Startup_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Startup_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Startup_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Startup_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Startup_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Startup_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Startup_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Startup_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Startup_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Startup_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Startup_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Startup_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Startup_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Startup_Module_GateProxy_query
#if xdc_runtime_Startup___scope != -1 || defined(xdc_runtime_Startup_exec__PATCH)
#undef __FN__
#ifdef xdc_runtime_Startup_exec__PATCH
#define __FN__ xdc_runtime_Startup_exec__PATCH
#else
#define __FN__ xdc_runtime_Startup_exec__F
#endif
xdc_Void xdc_runtime_Startup_exec__E( void ) {
#if xdc_runtime_Startup___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Startup_exec__ENTRY_EVT);
#endif
#if xdc_runtime_Startup___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Startup_exec__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#endif
#if xdc_runtime_Startup___scope != -1 || defined(xdc_runtime_Startup_rtsDone__PATCH)
#undef __FN__
#ifdef xdc_runtime_Startup_rtsDone__PATCH
#define __FN__ xdc_runtime_Startup_rtsDone__PATCH
#else
#define __FN__ xdc_runtime_Startup_rtsDone__F
#endif
xdc_Bool xdc_runtime_Startup_rtsDone__E( void ) {
#if xdc_runtime_Startup___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Startup___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Startup_rtsDone__ENTRY_EVT);
#endif
#if xdc_runtime_Startup___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Startup_rtsDone__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif

#if defined(xdc_runtime_Startup___EXPORT) && defined(__ti__)
#if xdc_runtime_Startup___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_exec__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_rtsDone__E);
#endif

#if defined(xdc_runtime_Startup___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Startup_Module__diagsEnabled xdc_runtime_Startup_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__diagsIncluded xdc_runtime_Startup_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__diagsMask xdc_runtime_Startup_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__gateObj xdc_runtime_Startup_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__gatePrms xdc_runtime_Startup_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__id xdc_runtime_Startup_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__loggerDefined xdc_runtime_Startup_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__loggerObj xdc_runtime_Startup_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__loggerFxn4 xdc_runtime_Startup_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__loggerFxn8 xdc_runtime_Startup_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Module__startupDoneFxn xdc_runtime_Startup_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Object__count xdc_runtime_Startup_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Object__heap xdc_runtime_Startup_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Object__sizeof xdc_runtime_Startup_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_Object__table xdc_runtime_Startup_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_maxPasses xdc_runtime_Startup_maxPasses__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_firstFxns xdc_runtime_Startup_firstFxns__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_lastFxns xdc_runtime_Startup_lastFxns__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_startModsFxn xdc_runtime_Startup_startModsFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_execImpl xdc_runtime_Startup_execImpl__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_sfxnTab xdc_runtime_Startup_sfxnTab__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Startup_sfxnRts xdc_runtime_Startup_sfxnRts__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Startup_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Startup_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Startup_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Startup_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Startup_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Startup_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Startup_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Startup_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Startup_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Startup_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Startup_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Startup_exec__E( void ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Startup_rtsDone__E( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Startup___ROMPATCH
__FAR__ xdc_runtime_Startup_Module__MTAB__C__qual xdc_runtime_Startup_MTab__ xdc_runtime_Startup_Module__MTAB__C = {
#if xdc_runtime_Startup___scope == -1
    xdc_runtime_Startup_exec__E,
    xdc_runtime_Startup_rtsDone__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Startup_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Startup_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Startup_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Startup_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Startup_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Startup_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Startup_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Startup_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Startup_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Startup_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Startup_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Startup_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Startup_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Startup_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Startup_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Startup_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Startup___ROMPATCH
#define __FN__ xdc_runtime_Startup_Module__MTAB__C.exec
#else
#define __FN__ xdc_runtime_Startup_exec__F
#endif
xdc_Void xdc_runtime_Startup_exec__E( void ) {
    __FN__();
}
#undef __FN__
#ifdef xdc_runtime_Startup___ROMPATCH
#define __FN__ xdc_runtime_Startup_Module__MTAB__C.rtsDone
#else
#define __FN__ xdc_runtime_Startup_rtsDone__F
#endif
xdc_Bool xdc_runtime_Startup_rtsDone__E( void ) {
    return __FN__();
}
#undef __FN__
#define __FN__ xdc_runtime_Startup_exec__F
xdc_Void xdc_runtime_Startup_exec__R( void ) {
#if xdc_runtime_Startup___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Startup_exec__ENTRY_EVT);
#endif
#if xdc_runtime_Startup___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Startup_exec__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Startup_rtsDone__F
xdc_Bool xdc_runtime_Startup_rtsDone__R( void ) {
#if xdc_runtime_Startup___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_Startup___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Startup_rtsDone__ENTRY_EVT);
#endif
#if xdc_runtime_Startup___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Startup_rtsDone__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}

#if defined(xdc_runtime_Startup___EXPORT) && defined(__ti__)
#if xdc_runtime_Startup___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_exec__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Startup_rtsDone__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Startup___scope != -1
xdc_Bool xdc_runtime_Startup_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Startup___scope */

#endif /* xdc_runtime_Startup___used */

#ifdef xdc_runtime_System___used
/*
 *  ======== module System ========
 *  Do not modify this file; it is generated from the specification System.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_System__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/System.h>
#undef __nested__
#else
#include <xdc/runtime/System.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_System___LOGOBJ) && xdc_runtime_System___DGSINCL & 0x1
#define xdc_runtime_System___L_ENTRY 1
#else
#define xdc_runtime_System___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_System___LOGOBJ) && xdc_runtime_System___DGSINCL & 0x2
#define xdc_runtime_System___L_EXIT 1
#else
#define xdc_runtime_System___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_System___LOGOBJ) && xdc_runtime_System___DGSINCL & 0x4
#define xdc_runtime_System___L_LIFECYCLE 1
#else
#define xdc_runtime_System___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_System_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_System_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_System_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_System_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_System_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_System_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_System_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_System_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_System_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_System_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_System_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_System_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_System_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_System_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_System_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_System_Module_GateProxy_query
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_abort__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_abort__PATCH
#define __FN__ xdc_runtime_System_abort__PATCH
#else
#define __FN__ xdc_runtime_System_abort__F
#endif
xdc_Void xdc_runtime_System_abort__E( xdc_String str ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_System_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_atexit__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_atexit__PATCH
#define __FN__ xdc_runtime_System_atexit__PATCH
#else
#define __FN__ xdc_runtime_System_atexit__F
#endif
xdc_Bool xdc_runtime_System_atexit__E( xdc_runtime_System_AtexitHandler handler ) {
#if xdc_runtime_System___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_atexit__ENTRY_EVT, (xdc_IArg)handler);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(handler);
    xdc_runtime_Log_write1(xdc_runtime_System_atexit__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(handler);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_exit__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_exit__PATCH
#define __FN__ xdc_runtime_System_exit__PATCH
#else
#define __FN__ xdc_runtime_System_exit__F
#endif
xdc_Void xdc_runtime_System_exit__E( xdc_Int stat ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_System_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_putch__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_putch__PATCH
#define __FN__ xdc_runtime_System_putch__PATCH
#else
#define __FN__ xdc_runtime_System_putch__F
#endif
xdc_Void xdc_runtime_System_putch__E( xdc_Char ch ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_System_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_flush__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_flush__PATCH
#define __FN__ xdc_runtime_System_flush__PATCH
#else
#define __FN__ xdc_runtime_System_flush__F
#endif
xdc_Void xdc_runtime_System_flush__E( void ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_System_flush__ENTRY_EVT);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_System_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_printf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_printf__PATCH
#define __FN__ xdc_runtime_System_printf__PATCH
#else
#define __FN__ xdc_runtime_System_printf_va__F
#endif
xdc_Int xdc_runtime_System_printf_va__E( xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_printf__ENTRY_EVT, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_printf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, __va);
#endif
}
#undef __FN__
#ifdef xdc_runtime_System_printf__PATCH
#define __FN__ xdc_runtime_System_printf__PATCH
#else
#define __FN__ xdc_runtime_System_printf_va__F
#endif
xdc_Int xdc_runtime_System_printf__E( xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_printf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_aprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_aprintf__PATCH
#define __FN__ xdc_runtime_System_aprintf__PATCH
#else
#define __FN__ xdc_runtime_System_aprintf_va__F
#endif
xdc_Int xdc_runtime_System_aprintf_va__E( xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__ENTRY_EVT, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, __va);
#endif
}
#undef __FN__
#ifdef xdc_runtime_System_aprintf__PATCH
#define __FN__ xdc_runtime_System_aprintf__PATCH
#else
#define __FN__ xdc_runtime_System_aprintf_va__F
#endif
xdc_Int xdc_runtime_System_aprintf__E( xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_sprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_sprintf__PATCH
#define __FN__ xdc_runtime_System_sprintf__PATCH
#else
#define __FN__ xdc_runtime_System_sprintf_va__F
#endif
xdc_Int xdc_runtime_System_sprintf_va__E( xdc_Char buf[], xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_sprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_sprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, __va);
#endif
}
#undef __FN__
#ifdef xdc_runtime_System_sprintf__PATCH
#define __FN__ xdc_runtime_System_sprintf__PATCH
#else
#define __FN__ xdc_runtime_System_sprintf_va__F
#endif
xdc_Int xdc_runtime_System_sprintf__E( xdc_Char buf[], xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_sprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_asprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_asprintf__PATCH
#define __FN__ xdc_runtime_System_asprintf__PATCH
#else
#define __FN__ xdc_runtime_System_asprintf_va__F
#endif
xdc_Int xdc_runtime_System_asprintf_va__E( xdc_Char buf[], xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_asprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_asprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, __va);
#endif
}
#undef __FN__
#ifdef xdc_runtime_System_asprintf__PATCH
#define __FN__ xdc_runtime_System_asprintf__PATCH
#else
#define __FN__ xdc_runtime_System_asprintf_va__F
#endif
xdc_Int xdc_runtime_System_asprintf__E( xdc_Char buf[], xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_asprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_vprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_vprintf__PATCH
#define __FN__ xdc_runtime_System_vprintf__PATCH
#else
#define __FN__ xdc_runtime_System_vprintf__F
#endif
xdc_Int xdc_runtime_System_vprintf__E( xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_vprintf__ENTRY_EVT, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_vprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, va);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_avprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_avprintf__PATCH
#define __FN__ xdc_runtime_System_avprintf__PATCH
#else
#define __FN__ xdc_runtime_System_avprintf__F
#endif
xdc_Int xdc_runtime_System_avprintf__E( xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_avprintf__ENTRY_EVT, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_avprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, va);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_vsprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_vsprintf__PATCH
#define __FN__ xdc_runtime_System_vsprintf__PATCH
#else
#define __FN__ xdc_runtime_System_vsprintf__F
#endif
xdc_Int xdc_runtime_System_vsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_System_vsprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_vsprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, va);
#endif
}
#endif
#if xdc_runtime_System___scope != -1 || defined(xdc_runtime_System_avsprintf__PATCH)
#undef __FN__
#ifdef xdc_runtime_System_avsprintf__PATCH
#define __FN__ xdc_runtime_System_avsprintf__PATCH
#else
#define __FN__ xdc_runtime_System_avsprintf__F
#endif
xdc_Int xdc_runtime_System_avsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_System_avsprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_avsprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, va);
#endif
}
#endif
#if xdc_runtime_System___scope != -1
xdc_Int xdc_runtime_System_Module_startup__E( xdc_Int state ) { return xdc_runtime_System_Module_startup__F(state); }
#endif

#if defined(xdc_runtime_System___EXPORT) && defined(__ti__)
#if xdc_runtime_System___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_System_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_System_abort__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_atexit__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_exit__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_putch__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_flush__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_printf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_aprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_sprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_asprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_vprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_avprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_vsprintf__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_avsprintf__E);
#endif

#if defined(xdc_runtime_System___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_System_Module__diagsEnabled xdc_runtime_System_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__diagsIncluded xdc_runtime_System_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__diagsMask xdc_runtime_System_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__gateObj xdc_runtime_System_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__gatePrms xdc_runtime_System_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__id xdc_runtime_System_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__loggerDefined xdc_runtime_System_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__loggerObj xdc_runtime_System_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__loggerFxn4 xdc_runtime_System_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__loggerFxn8 xdc_runtime_System_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Module__startupDoneFxn xdc_runtime_System_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Object__count xdc_runtime_System_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Object__heap xdc_runtime_System_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Object__sizeof xdc_runtime_System_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_Object__table xdc_runtime_System_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_A_cannotFitIntoArg xdc_runtime_System_A_cannotFitIntoArg__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_maxAtexitHandlers xdc_runtime_System_maxAtexitHandlers__C __attribute__ ((externally_visible));
const CT__xdc_runtime_System_extendFxn xdc_runtime_System_extendFxn__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_System_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_System_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_System_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_System_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_System_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_System_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_System_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_System_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_abort__E( xdc_String str ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_System_atexit__E( xdc_runtime_System_AtexitHandler handler ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_exit__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_putch__E( xdc_Char ch ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_System_flush__E( void ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_printf__E( xdc_String fmt, ... ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_aprintf__E( xdc_String fmt, ... ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_sprintf__E( xdc_Char buf[], xdc_String fmt, ... ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_asprintf__E( xdc_Char buf[], xdc_String fmt, ... ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_vprintf__E( xdc_String fmt, xdc_VaList va ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_avprintf__E( xdc_String fmt, xdc_VaList va ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_vsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_System_avsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_System___ROMPATCH
__FAR__ xdc_runtime_System_Module__MTAB__C__qual xdc_runtime_System_MTab__ xdc_runtime_System_Module__MTAB__C = {
#if xdc_runtime_System___scope == -1
    xdc_runtime_System_abort__E,
    xdc_runtime_System_atexit__E,
    xdc_runtime_System_exit__E,
    xdc_runtime_System_putch__E,
    xdc_runtime_System_flush__E,
    xdc_runtime_System_printf_va__E,
    xdc_runtime_System_aprintf_va__E,
    xdc_runtime_System_sprintf_va__E,
    xdc_runtime_System_asprintf_va__E,
    xdc_runtime_System_vprintf__E,
    xdc_runtime_System_avprintf__E,
    xdc_runtime_System_vsprintf__E,
    xdc_runtime_System_avsprintf__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_System_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_System_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_System_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_System_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_System_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_System_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_System_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_System_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_System_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_System_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_System_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_System_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_System_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_System_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_System_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_System_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.abort
#else
#define __FN__ xdc_runtime_System_abort__F
#endif
xdc_Void xdc_runtime_System_abort__E( xdc_String str ) {
    __FN__(str);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.atexit
#else
#define __FN__ xdc_runtime_System_atexit__F
#endif
xdc_Bool xdc_runtime_System_atexit__E( xdc_runtime_System_AtexitHandler handler ) {
    return __FN__(handler);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.exit
#else
#define __FN__ xdc_runtime_System_exit__F
#endif
xdc_Void xdc_runtime_System_exit__E( xdc_Int stat ) {
    __FN__(stat);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.putch
#else
#define __FN__ xdc_runtime_System_putch__F
#endif
xdc_Void xdc_runtime_System_putch__E( xdc_Char ch ) {
    __FN__(ch);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.flush
#else
#define __FN__ xdc_runtime_System_flush__F
#endif
xdc_Void xdc_runtime_System_flush__E( void ) {
    __FN__();
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.printf
#else
#define __FN__ xdc_runtime_System_printf_va__F
#endif
xdc_Int xdc_runtime_System_printf_va__E( xdc_String fmt, va_list __va ) {
    return __FN__(fmt, __va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.printf
#else
#define __FN__ xdc_runtime_System_printf_va__F
#endif
xdc_Int xdc_runtime_System_printf__E( xdc_String fmt, ... ) {
    xdc_Int __ret;
    va_list __va; va_start(__va, fmt);
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.aprintf
#else
#define __FN__ xdc_runtime_System_aprintf_va__F
#endif
xdc_Int xdc_runtime_System_aprintf_va__E( xdc_String fmt, va_list __va ) {
    return __FN__(fmt, __va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.aprintf
#else
#define __FN__ xdc_runtime_System_aprintf_va__F
#endif
xdc_Int xdc_runtime_System_aprintf__E( xdc_String fmt, ... ) {
    xdc_Int __ret;
    va_list __va; va_start(__va, fmt);
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.sprintf
#else
#define __FN__ xdc_runtime_System_sprintf_va__F
#endif
xdc_Int xdc_runtime_System_sprintf_va__E( xdc_Char buf[], xdc_String fmt, va_list __va ) {
    return __FN__(buf, fmt, __va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.sprintf
#else
#define __FN__ xdc_runtime_System_sprintf_va__F
#endif
xdc_Int xdc_runtime_System_sprintf__E( xdc_Char buf[], xdc_String fmt, ... ) {
    xdc_Int __ret;
    va_list __va; va_start(__va, fmt);
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.asprintf
#else
#define __FN__ xdc_runtime_System_asprintf_va__F
#endif
xdc_Int xdc_runtime_System_asprintf_va__E( xdc_Char buf[], xdc_String fmt, va_list __va ) {
    return __FN__(buf, fmt, __va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.asprintf
#else
#define __FN__ xdc_runtime_System_asprintf_va__F
#endif
xdc_Int xdc_runtime_System_asprintf__E( xdc_Char buf[], xdc_String fmt, ... ) {
    xdc_Int __ret;
    va_list __va; va_start(__va, fmt);
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.vprintf
#else
#define __FN__ xdc_runtime_System_vprintf__F
#endif
xdc_Int xdc_runtime_System_vprintf__E( xdc_String fmt, xdc_VaList va ) {
    return __FN__(fmt, va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.avprintf
#else
#define __FN__ xdc_runtime_System_avprintf__F
#endif
xdc_Int xdc_runtime_System_avprintf__E( xdc_String fmt, xdc_VaList va ) {
    return __FN__(fmt, va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.vsprintf
#else
#define __FN__ xdc_runtime_System_vsprintf__F
#endif
xdc_Int xdc_runtime_System_vsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
    return __FN__(buf, fmt, va);
}
#undef __FN__
#ifdef xdc_runtime_System___ROMPATCH
#define __FN__ xdc_runtime_System_Module__MTAB__C.avsprintf
#else
#define __FN__ xdc_runtime_System_avsprintf__F
#endif
xdc_Int xdc_runtime_System_avsprintf__E( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
    return __FN__(buf, fmt, va);
}
#if xdc_runtime_System___scope != -1
xdc_Int xdc_runtime_System_Module_startup__E( xdc_Int state ) { return xdc_runtime_System_Module_startup__F(state); }
#endif
#undef __FN__
#define __FN__ xdc_runtime_System_abort__F
xdc_Void xdc_runtime_System_abort__R( xdc_String str ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_System_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_atexit__F
xdc_Bool xdc_runtime_System_atexit__R( xdc_runtime_System_AtexitHandler handler ) {
#if xdc_runtime_System___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_atexit__ENTRY_EVT, (xdc_IArg)handler);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(handler);
    xdc_runtime_Log_write1(xdc_runtime_System_atexit__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(handler);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_exit__F
xdc_Void xdc_runtime_System_exit__R( xdc_Int stat ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_System_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_putch__F
xdc_Void xdc_runtime_System_putch__R( xdc_Char ch ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_System_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_flush__F
xdc_Void xdc_runtime_System_flush__R( void ) {
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_System_flush__ENTRY_EVT);
#endif
#if xdc_runtime_System___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_System_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_printf_va__F
xdc_Int xdc_runtime_System_printf_va__R( xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_printf__ENTRY_EVT, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_printf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, __va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_printf_va__F
xdc_Int xdc_runtime_System_printf__R( xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_printf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_aprintf_va__F
xdc_Int xdc_runtime_System_aprintf_va__R( xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__ENTRY_EVT, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, __va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_aprintf_va__F
xdc_Int xdc_runtime_System_aprintf__R( xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_aprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_sprintf_va__F
xdc_Int xdc_runtime_System_sprintf_va__R( xdc_Char buf[], xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_sprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_sprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, __va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_sprintf_va__F
xdc_Int xdc_runtime_System_sprintf__R( xdc_Char buf[], xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_sprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_asprintf_va__F
xdc_Int xdc_runtime_System_asprintf_va__R( xdc_Char buf[], xdc_String fmt, va_list __va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_asprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    xdc_runtime_Log_write1(xdc_runtime_System_asprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, __va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_asprintf_va__F
xdc_Int xdc_runtime_System_asprintf__R( xdc_Char buf[], xdc_String fmt, ... ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
    xdc_Int __ret;
#endif
    va_list __va; va_start(__va, fmt);
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    xdc_runtime_Log_write1(xdc_runtime_System_asprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    __ret = __FN__(buf, fmt, __va);
    va_end(__va);
    return __ret;
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_vprintf__F
xdc_Int xdc_runtime_System_vprintf__R( xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_vprintf__ENTRY_EVT, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_vprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_avprintf__F
xdc_Int xdc_runtime_System_avprintf__R( xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write2(xdc_runtime_System_avprintf__ENTRY_EVT, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_avprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(fmt, va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_vsprintf__F
xdc_Int xdc_runtime_System_vsprintf__R( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_System_vsprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_vsprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, va);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_System_avsprintf__F
xdc_Int xdc_runtime_System_avsprintf__R( xdc_Char buf[], xdc_String fmt, xdc_VaList va ) {
#if xdc_runtime_System___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_System___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_System_avsprintf__ENTRY_EVT, (xdc_IArg)buf, (xdc_IArg)fmt, (xdc_IArg)va);
#endif
#if xdc_runtime_System___L_EXIT
    __ret = __FN__(buf, fmt, va);
    xdc_runtime_Log_write1(xdc_runtime_System_avsprintf__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(buf, fmt, va);
#endif
}

#if defined(xdc_runtime_System___EXPORT) && defined(__ti__)
#if xdc_runtime_System___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_System_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_System_abort__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_atexit__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_exit__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_putch__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_flush__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_printf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_printf_va__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_aprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_aprintf_va__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_sprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_sprintf_va__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_asprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_asprintf_va__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_vprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_avprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_vsprintf__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_System_avsprintf__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_System___scope != -1
xdc_Bool xdc_runtime_System_Module__startupDone__S(void) {

    return xdc_runtime_System_Module__startupDone__F();
}
#endif /* xdc_runtime_System___scope */

#endif /* xdc_runtime_System___used */

#ifdef xdc_runtime_SysStd___used
/*
 *  ======== module SysStd ========
 *  Do not modify this file; it is generated from the specification SysStd.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_SysStd__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/SysStd.h>
#undef __nested__
#else
#include <xdc/runtime/SysStd.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysStd___LOGOBJ) && xdc_runtime_SysStd___DGSINCL & 0x1
#define xdc_runtime_SysStd___L_ENTRY 1
#else
#define xdc_runtime_SysStd___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysStd___LOGOBJ) && xdc_runtime_SysStd___DGSINCL & 0x2
#define xdc_runtime_SysStd___L_EXIT 1
#else
#define xdc_runtime_SysStd___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysStd___LOGOBJ) && xdc_runtime_SysStd___DGSINCL & 0x4
#define xdc_runtime_SysStd___L_LIFECYCLE 1
#else
#define xdc_runtime_SysStd___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_SysStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_SysStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_SysStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_SysStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_SysStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_SysStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_SysStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_SysStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_SysStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_SysStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_SysStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_SysStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_SysStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_SysStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_SysStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_SysStd_Module_GateProxy_query
#if xdc_runtime_SysStd___scope != -1 || defined(xdc_runtime_SysStd_abort__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysStd_abort__PATCH
#define __FN__ xdc_runtime_SysStd_abort__PATCH
#else
#define __FN__ xdc_runtime_SysStd_abort__F
#endif
xdc_Void xdc_runtime_SysStd_abort__E( xdc_String str ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#endif
#if xdc_runtime_SysStd___scope != -1 || defined(xdc_runtime_SysStd_exit__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysStd_exit__PATCH
#define __FN__ xdc_runtime_SysStd_exit__PATCH
#else
#define __FN__ xdc_runtime_SysStd_exit__F
#endif
xdc_Void xdc_runtime_SysStd_exit__E( xdc_Int stat ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#endif
#if xdc_runtime_SysStd___scope != -1 || defined(xdc_runtime_SysStd_flush__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysStd_flush__PATCH
#define __FN__ xdc_runtime_SysStd_flush__PATCH
#else
#define __FN__ xdc_runtime_SysStd_flush__F
#endif
xdc_Void xdc_runtime_SysStd_flush__E( void ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysStd_flush__ENTRY_EVT);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysStd_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#endif
#if xdc_runtime_SysStd___scope != -1 || defined(xdc_runtime_SysStd_putch__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysStd_putch__PATCH
#define __FN__ xdc_runtime_SysStd_putch__PATCH
#else
#define __FN__ xdc_runtime_SysStd_putch__F
#endif
xdc_Void xdc_runtime_SysStd_putch__E( xdc_Char ch ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#endif
#if xdc_runtime_SysStd___scope != -1 || defined(xdc_runtime_SysStd_ready__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysStd_ready__PATCH
#define __FN__ xdc_runtime_SysStd_ready__PATCH
#else
#define __FN__ xdc_runtime_SysStd_ready__F
#endif
xdc_Bool xdc_runtime_SysStd_ready__E( void ) {
#if xdc_runtime_SysStd___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysStd_ready__ENTRY_EVT);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysStd_ready__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif

#if defined(xdc_runtime_SysStd___EXPORT) && defined(__ti__)
#if xdc_runtime_SysStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_abort__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_exit__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_flush__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_putch__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_ready__E);
#endif

#if defined(xdc_runtime_SysStd___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_SysStd_Module__diagsEnabled xdc_runtime_SysStd_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__diagsIncluded xdc_runtime_SysStd_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__diagsMask xdc_runtime_SysStd_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__gateObj xdc_runtime_SysStd_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__gatePrms xdc_runtime_SysStd_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__id xdc_runtime_SysStd_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__loggerDefined xdc_runtime_SysStd_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__loggerObj xdc_runtime_SysStd_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__loggerFxn4 xdc_runtime_SysStd_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__loggerFxn8 xdc_runtime_SysStd_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Module__startupDoneFxn xdc_runtime_SysStd_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Object__count xdc_runtime_SysStd_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Object__heap xdc_runtime_SysStd_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Object__sizeof xdc_runtime_SysStd_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysStd_Object__table xdc_runtime_SysStd_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_SysStd_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysStd_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysStd_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysStd_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysStd_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysStd_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysStd_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysStd_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_abort__E( xdc_String str ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_exit__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_flush__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_putch__E( xdc_Char ch ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysStd_ready__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_abort__E( xdc_String str ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_exit__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_flush__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysStd_putch__E( xdc_Char ch ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysStd_ready__E( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_SysStd___ROMPATCH
__FAR__ xdc_runtime_SysStd_Module__MTAB__C__qual xdc_runtime_SysStd_MTab__ xdc_runtime_SysStd_Module__MTAB__C = {
#if xdc_runtime_SysStd___scope == -1
    xdc_runtime_SysStd_abort__E,
    xdc_runtime_SysStd_exit__E,
    xdc_runtime_SysStd_flush__E,
    xdc_runtime_SysStd_putch__E,
    xdc_runtime_SysStd_ready__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_SysStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_SysStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_SysStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_SysStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_SysStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_SysStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_SysStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_SysStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_SysStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_SysStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_SysStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_SysStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_SysStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_SysStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_SysStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_SysStd_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_SysStd___ROMPATCH
#define __FN__ xdc_runtime_SysStd_Module__MTAB__C.abort
#else
#define __FN__ xdc_runtime_SysStd_abort__F
#endif
xdc_Void xdc_runtime_SysStd_abort__E( xdc_String str ) {
    __FN__(str);
}
#undef __FN__
#ifdef xdc_runtime_SysStd___ROMPATCH
#define __FN__ xdc_runtime_SysStd_Module__MTAB__C.exit
#else
#define __FN__ xdc_runtime_SysStd_exit__F
#endif
xdc_Void xdc_runtime_SysStd_exit__E( xdc_Int stat ) {
    __FN__(stat);
}
#undef __FN__
#ifdef xdc_runtime_SysStd___ROMPATCH
#define __FN__ xdc_runtime_SysStd_Module__MTAB__C.flush
#else
#define __FN__ xdc_runtime_SysStd_flush__F
#endif
xdc_Void xdc_runtime_SysStd_flush__E( void ) {
    __FN__();
}
#undef __FN__
#ifdef xdc_runtime_SysStd___ROMPATCH
#define __FN__ xdc_runtime_SysStd_Module__MTAB__C.putch
#else
#define __FN__ xdc_runtime_SysStd_putch__F
#endif
xdc_Void xdc_runtime_SysStd_putch__E( xdc_Char ch ) {
    __FN__(ch);
}
#undef __FN__
#ifdef xdc_runtime_SysStd___ROMPATCH
#define __FN__ xdc_runtime_SysStd_Module__MTAB__C.ready
#else
#define __FN__ xdc_runtime_SysStd_ready__F
#endif
xdc_Bool xdc_runtime_SysStd_ready__E( void ) {
    return __FN__();
}
#undef __FN__
#define __FN__ xdc_runtime_SysStd_abort__F
xdc_Void xdc_runtime_SysStd_abort__R( xdc_String str ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysStd_exit__F
xdc_Void xdc_runtime_SysStd_exit__R( xdc_Int stat ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysStd_flush__F
xdc_Void xdc_runtime_SysStd_flush__R( void ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysStd_flush__ENTRY_EVT);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysStd_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysStd_putch__F
xdc_Void xdc_runtime_SysStd_putch__R( xdc_Char ch ) {
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysStd_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_SysStd_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysStd_ready__F
xdc_Bool xdc_runtime_SysStd_ready__R( void ) {
#if xdc_runtime_SysStd___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_SysStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysStd_ready__ENTRY_EVT);
#endif
#if xdc_runtime_SysStd___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysStd_ready__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}

#if defined(xdc_runtime_SysStd___EXPORT) && defined(__ti__)
#if xdc_runtime_SysStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_abort__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_exit__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_flush__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_putch__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysStd_ready__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_SysStd___scope != -1
#ifdef xdc_runtime_SysStd___FXNTAB
#ifndef __isrom__
#if xdc_runtime_SysStd___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_SysStd___scope == -1 || !defined(__xdc_runtime_ISystemSupport_Interface__BASE__CR)
#ifndef __xdc_runtime_ISystemSupport_Interface__BASE__C
#define __xdc_runtime_ISystemSupport_Interface__BASE__C
__FAR__ xdc_runtime_ISystemSupport_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ISystemSupport_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_SysStd_Module__FXNS__C, ".const:xdc_runtime_SysStd_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_SysStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_SysStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_SysStd_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_SysStd_Fxns__ xdc_runtime_SysStd_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ISystemSupport_Interface__BASE__C,
    &xdc_runtime_SysStd_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_SysStd_abort__E,
    xdc_runtime_SysStd_exit__E,
    xdc_runtime_SysStd_flush__E,
    xdc_runtime_SysStd_putch__E,
    xdc_runtime_SysStd_ready__E,
    {

        /* create__ */ 0,
        /* delete__ */ 0,
        /* label__ */ 0,
        xdc_runtime_SysStd_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_SysStd_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_SysStd___scope */

#endif /* xdc_runtime_SysStd___used */

#ifdef xdc_runtime_SysMin___used
/*
 *  ======== module SysMin ========
 *  Do not modify this file; it is generated from the specification SysMin.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_SysMin__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/SysMin.h>
#undef __nested__
#else
#include <xdc/runtime/SysMin.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysMin___LOGOBJ) && xdc_runtime_SysMin___DGSINCL & 0x1
#define xdc_runtime_SysMin___L_ENTRY 1
#else
#define xdc_runtime_SysMin___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysMin___LOGOBJ) && xdc_runtime_SysMin___DGSINCL & 0x2
#define xdc_runtime_SysMin___L_EXIT 1
#else
#define xdc_runtime_SysMin___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_SysMin___LOGOBJ) && xdc_runtime_SysMin___DGSINCL & 0x4
#define xdc_runtime_SysMin___L_LIFECYCLE 1
#else
#define xdc_runtime_SysMin___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_SysMin_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_SysMin_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_SysMin_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_SysMin_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_SysMin_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_SysMin_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_SysMin_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_SysMin_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_SysMin_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_SysMin_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_SysMin_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_SysMin_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_SysMin_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_SysMin_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_SysMin_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_SysMin_Module_GateProxy_query
#if xdc_runtime_SysMin___scope != -1 || defined(xdc_runtime_SysMin_abort__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysMin_abort__PATCH
#define __FN__ xdc_runtime_SysMin_abort__PATCH
#else
#define __FN__ xdc_runtime_SysMin_abort__F
#endif
xdc_Void xdc_runtime_SysMin_abort__E( xdc_String str ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#endif
#if xdc_runtime_SysMin___scope != -1 || defined(xdc_runtime_SysMin_exit__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysMin_exit__PATCH
#define __FN__ xdc_runtime_SysMin_exit__PATCH
#else
#define __FN__ xdc_runtime_SysMin_exit__F
#endif
xdc_Void xdc_runtime_SysMin_exit__E( xdc_Int stat ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#endif
#if xdc_runtime_SysMin___scope != -1 || defined(xdc_runtime_SysMin_flush__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysMin_flush__PATCH
#define __FN__ xdc_runtime_SysMin_flush__PATCH
#else
#define __FN__ xdc_runtime_SysMin_flush__F
#endif
xdc_Void xdc_runtime_SysMin_flush__E( void ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysMin_flush__ENTRY_EVT);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysMin_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#endif
#if xdc_runtime_SysMin___scope != -1 || defined(xdc_runtime_SysMin_putch__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysMin_putch__PATCH
#define __FN__ xdc_runtime_SysMin_putch__PATCH
#else
#define __FN__ xdc_runtime_SysMin_putch__F
#endif
xdc_Void xdc_runtime_SysMin_putch__E( xdc_Char ch ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#endif
#if xdc_runtime_SysMin___scope != -1 || defined(xdc_runtime_SysMin_ready__PATCH)
#undef __FN__
#ifdef xdc_runtime_SysMin_ready__PATCH
#define __FN__ xdc_runtime_SysMin_ready__PATCH
#else
#define __FN__ xdc_runtime_SysMin_ready__F
#endif
xdc_Bool xdc_runtime_SysMin_ready__E( void ) {
#if xdc_runtime_SysMin___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysMin_ready__ENTRY_EVT);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysMin_ready__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_SysMin___scope != -1
xdc_Int xdc_runtime_SysMin_Module_startup__E( xdc_Int state ) { return xdc_runtime_SysMin_Module_startup__F(state); }
#endif

#if defined(xdc_runtime_SysMin___EXPORT) && defined(__ti__)
#if xdc_runtime_SysMin___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_abort__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_exit__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_flush__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_putch__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_ready__E);
#endif

#if defined(xdc_runtime_SysMin___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_SysMin_Module__diagsEnabled xdc_runtime_SysMin_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__diagsIncluded xdc_runtime_SysMin_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__diagsMask xdc_runtime_SysMin_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__gateObj xdc_runtime_SysMin_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__gatePrms xdc_runtime_SysMin_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__id xdc_runtime_SysMin_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__loggerDefined xdc_runtime_SysMin_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__loggerObj xdc_runtime_SysMin_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__loggerFxn4 xdc_runtime_SysMin_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__loggerFxn8 xdc_runtime_SysMin_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Module__startupDoneFxn xdc_runtime_SysMin_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Object__count xdc_runtime_SysMin_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Object__heap xdc_runtime_SysMin_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Object__sizeof xdc_runtime_SysMin_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_Object__table xdc_runtime_SysMin_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_bufSize xdc_runtime_SysMin_bufSize__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_flushAtExit xdc_runtime_SysMin_flushAtExit__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_outputFxn xdc_runtime_SysMin_outputFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_SysMin_outputFunc xdc_runtime_SysMin_outputFunc__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_SysMin_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysMin_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysMin_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysMin_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysMin_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysMin_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysMin_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_SysMin_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_abort__E( xdc_String str ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_exit__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_flush__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_putch__E( xdc_Char ch ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysMin_ready__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_abort__E( xdc_String str ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_exit__E( xdc_Int stat ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_flush__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_SysMin_putch__E( xdc_Char ch ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_SysMin_ready__E( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_SysMin___ROMPATCH
__FAR__ xdc_runtime_SysMin_Module__MTAB__C__qual xdc_runtime_SysMin_MTab__ xdc_runtime_SysMin_Module__MTAB__C = {
#if xdc_runtime_SysMin___scope == -1
    xdc_runtime_SysMin_abort__E,
    xdc_runtime_SysMin_exit__E,
    xdc_runtime_SysMin_flush__E,
    xdc_runtime_SysMin_putch__E,
    xdc_runtime_SysMin_ready__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_SysMin_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_SysMin_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_SysMin_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_SysMin_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_SysMin_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_SysMin_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_SysMin_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_SysMin_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_SysMin_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_SysMin_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_SysMin_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_SysMin_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_SysMin_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_SysMin_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_SysMin_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_SysMin_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_SysMin___ROMPATCH
#define __FN__ xdc_runtime_SysMin_Module__MTAB__C.abort
#else
#define __FN__ xdc_runtime_SysMin_abort__F
#endif
xdc_Void xdc_runtime_SysMin_abort__E( xdc_String str ) {
    __FN__(str);
}
#undef __FN__
#ifdef xdc_runtime_SysMin___ROMPATCH
#define __FN__ xdc_runtime_SysMin_Module__MTAB__C.exit
#else
#define __FN__ xdc_runtime_SysMin_exit__F
#endif
xdc_Void xdc_runtime_SysMin_exit__E( xdc_Int stat ) {
    __FN__(stat);
}
#undef __FN__
#ifdef xdc_runtime_SysMin___ROMPATCH
#define __FN__ xdc_runtime_SysMin_Module__MTAB__C.flush
#else
#define __FN__ xdc_runtime_SysMin_flush__F
#endif
xdc_Void xdc_runtime_SysMin_flush__E( void ) {
    __FN__();
}
#undef __FN__
#ifdef xdc_runtime_SysMin___ROMPATCH
#define __FN__ xdc_runtime_SysMin_Module__MTAB__C.putch
#else
#define __FN__ xdc_runtime_SysMin_putch__F
#endif
xdc_Void xdc_runtime_SysMin_putch__E( xdc_Char ch ) {
    __FN__(ch);
}
#undef __FN__
#ifdef xdc_runtime_SysMin___ROMPATCH
#define __FN__ xdc_runtime_SysMin_Module__MTAB__C.ready
#else
#define __FN__ xdc_runtime_SysMin_ready__F
#endif
xdc_Bool xdc_runtime_SysMin_ready__E( void ) {
    return __FN__();
}
#if xdc_runtime_SysMin___scope != -1
xdc_Int xdc_runtime_SysMin_Module_startup__E( xdc_Int state ) { return xdc_runtime_SysMin_Module_startup__F(state); }
#endif
#undef __FN__
#define __FN__ xdc_runtime_SysMin_abort__F
xdc_Void xdc_runtime_SysMin_abort__R( xdc_String str ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_abort__ENTRY_EVT, (xdc_IArg)str);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(str);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_abort__EXIT_EVT, 0);
#else
    __FN__(str);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysMin_exit__F
xdc_Void xdc_runtime_SysMin_exit__R( xdc_Int stat ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_exit__ENTRY_EVT, (xdc_IArg)stat);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(stat);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_exit__EXIT_EVT, 0);
#else
    __FN__(stat);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysMin_flush__F
xdc_Void xdc_runtime_SysMin_flush__R( void ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysMin_flush__ENTRY_EVT);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysMin_flush__EXIT_EVT, 0);
#else
    __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysMin_putch__F
xdc_Void xdc_runtime_SysMin_putch__R( xdc_Char ch ) {
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_SysMin_putch__ENTRY_EVT, (xdc_IArg)ch);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __FN__(ch);
    xdc_runtime_Log_write1(xdc_runtime_SysMin_putch__EXIT_EVT, 0);
#else
    __FN__(ch);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_SysMin_ready__F
xdc_Bool xdc_runtime_SysMin_ready__R( void ) {
#if xdc_runtime_SysMin___L_EXIT
    xdc_Bool __ret;
#else
#endif
#if xdc_runtime_SysMin___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_SysMin_ready__ENTRY_EVT);
#endif
#if xdc_runtime_SysMin___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_SysMin_ready__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}

#if defined(xdc_runtime_SysMin___EXPORT) && defined(__ti__)
#if xdc_runtime_SysMin___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_Module__startupDone__S);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_Module_startup__E);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_abort__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_exit__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_flush__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_putch__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_SysMin_ready__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_SysMin___scope != -1
#ifdef xdc_runtime_SysMin___FXNTAB
#ifndef __isrom__
#if xdc_runtime_SysMin___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_SysMin___scope == -1 || !defined(__xdc_runtime_ISystemSupport_Interface__BASE__CR)
#ifndef __xdc_runtime_ISystemSupport_Interface__BASE__C
#define __xdc_runtime_ISystemSupport_Interface__BASE__C
__FAR__ xdc_runtime_ISystemSupport_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ISystemSupport_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_SysMin_Module__FXNS__C, ".const:xdc_runtime_SysMin_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_SysMin_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_SysMin_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_SysMin_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_SysMin_Fxns__ xdc_runtime_SysMin_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ISystemSupport_Interface__BASE__C,
    &xdc_runtime_SysMin_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_SysMin_abort__E,
    xdc_runtime_SysMin_exit__E,
    xdc_runtime_SysMin_flush__E,
    xdc_runtime_SysMin_putch__E,
    xdc_runtime_SysMin_ready__E,
    {

        /* create__ */ 0,
        /* delete__ */ 0,
        /* label__ */ 0,
        xdc_runtime_SysMin_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_SysMin_Module__startupDone__S(void) {

    return xdc_runtime_SysMin_Module__startupDone__F();
}
#endif /* xdc_runtime_SysMin___scope */

#endif /* xdc_runtime_SysMin___used */

#ifdef xdc_runtime_Text___used
/*
 *  ======== module Text ========
 *  Do not modify this file; it is generated from the specification Text.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Text__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Text.h>
#undef __nested__
#else
#include <xdc/runtime/Text.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Text___LOGOBJ) && xdc_runtime_Text___DGSINCL & 0x1
#define xdc_runtime_Text___L_ENTRY 1
#else
#define xdc_runtime_Text___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Text___LOGOBJ) && xdc_runtime_Text___DGSINCL & 0x2
#define xdc_runtime_Text___L_EXIT 1
#else
#define xdc_runtime_Text___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Text___LOGOBJ) && xdc_runtime_Text___DGSINCL & 0x4
#define xdc_runtime_Text___L_LIFECYCLE 1
#else
#define xdc_runtime_Text___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Text_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Text_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Text_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Text_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Text_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Text_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Text_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Text_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Text_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Text_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Text_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Text_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Text_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Text_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Text_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Text_Module_GateProxy_query
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_cordText__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_cordText__PATCH
#define __FN__ xdc_runtime_Text_cordText__PATCH
#else
#define __FN__ xdc_runtime_Text_cordText__F
#endif
xdc_String xdc_runtime_Text_cordText__E( xdc_runtime_Text_CordAddr cord ) {
#if xdc_runtime_Text___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Text_cordText__ENTRY_EVT, (xdc_IArg)cord);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(cord);
    xdc_runtime_Log_write1(xdc_runtime_Text_cordText__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(cord);
#endif
}
#endif
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_ropeText__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_ropeText__PATCH
#define __FN__ xdc_runtime_Text_ropeText__PATCH
#else
#define __FN__ xdc_runtime_Text_ropeText__F
#endif
xdc_String xdc_runtime_Text_ropeText__E( xdc_runtime_Text_RopeId rope ) {
#if xdc_runtime_Text___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Text_ropeText__ENTRY_EVT, (xdc_IArg)rope);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(rope);
    xdc_runtime_Log_write1(xdc_runtime_Text_ropeText__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(rope);
#endif
}
#endif
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_matchRope__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_matchRope__PATCH
#define __FN__ xdc_runtime_Text_matchRope__PATCH
#else
#define __FN__ xdc_runtime_Text_matchRope__F
#endif
xdc_Int xdc_runtime_Text_matchRope__E( xdc_runtime_Text_RopeId rope, xdc_String pat, xdc_Int* lenp ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_matchRope__ENTRY_EVT, (xdc_IArg)rope, (xdc_IArg)pat, (xdc_IArg)lenp);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(rope, pat, lenp);
    xdc_runtime_Log_write1(xdc_runtime_Text_matchRope__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(rope, pat, lenp);
#endif
}
#endif
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_putLab__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_putLab__PATCH
#define __FN__ xdc_runtime_Text_putLab__PATCH
#else
#define __FN__ xdc_runtime_Text_putLab__F
#endif
xdc_Int xdc_runtime_Text_putLab__E( xdc_runtime_Types_Label* lab, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putLab__ENTRY_EVT, (xdc_IArg)lab, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(lab, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putLab__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(lab, bufp, len);
#endif
}
#endif
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_putMod__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_putMod__PATCH
#define __FN__ xdc_runtime_Text_putMod__PATCH
#else
#define __FN__ xdc_runtime_Text_putMod__F
#endif
xdc_Int xdc_runtime_Text_putMod__E( xdc_runtime_Types_ModuleId mid, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putMod__ENTRY_EVT, (xdc_IArg)mid, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(mid, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putMod__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(mid, bufp, len);
#endif
}
#endif
#if xdc_runtime_Text___scope != -1 || defined(xdc_runtime_Text_putSite__PATCH)
#undef __FN__
#ifdef xdc_runtime_Text_putSite__PATCH
#define __FN__ xdc_runtime_Text_putSite__PATCH
#else
#define __FN__ xdc_runtime_Text_putSite__F
#endif
xdc_Int xdc_runtime_Text_putSite__E( xdc_runtime_Types_Site* site, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putSite__ENTRY_EVT, (xdc_IArg)site, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(site, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putSite__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(site, bufp, len);
#endif
}
#endif

#if defined(xdc_runtime_Text___EXPORT) && defined(__ti__)
#if xdc_runtime_Text___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_cordText__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_ropeText__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_matchRope__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putLab__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putMod__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putSite__E);
#endif

#if defined(xdc_runtime_Text___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Text_Module__diagsEnabled xdc_runtime_Text_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__diagsIncluded xdc_runtime_Text_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__diagsMask xdc_runtime_Text_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__gateObj xdc_runtime_Text_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__gatePrms xdc_runtime_Text_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__id xdc_runtime_Text_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__loggerDefined xdc_runtime_Text_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__loggerObj xdc_runtime_Text_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__loggerFxn4 xdc_runtime_Text_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__loggerFxn8 xdc_runtime_Text_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Module__startupDoneFxn xdc_runtime_Text_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Object__count xdc_runtime_Text_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Object__heap xdc_runtime_Text_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Object__sizeof xdc_runtime_Text_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_Object__table xdc_runtime_Text_Object__table__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_nameUnknown xdc_runtime_Text_nameUnknown__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_nameEmpty xdc_runtime_Text_nameEmpty__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_nameStatic xdc_runtime_Text_nameStatic__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_isLoaded xdc_runtime_Text_isLoaded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_charTab xdc_runtime_Text_charTab__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_nodeTab xdc_runtime_Text_nodeTab__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_charCnt xdc_runtime_Text_charCnt__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_nodeCnt xdc_runtime_Text_nodeCnt__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_visitRopeFxn xdc_runtime_Text_visitRopeFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Text_visitRopeFxn2 xdc_runtime_Text_visitRopeFxn2__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Text_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Text_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Text_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Text_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Text_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Text_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Text_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Text_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Text_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Text_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Text_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_String xdc_runtime_Text_cordText__E( xdc_runtime_Text_CordAddr cord ) __attribute__ ((externally_visible));
xdc_String xdc_runtime_Text_ropeText__E( xdc_runtime_Text_RopeId rope ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_Text_matchRope__E( xdc_runtime_Text_RopeId rope, xdc_String pat, xdc_Int* lenp ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_Text_putLab__E( xdc_runtime_Types_Label* lab, xdc_Char** bufp, xdc_Int len ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_Text_putMod__E( xdc_runtime_Types_ModuleId mid, xdc_Char** bufp, xdc_Int len ) __attribute__ ((externally_visible));
xdc_Int xdc_runtime_Text_putSite__E( xdc_runtime_Types_Site* site, xdc_Char** bufp, xdc_Int len ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Text___ROMPATCH
__FAR__ xdc_runtime_Text_Module__MTAB__C__qual xdc_runtime_Text_MTab__ xdc_runtime_Text_Module__MTAB__C = {
#if xdc_runtime_Text___scope == -1
    xdc_runtime_Text_cordText__E,
    xdc_runtime_Text_ropeText__E,
    xdc_runtime_Text_matchRope__E,
    xdc_runtime_Text_putLab__E,
    xdc_runtime_Text_putMod__E,
    xdc_runtime_Text_putSite__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Text_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Text_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Text_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Text_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Text_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Text_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Text_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Text_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Text_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Text_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Text_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Text_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Text_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Text_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Text_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Text_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.cordText
#else
#define __FN__ xdc_runtime_Text_cordText__F
#endif
xdc_String xdc_runtime_Text_cordText__E( xdc_runtime_Text_CordAddr cord ) {
    return __FN__(cord);
}
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.ropeText
#else
#define __FN__ xdc_runtime_Text_ropeText__F
#endif
xdc_String xdc_runtime_Text_ropeText__E( xdc_runtime_Text_RopeId rope ) {
    return __FN__(rope);
}
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.matchRope
#else
#define __FN__ xdc_runtime_Text_matchRope__F
#endif
xdc_Int xdc_runtime_Text_matchRope__E( xdc_runtime_Text_RopeId rope, xdc_String pat, xdc_Int* lenp ) {
    return __FN__(rope, pat, lenp);
}
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.putLab
#else
#define __FN__ xdc_runtime_Text_putLab__F
#endif
xdc_Int xdc_runtime_Text_putLab__E( xdc_runtime_Types_Label* lab, xdc_Char** bufp, xdc_Int len ) {
    return __FN__(lab, bufp, len);
}
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.putMod
#else
#define __FN__ xdc_runtime_Text_putMod__F
#endif
xdc_Int xdc_runtime_Text_putMod__E( xdc_runtime_Types_ModuleId mid, xdc_Char** bufp, xdc_Int len ) {
    return __FN__(mid, bufp, len);
}
#undef __FN__
#ifdef xdc_runtime_Text___ROMPATCH
#define __FN__ xdc_runtime_Text_Module__MTAB__C.putSite
#else
#define __FN__ xdc_runtime_Text_putSite__F
#endif
xdc_Int xdc_runtime_Text_putSite__E( xdc_runtime_Types_Site* site, xdc_Char** bufp, xdc_Int len ) {
    return __FN__(site, bufp, len);
}
#undef __FN__
#define __FN__ xdc_runtime_Text_cordText__F
xdc_String xdc_runtime_Text_cordText__R( xdc_runtime_Text_CordAddr cord ) {
#if xdc_runtime_Text___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Text_cordText__ENTRY_EVT, (xdc_IArg)cord);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(cord);
    xdc_runtime_Log_write1(xdc_runtime_Text_cordText__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(cord);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Text_ropeText__F
xdc_String xdc_runtime_Text_ropeText__R( xdc_runtime_Text_RopeId rope ) {
#if xdc_runtime_Text___L_EXIT
    xdc_String __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Text_ropeText__ENTRY_EVT, (xdc_IArg)rope);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(rope);
    xdc_runtime_Log_write1(xdc_runtime_Text_ropeText__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(rope);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Text_matchRope__F
xdc_Int xdc_runtime_Text_matchRope__R( xdc_runtime_Text_RopeId rope, xdc_String pat, xdc_Int* lenp ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_matchRope__ENTRY_EVT, (xdc_IArg)rope, (xdc_IArg)pat, (xdc_IArg)lenp);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(rope, pat, lenp);
    xdc_runtime_Log_write1(xdc_runtime_Text_matchRope__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(rope, pat, lenp);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Text_putLab__F
xdc_Int xdc_runtime_Text_putLab__R( xdc_runtime_Types_Label* lab, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putLab__ENTRY_EVT, (xdc_IArg)lab, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(lab, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putLab__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(lab, bufp, len);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Text_putMod__F
xdc_Int xdc_runtime_Text_putMod__R( xdc_runtime_Types_ModuleId mid, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putMod__ENTRY_EVT, (xdc_IArg)mid, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(mid, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putMod__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(mid, bufp, len);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Text_putSite__F
xdc_Int xdc_runtime_Text_putSite__R( xdc_runtime_Types_Site* site, xdc_Char** bufp, xdc_Int len ) {
#if xdc_runtime_Text___L_EXIT
    xdc_Int __ret;
#else
#endif
#if xdc_runtime_Text___L_ENTRY
    xdc_runtime_Log_write3(xdc_runtime_Text_putSite__ENTRY_EVT, (xdc_IArg)site, (xdc_IArg)bufp, (xdc_IArg)len);
#endif
#if xdc_runtime_Text___L_EXIT
    __ret = __FN__(site, bufp, len);
    xdc_runtime_Log_write1(xdc_runtime_Text_putSite__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__(site, bufp, len);
#endif
}

#if defined(xdc_runtime_Text___EXPORT) && defined(__ti__)
#if xdc_runtime_Text___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_cordText__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_ropeText__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_matchRope__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putLab__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putMod__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Text_putSite__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Text___scope != -1
xdc_Bool xdc_runtime_Text_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Text___scope */

#endif /* xdc_runtime_Text___used */

#ifdef xdc_runtime_Timestamp___used
/*
 *  ======== module Timestamp ========
 *  Do not modify this file; it is generated from the specification Timestamp.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Timestamp__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Timestamp.h>
#undef __nested__
#else
#include <xdc/runtime/Timestamp.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Timestamp___LOGOBJ) && xdc_runtime_Timestamp___DGSINCL & 0x1
#define xdc_runtime_Timestamp___L_ENTRY 1
#else
#define xdc_runtime_Timestamp___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Timestamp___LOGOBJ) && xdc_runtime_Timestamp___DGSINCL & 0x2
#define xdc_runtime_Timestamp___L_EXIT 1
#else
#define xdc_runtime_Timestamp___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Timestamp___LOGOBJ) && xdc_runtime_Timestamp___DGSINCL & 0x4
#define xdc_runtime_Timestamp___L_LIFECYCLE 1
#else
#define xdc_runtime_Timestamp___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Timestamp_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Timestamp_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Timestamp_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Timestamp_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Timestamp_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Timestamp_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Timestamp_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Timestamp_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Timestamp_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Timestamp_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Timestamp_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Timestamp_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Timestamp_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Timestamp_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Timestamp_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Timestamp_Module_GateProxy_query
#if xdc_runtime_Timestamp___scope != -1 || defined(xdc_runtime_Timestamp_get32__PATCH)
#undef __FN__
#ifdef xdc_runtime_Timestamp_get32__PATCH
#define __FN__ xdc_runtime_Timestamp_get32__PATCH
#else
#define __FN__ xdc_runtime_Timestamp_get32__F
#endif
xdc_Bits32 xdc_runtime_Timestamp_get32__E( void ) {
#if xdc_runtime_Timestamp___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Timestamp_get32__ENTRY_EVT);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_Timestamp___scope != -1 || defined(xdc_runtime_Timestamp_get64__PATCH)
#undef __FN__
#ifdef xdc_runtime_Timestamp_get64__PATCH
#define __FN__ xdc_runtime_Timestamp_get64__PATCH
#else
#define __FN__ xdc_runtime_Timestamp_get64__F
#endif
xdc_Void xdc_runtime_Timestamp_get64__E( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#endif
#if xdc_runtime_Timestamp___scope != -1 || defined(xdc_runtime_Timestamp_getFreq__PATCH)
#undef __FN__
#ifdef xdc_runtime_Timestamp_getFreq__PATCH
#define __FN__ xdc_runtime_Timestamp_getFreq__PATCH
#else
#define __FN__ xdc_runtime_Timestamp_getFreq__F
#endif
xdc_Void xdc_runtime_Timestamp_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}
#endif

#if defined(xdc_runtime_Timestamp___EXPORT) && defined(__ti__)
#if xdc_runtime_Timestamp___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_get32__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_get64__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_getFreq__E);
#endif

#if defined(xdc_runtime_Timestamp___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Timestamp_Module__diagsEnabled xdc_runtime_Timestamp_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__diagsIncluded xdc_runtime_Timestamp_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__diagsMask xdc_runtime_Timestamp_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__gateObj xdc_runtime_Timestamp_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__gatePrms xdc_runtime_Timestamp_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__id xdc_runtime_Timestamp_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__loggerDefined xdc_runtime_Timestamp_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__loggerObj xdc_runtime_Timestamp_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__loggerFxn4 xdc_runtime_Timestamp_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__loggerFxn8 xdc_runtime_Timestamp_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Module__startupDoneFxn xdc_runtime_Timestamp_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Object__count xdc_runtime_Timestamp_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Object__heap xdc_runtime_Timestamp_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Object__sizeof xdc_runtime_Timestamp_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Timestamp_Object__table xdc_runtime_Timestamp_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Timestamp_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Timestamp_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Timestamp_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Timestamp_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Timestamp_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Timestamp_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Timestamp_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Timestamp_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Timestamp_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Timestamp_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Timestamp_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Bits32 xdc_runtime_Timestamp_get32__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Timestamp_get64__E( xdc_runtime_Types_Timestamp64* result ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Timestamp_getFreq__E( xdc_runtime_Types_FreqHz* freq ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Timestamp___ROMPATCH
__FAR__ xdc_runtime_Timestamp_Module__MTAB__C__qual xdc_runtime_Timestamp_MTab__ xdc_runtime_Timestamp_Module__MTAB__C = {
#if xdc_runtime_Timestamp___scope == -1
    xdc_runtime_Timestamp_get32__E,
    xdc_runtime_Timestamp_get64__E,
    xdc_runtime_Timestamp_getFreq__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Timestamp_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Timestamp_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Timestamp_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Timestamp_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Timestamp_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Timestamp_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Timestamp_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Timestamp_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Timestamp_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Timestamp_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Timestamp_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Timestamp_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Timestamp_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Timestamp_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Timestamp_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Timestamp_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_Timestamp___ROMPATCH
#define __FN__ xdc_runtime_Timestamp_Module__MTAB__C.get32
#else
#define __FN__ xdc_runtime_Timestamp_get32__F
#endif
xdc_Bits32 xdc_runtime_Timestamp_get32__E( void ) {
    return __FN__();
}
#undef __FN__
#ifdef xdc_runtime_Timestamp___ROMPATCH
#define __FN__ xdc_runtime_Timestamp_Module__MTAB__C.get64
#else
#define __FN__ xdc_runtime_Timestamp_get64__F
#endif
xdc_Void xdc_runtime_Timestamp_get64__E( xdc_runtime_Types_Timestamp64* result ) {
    __FN__(result);
}
#undef __FN__
#ifdef xdc_runtime_Timestamp___ROMPATCH
#define __FN__ xdc_runtime_Timestamp_Module__MTAB__C.getFreq
#else
#define __FN__ xdc_runtime_Timestamp_getFreq__F
#endif
xdc_Void xdc_runtime_Timestamp_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
    __FN__(freq);
}
#undef __FN__
#define __FN__ xdc_runtime_Timestamp_get32__F
xdc_Bits32 xdc_runtime_Timestamp_get32__R( void ) {
#if xdc_runtime_Timestamp___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_Timestamp_get32__ENTRY_EVT);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Timestamp_get64__F
xdc_Void xdc_runtime_Timestamp_get64__R( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_Timestamp_getFreq__F
xdc_Void xdc_runtime_Timestamp_getFreq__R( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_Timestamp___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_Timestamp___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_Timestamp_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}

#if defined(xdc_runtime_Timestamp___EXPORT) && defined(__ti__)
#if xdc_runtime_Timestamp___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_get32__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_get64__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_Timestamp_getFreq__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_Timestamp___scope != -1
#ifdef xdc_runtime_Timestamp___FXNTAB
#ifndef __isrom__
#if xdc_runtime_Timestamp___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_Timestamp___scope == -1 || !defined(__xdc_runtime_ITimestampClient_Interface__BASE__CR)
#ifndef __xdc_runtime_ITimestampClient_Interface__BASE__C
#define __xdc_runtime_ITimestampClient_Interface__BASE__C
__FAR__ xdc_runtime_ITimestampClient_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ITimestampClient_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_Timestamp_Module__FXNS__C, ".const:xdc_runtime_Timestamp_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_Timestamp_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_Timestamp_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_Timestamp_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_Timestamp_Fxns__ xdc_runtime_Timestamp_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ITimestampClient_Interface__BASE__C,
    &xdc_runtime_Timestamp_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_Timestamp_get32__E,
    xdc_runtime_Timestamp_get64__E,
    xdc_runtime_Timestamp_getFreq__E,
    {

        /* create__ */ 0,
        /* delete__ */ 0,
        /* label__ */ 0,
        xdc_runtime_Timestamp_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_Timestamp_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Timestamp___scope */

#endif /* xdc_runtime_Timestamp___used */

#ifdef xdc_runtime_TimestampNull___used
/*
 *  ======== module TimestampNull ========
 *  Do not modify this file; it is generated from the specification TimestampNull.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_TimestampNull__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/TimestampNull.h>
#undef __nested__
#else
#include <xdc/runtime/TimestampNull.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampNull___LOGOBJ) && xdc_runtime_TimestampNull___DGSINCL & 0x1
#define xdc_runtime_TimestampNull___L_ENTRY 1
#else
#define xdc_runtime_TimestampNull___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampNull___LOGOBJ) && xdc_runtime_TimestampNull___DGSINCL & 0x2
#define xdc_runtime_TimestampNull___L_EXIT 1
#else
#define xdc_runtime_TimestampNull___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampNull___LOGOBJ) && xdc_runtime_TimestampNull___DGSINCL & 0x4
#define xdc_runtime_TimestampNull___L_LIFECYCLE 1
#else
#define xdc_runtime_TimestampNull___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_TimestampNull_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_TimestampNull_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_TimestampNull_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_TimestampNull_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_TimestampNull_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_TimestampNull_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_TimestampNull_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_TimestampNull_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_TimestampNull_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_TimestampNull_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_TimestampNull_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_TimestampNull_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_TimestampNull_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_TimestampNull_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_TimestampNull_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_TimestampNull_Module_GateProxy_query
#if xdc_runtime_TimestampNull___scope != -1 || defined(xdc_runtime_TimestampNull_get32__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampNull_get32__PATCH
#define __FN__ xdc_runtime_TimestampNull_get32__PATCH
#else
#define __FN__ xdc_runtime_TimestampNull_get32__F
#endif
xdc_Bits32 xdc_runtime_TimestampNull_get32__E( void ) {
#if xdc_runtime_TimestampNull___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_TimestampNull_get32__ENTRY_EVT);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_TimestampNull___scope != -1 || defined(xdc_runtime_TimestampNull_get64__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampNull_get64__PATCH
#define __FN__ xdc_runtime_TimestampNull_get64__PATCH
#else
#define __FN__ xdc_runtime_TimestampNull_get64__F
#endif
xdc_Void xdc_runtime_TimestampNull_get64__E( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#endif
#if xdc_runtime_TimestampNull___scope != -1 || defined(xdc_runtime_TimestampNull_getFreq__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampNull_getFreq__PATCH
#define __FN__ xdc_runtime_TimestampNull_getFreq__PATCH
#else
#define __FN__ xdc_runtime_TimestampNull_getFreq__F
#endif
xdc_Void xdc_runtime_TimestampNull_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}
#endif

#if defined(xdc_runtime_TimestampNull___EXPORT) && defined(__ti__)
#if xdc_runtime_TimestampNull___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_get32__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_get64__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_getFreq__E);
#endif

#if defined(xdc_runtime_TimestampNull___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_TimestampNull_Module__diagsEnabled xdc_runtime_TimestampNull_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__diagsIncluded xdc_runtime_TimestampNull_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__diagsMask xdc_runtime_TimestampNull_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__gateObj xdc_runtime_TimestampNull_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__gatePrms xdc_runtime_TimestampNull_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__id xdc_runtime_TimestampNull_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__loggerDefined xdc_runtime_TimestampNull_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__loggerObj xdc_runtime_TimestampNull_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__loggerFxn4 xdc_runtime_TimestampNull_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__loggerFxn8 xdc_runtime_TimestampNull_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Module__startupDoneFxn xdc_runtime_TimestampNull_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Object__count xdc_runtime_TimestampNull_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Object__heap xdc_runtime_TimestampNull_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Object__sizeof xdc_runtime_TimestampNull_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampNull_Object__table xdc_runtime_TimestampNull_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_TimestampNull_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_TimestampNull_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampNull_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampNull_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampNull_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampNull_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampNull_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampNull_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampNull_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_TimestampNull_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampNull_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Bits32 xdc_runtime_TimestampNull_get32__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampNull_get64__E( xdc_runtime_Types_Timestamp64* result ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampNull_getFreq__E( xdc_runtime_Types_FreqHz* freq ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_TimestampNull___ROMPATCH
__FAR__ xdc_runtime_TimestampNull_Module__MTAB__C__qual xdc_runtime_TimestampNull_MTab__ xdc_runtime_TimestampNull_Module__MTAB__C = {
#if xdc_runtime_TimestampNull___scope == -1
    xdc_runtime_TimestampNull_get32__E,
    xdc_runtime_TimestampNull_get64__E,
    xdc_runtime_TimestampNull_getFreq__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_TimestampNull_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_TimestampNull_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_TimestampNull_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_TimestampNull_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_TimestampNull_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_TimestampNull_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_TimestampNull_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_TimestampNull_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_TimestampNull_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_TimestampNull_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_TimestampNull_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_TimestampNull_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_TimestampNull_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_TimestampNull_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_TimestampNull_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_TimestampNull_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_TimestampNull___ROMPATCH
#define __FN__ xdc_runtime_TimestampNull_Module__MTAB__C.get32
#else
#define __FN__ xdc_runtime_TimestampNull_get32__F
#endif
xdc_Bits32 xdc_runtime_TimestampNull_get32__E( void ) {
    return __FN__();
}
#undef __FN__
#ifdef xdc_runtime_TimestampNull___ROMPATCH
#define __FN__ xdc_runtime_TimestampNull_Module__MTAB__C.get64
#else
#define __FN__ xdc_runtime_TimestampNull_get64__F
#endif
xdc_Void xdc_runtime_TimestampNull_get64__E( xdc_runtime_Types_Timestamp64* result ) {
    __FN__(result);
}
#undef __FN__
#ifdef xdc_runtime_TimestampNull___ROMPATCH
#define __FN__ xdc_runtime_TimestampNull_Module__MTAB__C.getFreq
#else
#define __FN__ xdc_runtime_TimestampNull_getFreq__F
#endif
xdc_Void xdc_runtime_TimestampNull_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
    __FN__(freq);
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampNull_get32__F
xdc_Bits32 xdc_runtime_TimestampNull_get32__R( void ) {
#if xdc_runtime_TimestampNull___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_TimestampNull_get32__ENTRY_EVT);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampNull_get64__F
xdc_Void xdc_runtime_TimestampNull_get64__R( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampNull_getFreq__F
xdc_Void xdc_runtime_TimestampNull_getFreq__R( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_TimestampNull___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_TimestampNull___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_TimestampNull_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}

#if defined(xdc_runtime_TimestampNull___EXPORT) && defined(__ti__)
#if xdc_runtime_TimestampNull___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_get32__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_get64__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampNull_getFreq__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_TimestampNull___scope != -1
#ifdef xdc_runtime_TimestampNull___FXNTAB
#ifndef __isrom__
#if xdc_runtime_TimestampNull___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_TimestampNull___scope == -1 || !defined(__xdc_runtime_ITimestampClient_Interface__BASE__CR)
#ifndef __xdc_runtime_ITimestampClient_Interface__BASE__C
#define __xdc_runtime_ITimestampClient_Interface__BASE__C
__FAR__ xdc_runtime_ITimestampClient_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ITimestampClient_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif
#if xdc_runtime_TimestampNull___scope == -1 || !defined(__xdc_runtime_ITimestampProvider_Interface__BASE__CR)
#ifndef __xdc_runtime_ITimestampProvider_Interface__BASE__C
#define __xdc_runtime_ITimestampProvider_Interface__BASE__C
__FAR__ xdc_runtime_ITimestampProvider_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ITimestampProvider_Interface__BASE__C = {(void*)&xdc_runtime_ITimestampClient_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_TimestampNull_Module__FXNS__C, ".const:xdc_runtime_TimestampNull_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_TimestampNull_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_TimestampNull_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_TimestampNull_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_TimestampNull_Fxns__ xdc_runtime_TimestampNull_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ITimestampProvider_Interface__BASE__C,
    &xdc_runtime_TimestampNull_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_TimestampNull_get32__E,
    xdc_runtime_TimestampNull_get64__E,
    xdc_runtime_TimestampNull_getFreq__E,
    {

        /* create__ */ 0,
        /* delete__ */ 0,
        /* label__ */ 0,
        xdc_runtime_TimestampNull_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_TimestampNull_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_TimestampNull___scope */

#endif /* xdc_runtime_TimestampNull___used */

#ifdef xdc_runtime_TimestampStd___used
/*
 *  ======== module TimestampStd ========
 *  Do not modify this file; it is generated from the specification TimestampStd.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_TimestampStd__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/TimestampStd.h>
#undef __nested__
#else
#include <xdc/runtime/TimestampStd.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampStd___LOGOBJ) && xdc_runtime_TimestampStd___DGSINCL & 0x1
#define xdc_runtime_TimestampStd___L_ENTRY 1
#else
#define xdc_runtime_TimestampStd___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampStd___LOGOBJ) && xdc_runtime_TimestampStd___DGSINCL & 0x2
#define xdc_runtime_TimestampStd___L_EXIT 1
#else
#define xdc_runtime_TimestampStd___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_TimestampStd___LOGOBJ) && xdc_runtime_TimestampStd___DGSINCL & 0x4
#define xdc_runtime_TimestampStd___L_LIFECYCLE 1
#else
#define xdc_runtime_TimestampStd___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_TimestampStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_TimestampStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_TimestampStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_TimestampStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_TimestampStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_TimestampStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_TimestampStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_TimestampStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_TimestampStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_TimestampStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_TimestampStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_TimestampStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_TimestampStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_TimestampStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_TimestampStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_TimestampStd_Module_GateProxy_query
#if xdc_runtime_TimestampStd___scope != -1 || defined(xdc_runtime_TimestampStd_get32__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampStd_get32__PATCH
#define __FN__ xdc_runtime_TimestampStd_get32__PATCH
#else
#define __FN__ xdc_runtime_TimestampStd_get32__F
#endif
xdc_Bits32 xdc_runtime_TimestampStd_get32__E( void ) {
#if xdc_runtime_TimestampStd___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_TimestampStd_get32__ENTRY_EVT);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#endif
#if xdc_runtime_TimestampStd___scope != -1 || defined(xdc_runtime_TimestampStd_get64__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampStd_get64__PATCH
#define __FN__ xdc_runtime_TimestampStd_get64__PATCH
#else
#define __FN__ xdc_runtime_TimestampStd_get64__F
#endif
xdc_Void xdc_runtime_TimestampStd_get64__E( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#endif
#if xdc_runtime_TimestampStd___scope != -1 || defined(xdc_runtime_TimestampStd_getFreq__PATCH)
#undef __FN__
#ifdef xdc_runtime_TimestampStd_getFreq__PATCH
#define __FN__ xdc_runtime_TimestampStd_getFreq__PATCH
#else
#define __FN__ xdc_runtime_TimestampStd_getFreq__F
#endif
xdc_Void xdc_runtime_TimestampStd_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}
#endif

#if defined(xdc_runtime_TimestampStd___EXPORT) && defined(__ti__)
#if xdc_runtime_TimestampStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_get32__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_get64__E);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_getFreq__E);
#endif

#if defined(xdc_runtime_TimestampStd___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_TimestampStd_Module__diagsEnabled xdc_runtime_TimestampStd_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__diagsIncluded xdc_runtime_TimestampStd_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__diagsMask xdc_runtime_TimestampStd_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__gateObj xdc_runtime_TimestampStd_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__gatePrms xdc_runtime_TimestampStd_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__id xdc_runtime_TimestampStd_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__loggerDefined xdc_runtime_TimestampStd_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__loggerObj xdc_runtime_TimestampStd_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__loggerFxn4 xdc_runtime_TimestampStd_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__loggerFxn8 xdc_runtime_TimestampStd_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Module__startupDoneFxn xdc_runtime_TimestampStd_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Object__count xdc_runtime_TimestampStd_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Object__heap xdc_runtime_TimestampStd_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Object__sizeof xdc_runtime_TimestampStd_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_TimestampStd_Object__table xdc_runtime_TimestampStd_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_TimestampStd_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_TimestampStd_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampStd_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampStd_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampStd_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampStd_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampStd_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampStd_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampStd_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_TimestampStd_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_TimestampStd_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
xdc_Bits32 xdc_runtime_TimestampStd_get32__E( void ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampStd_get64__E( xdc_runtime_Types_Timestamp64* result ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_TimestampStd_getFreq__E( xdc_runtime_Types_FreqHz* freq ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_TimestampStd___ROMPATCH
__FAR__ xdc_runtime_TimestampStd_Module__MTAB__C__qual xdc_runtime_TimestampStd_MTab__ xdc_runtime_TimestampStd_Module__MTAB__C = {
#if xdc_runtime_TimestampStd___scope == -1
    xdc_runtime_TimestampStd_get32__E,
    xdc_runtime_TimestampStd_get64__E,
    xdc_runtime_TimestampStd_getFreq__E,
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_TimestampStd_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_TimestampStd_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_TimestampStd_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_TimestampStd_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_TimestampStd_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_TimestampStd_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_TimestampStd_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_TimestampStd_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_TimestampStd_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_TimestampStd_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_TimestampStd_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_TimestampStd_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_TimestampStd_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_TimestampStd_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_TimestampStd_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_TimestampStd_Module_GateProxy_query
#undef __FN__
#ifdef xdc_runtime_TimestampStd___ROMPATCH
#define __FN__ xdc_runtime_TimestampStd_Module__MTAB__C.get32
#else
#define __FN__ xdc_runtime_TimestampStd_get32__F
#endif
xdc_Bits32 xdc_runtime_TimestampStd_get32__E( void ) {
    return __FN__();
}
#undef __FN__
#ifdef xdc_runtime_TimestampStd___ROMPATCH
#define __FN__ xdc_runtime_TimestampStd_Module__MTAB__C.get64
#else
#define __FN__ xdc_runtime_TimestampStd_get64__F
#endif
xdc_Void xdc_runtime_TimestampStd_get64__E( xdc_runtime_Types_Timestamp64* result ) {
    __FN__(result);
}
#undef __FN__
#ifdef xdc_runtime_TimestampStd___ROMPATCH
#define __FN__ xdc_runtime_TimestampStd_Module__MTAB__C.getFreq
#else
#define __FN__ xdc_runtime_TimestampStd_getFreq__F
#endif
xdc_Void xdc_runtime_TimestampStd_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {
    __FN__(freq);
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampStd_get32__F
xdc_Bits32 xdc_runtime_TimestampStd_get32__R( void ) {
#if xdc_runtime_TimestampStd___L_EXIT
    xdc_Bits32 __ret;
#else
#endif
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write0(xdc_runtime_TimestampStd_get32__ENTRY_EVT);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __ret = __FN__();
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get32__EXIT_EVT, (xdc_IArg)__ret);
    return __ret;
#else
    return __FN__();
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampStd_get64__F
xdc_Void xdc_runtime_TimestampStd_get64__R( xdc_runtime_Types_Timestamp64* result ) {
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get64__ENTRY_EVT, (xdc_IArg)result);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __FN__(result);
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_get64__EXIT_EVT, 0);
#else
    __FN__(result);
#endif
}
#undef __FN__
#define __FN__ xdc_runtime_TimestampStd_getFreq__F
xdc_Void xdc_runtime_TimestampStd_getFreq__R( xdc_runtime_Types_FreqHz* freq ) {
#if xdc_runtime_TimestampStd___L_ENTRY
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_getFreq__ENTRY_EVT, (xdc_IArg)freq);
#endif
#if xdc_runtime_TimestampStd___L_EXIT
    __FN__(freq);
    xdc_runtime_Log_write1(xdc_runtime_TimestampStd_getFreq__EXIT_EVT, 0);
#else
    __FN__(freq);
#endif
}

#if defined(xdc_runtime_TimestampStd___EXPORT) && defined(__ti__)
#if xdc_runtime_TimestampStd___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_Module__startupDone__S);
#endif
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_get32__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_get64__R);
#pragma FUNC_EXT_CALLED(xdc_runtime_TimestampStd_getFreq__R);
#endif
#endif /* __isrom__ */

#if xdc_runtime_TimestampStd___scope != -1
#ifdef xdc_runtime_TimestampStd___FXNTAB
#ifndef __isrom__
#if xdc_runtime_TimestampStd___scope == -1 || !defined(__xdc_runtime_IModule_Interface__BASE__CR)
#ifndef __xdc_runtime_IModule_Interface__BASE__C
#define __xdc_runtime_IModule_Interface__BASE__C
__FAR__ xdc_runtime_IModule_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_IModule_Interface__BASE__C = {0};
#endif
#endif
#if xdc_runtime_TimestampStd___scope == -1 || !defined(__xdc_runtime_ITimestampClient_Interface__BASE__CR)
#ifndef __xdc_runtime_ITimestampClient_Interface__BASE__C
#define __xdc_runtime_ITimestampClient_Interface__BASE__C
__FAR__ xdc_runtime_ITimestampClient_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ITimestampClient_Interface__BASE__C = {(void*)&xdc_runtime_IModule_Interface__BASE__C};
#endif
#endif
#if xdc_runtime_TimestampStd___scope == -1 || !defined(__xdc_runtime_ITimestampProvider_Interface__BASE__CR)
#ifndef __xdc_runtime_ITimestampProvider_Interface__BASE__C
#define __xdc_runtime_ITimestampProvider_Interface__BASE__C
__FAR__ xdc_runtime_ITimestampProvider_Interface__BASE__C__qual xdc_runtime_Types_Base xdc_runtime_ITimestampProvider_Interface__BASE__C = {(void*)&xdc_runtime_ITimestampClient_Interface__BASE__C};
#endif
#endif

#endif
#ifdef __ti__
#pragma DATA_SECTION(xdc_runtime_TimestampStd_Module__FXNS__C, ".const:xdc_runtime_TimestampStd_Module__FXNS__C");
asm("	.sect \".const:xdc_runtime_TimestampStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[0].const:xdc_runtime_TimestampStd_Module__FXNS__C\"");
asm("	 .clink");
asm("	.sect \"[1].const:xdc_runtime_TimestampStd_Module__FXNS__C\"");
asm("	 .clink");
#endif
const xdc_runtime_TimestampStd_Fxns__ xdc_runtime_TimestampStd_Module__FXNS__C = {
    /* base__ */ (void*)&xdc_runtime_ITimestampProvider_Interface__BASE__C,
    &xdc_runtime_TimestampStd_Module__FXNS__C.__sfxns, /* __sysp */
    xdc_runtime_TimestampStd_get32__E,
    xdc_runtime_TimestampStd_get64__E,
    xdc_runtime_TimestampStd_getFreq__E,
    {

        /* create__ */ 0,
        /* delete__ */ 0,
        /* label__ */ 0,
        xdc_runtime_TimestampStd_Module__id__D,
    } /* __sfxns */
};
#endif
xdc_Bool xdc_runtime_TimestampStd_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_TimestampStd___scope */

#endif /* xdc_runtime_TimestampStd___used */

#ifdef xdc_runtime_Types___used
/*
 *  ======== module Types ========
 *  Do not modify this file; it is generated from the specification Types.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Types__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Types.h>
#undef __nested__
#else
#include <xdc/runtime/Types.h>
#endif
#endif

#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Types___LOGOBJ) && xdc_runtime_Types___DGSINCL & 0x1
#define xdc_runtime_Types___L_ENTRY 1
#else
#define xdc_runtime_Types___L_ENTRY 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Types___LOGOBJ) && xdc_runtime_Types___DGSINCL & 0x2
#define xdc_runtime_Types___L_EXIT 1
#else
#define xdc_runtime_Types___L_EXIT 0
#endif
#if defined(xdc_runtime_Log__include) && defined(xdc_runtime_Types___LOGOBJ) && xdc_runtime_Types___DGSINCL & 0x4
#define xdc_runtime_Types___L_LIFECYCLE 1
#else
#define xdc_runtime_Types___L_LIFECYCLE 0
#endif

#ifndef __isrom__ /* xdc_runtime_Types_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Types_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Types_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Types_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Types_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Types_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Types_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Types_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Types_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Types_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Types_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Types_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Types_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Types_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Types_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Types_Module_GateProxy_query

#if defined(xdc_runtime_Types___EXPORT) && defined(__ti__)
#if xdc_runtime_Types___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Types_Module__startupDone__S);
#endif
#endif

#if defined(xdc_runtime_Types___used) && defined(__GNUC__)

#if __GNUC__ >= 4
const CT__xdc_runtime_Types_Module__diagsEnabled xdc_runtime_Types_Module__diagsEnabled__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__diagsIncluded xdc_runtime_Types_Module__diagsIncluded__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__diagsMask xdc_runtime_Types_Module__diagsMask__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__gateObj xdc_runtime_Types_Module__gateObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__gatePrms xdc_runtime_Types_Module__gatePrms__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__id xdc_runtime_Types_Module__id__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__loggerDefined xdc_runtime_Types_Module__loggerDefined__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__loggerObj xdc_runtime_Types_Module__loggerObj__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__loggerFxn4 xdc_runtime_Types_Module__loggerFxn4__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__loggerFxn8 xdc_runtime_Types_Module__loggerFxn8__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Module__startupDoneFxn xdc_runtime_Types_Module__startupDoneFxn__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Object__count xdc_runtime_Types_Object__count__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Object__heap xdc_runtime_Types_Object__heap__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Object__sizeof xdc_runtime_Types_Object__sizeof__C __attribute__ ((externally_visible));
const CT__xdc_runtime_Types_Object__table xdc_runtime_Types_Object__table__C __attribute__ ((externally_visible));
xdc_runtime_Types_Label* xdc_runtime_Types_Handle__label__S( xdc_Ptr obj, xdc_runtime_Types_Label* lab ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Types_Module__startupDone__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Types_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, xdc_Ptr __aa, const xdc_UChar* __pa, xdc_SizeT __psz, xdc_runtime_Error_Block* __eb ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Types_Object__delete__S( xdc_Ptr instp ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Types_Object__destruct__S( xdc_Ptr objp ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Types_Object__get__S( xdc_Ptr oarr, xdc_Int i ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Types_Object__first__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Types_Object__next__S( xdc_Ptr obj ) __attribute__ ((externally_visible));
xdc_Void xdc_runtime_Types_Params__init__S( xdc_Ptr dst, xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) __attribute__ ((externally_visible));
xdc_Bool xdc_runtime_Types_Proxy__abstract__S( void ) __attribute__ ((externally_visible));
xdc_Ptr xdc_runtime_Types_Proxy__delegate__S( void ) __attribute__ ((externally_visible));
#endif
#endif
#ifdef xdc_runtime_Types___ROMPATCH
__FAR__ xdc_runtime_Types_Module__MTAB__C__qual xdc_runtime_Types_MTab__ xdc_runtime_Types_Module__MTAB__C = {
#if xdc_runtime_Types___scope == -1
#endif
0
};
#endif

#else /* __isrom__ xdc_runtime_Types_ */


/* Module__??? */
#undef Module__MID
#define Module__MID xdc_runtime_Types_Module__id__C
#undef Module__DGSINCL
#define Module__DGSINCL xdc_runtime_Types_Module__diagsIncluded__C
#undef Module__DGSENAB
#define Module__DGSENAB xdc_runtime_Types_Module__diagsEnabled__C
#undef Module__DGSMASK
#define Module__DGSMASK xdc_runtime_Types_Module__diagsMask__C
#undef Module__LOGDEF
#define Module__LOGDEF xdc_runtime_Types_Module__loggerDefined__C
#undef Module__LOGOBJ
#define Module__LOGOBJ xdc_runtime_Types_Module__loggerObj__C
#undef Module__LOGFXN4
#define Module__LOGFXN4 xdc_runtime_Types_Module__loggerFxn4__C
#undef Module__LOGFXN8
#define Module__LOGFXN8 xdc_runtime_Types_Module__loggerFxn8__C
#undef Module__G_OBJ
#define Module__G_OBJ xdc_runtime_Types_Module__gateObj__C
#undef Module__G_PRMS
#define Module__G_PRMS xdc_runtime_Types_Module__gatePrms__C
#undef Module__GP_create
#define Module__GP_create xdc_runtime_Types_Module_GateProxy_create
#undef Module__GP_delete
#define Module__GP_delete xdc_runtime_Types_Module_GateProxy_delete
#undef Module__GP_enter
#define Module__GP_enter xdc_runtime_Types_Module_GateProxy_enter
#undef Module__GP_leave
#define Module__GP_leave xdc_runtime_Types_Module_GateProxy_leave
#undef Module__GP_query
#define Module__GP_query xdc_runtime_Types_Module_GateProxy_query

#if defined(xdc_runtime_Types___EXPORT) && defined(__ti__)
#if xdc_runtime_Types___scope != -1
#pragma FUNC_EXT_CALLED(xdc_runtime_Types_Module__startupDone__S);
#endif
#endif
#endif /* __isrom__ */

#if xdc_runtime_Types___scope != -1
xdc_Bool xdc_runtime_Types_Module__startupDone__S(void) {

    return 1;
}
#endif /* xdc_runtime_Types___scope */

#endif /* xdc_runtime_Types___used */

#ifdef xdc_runtime_LoggerBuf_TimestampProxy___used
/*
 *  ======== module LoggerBuf_TimestampProxy ========
 *  Do not modify this file; it is generated from the specification LoggerBuf_TimestampProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_LoggerBuf_TimestampProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/LoggerBuf_TimestampProxy.h>
#undef __nested__
#else
#include <xdc/runtime/LoggerBuf_TimestampProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_LoggerBuf_TimestampProxy_ */


#if defined(xdc_runtime_LoggerBuf_TimestampProxy___DELEGATE)&& xdc_runtime_LoggerBuf_TimestampProxy___scope != -1
#define xdc_runtime_LoggerBuf_TimestampProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerBuf_TimestampProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_LoggerBuf_TimestampProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_LoggerBuf_TimestampProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_LoggerBuf_TimestampProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_LoggerBuf_TimestampProxy___PROXYFXNS(xdc_runtime_LoggerBuf_TimestampProxy___DELEGATE)
#endif


#else /* __isrom__ xdc_runtime_LoggerBuf_TimestampProxy_ */


#if defined(xdc_runtime_LoggerBuf_TimestampProxy___DELEGATE)
#define xdc_runtime_LoggerBuf_TimestampProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerBuf_TimestampProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_LoggerBuf_TimestampProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_LoggerBuf_TimestampProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_LoggerBuf_TimestampProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_LoggerBuf_TimestampProxy___PROXYFXNS(xdc_runtime_LoggerBuf_TimestampProxy___DELEGATE)
#endif

#endif /* __isrom__ */

#if xdc_runtime_LoggerBuf_TimestampProxy___scope != -1
xdc_Bool xdc_runtime_LoggerBuf_TimestampProxy_Proxy__abstract__S()
#ifdef xdc_runtime_LoggerBuf_TimestampProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_LoggerBuf_TimestampProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_LoggerBuf_TimestampProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_LoggerBuf_TimestampProxy___scope */

#endif /* xdc_runtime_LoggerBuf_TimestampProxy___used */

#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___used
/*
 *  ======== module LoggerBuf_Module_GateProxy ========
 *  Do not modify this file; it is generated from the specification LoggerBuf_Module_GateProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_LoggerBuf_Module_GateProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/LoggerBuf_Module_GateProxy.h>
#undef __nested__
#else
#include <xdc/runtime/LoggerBuf_Module_GateProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_LoggerBuf_Module_GateProxy_ */


#if defined(xdc_runtime_LoggerBuf_Module_GateProxy___DELEGATE)&& xdc_runtime_LoggerBuf_Module_GateProxy___scope != -1
#define xdc_runtime_LoggerBuf_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerBuf_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_LoggerBuf_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerBuf_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_LoggerBuf_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_LoggerBuf_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_LoggerBuf_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_LoggerBuf_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_LoggerBuf_Module_GateProxy___PROXYFXNS(xdc_runtime_LoggerBuf_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif


#else /* __isrom__ xdc_runtime_LoggerBuf_Module_GateProxy_ */


#if defined(xdc_runtime_LoggerBuf_Module_GateProxy___DELEGATE)
#define xdc_runtime_LoggerBuf_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerBuf_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_LoggerBuf_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_LoggerBuf_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_LoggerBuf_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_LoggerBuf_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_LoggerBuf_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_LoggerBuf_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_LoggerBuf_Module_GateProxy___PROXYFXNS(xdc_runtime_LoggerBuf_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_LoggerBuf_Module_GateProxy_enter__E( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_LoggerBuf_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_LoggerBuf_Module_GateProxy_leave__E( xdc_runtime_LoggerBuf_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_LoggerBuf_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif

#endif /* __isrom__ */

#if xdc_runtime_LoggerBuf_Module_GateProxy___scope != -1
xdc_Bool xdc_runtime_LoggerBuf_Module_GateProxy_Proxy__abstract__S()
#ifdef xdc_runtime_LoggerBuf_Module_GateProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_LoggerBuf_Module_GateProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_LoggerBuf_Module_GateProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_LoggerBuf_Module_GateProxy___scope */

#endif /* xdc_runtime_LoggerBuf_Module_GateProxy___used */

#ifdef xdc_runtime_LoggerSys_TimestampProxy___used
/*
 *  ======== module LoggerSys_TimestampProxy ========
 *  Do not modify this file; it is generated from the specification LoggerSys_TimestampProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_LoggerSys_TimestampProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/LoggerSys_TimestampProxy.h>
#undef __nested__
#else
#include <xdc/runtime/LoggerSys_TimestampProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_LoggerSys_TimestampProxy_ */


#if defined(xdc_runtime_LoggerSys_TimestampProxy___DELEGATE)&& xdc_runtime_LoggerSys_TimestampProxy___scope != -1
#define xdc_runtime_LoggerSys_TimestampProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerSys_TimestampProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_LoggerSys_TimestampProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_LoggerSys_TimestampProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_LoggerSys_TimestampProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_LoggerSys_TimestampProxy___PROXYFXNS(xdc_runtime_LoggerSys_TimestampProxy___DELEGATE)
#endif


#else /* __isrom__ xdc_runtime_LoggerSys_TimestampProxy_ */


#if defined(xdc_runtime_LoggerSys_TimestampProxy___DELEGATE)
#define xdc_runtime_LoggerSys_TimestampProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_LoggerSys_TimestampProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_LoggerSys_TimestampProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_LoggerSys_TimestampProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_LoggerSys_TimestampProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_LoggerSys_TimestampProxy___PROXYFXNS(xdc_runtime_LoggerSys_TimestampProxy___DELEGATE)
#endif

#endif /* __isrom__ */

#if xdc_runtime_LoggerSys_TimestampProxy___scope != -1
xdc_Bool xdc_runtime_LoggerSys_TimestampProxy_Proxy__abstract__S()
#ifdef xdc_runtime_LoggerSys_TimestampProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_LoggerSys_TimestampProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_LoggerSys_TimestampProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_LoggerSys_TimestampProxy___scope */

#endif /* xdc_runtime_LoggerSys_TimestampProxy___used */

#ifdef xdc_runtime_Main_Module_GateProxy___used
/*
 *  ======== module Main_Module_GateProxy ========
 *  Do not modify this file; it is generated from the specification Main_Module_GateProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Main_Module_GateProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Main_Module_GateProxy.h>
#undef __nested__
#else
#include <xdc/runtime/Main_Module_GateProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_Main_Module_GateProxy_ */


#if defined(xdc_runtime_Main_Module_GateProxy___DELEGATE)&& xdc_runtime_Main_Module_GateProxy___scope != -1
#define xdc_runtime_Main_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Main_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_Main_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_Main_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_Main_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_Main_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_Main_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_Main_Module_GateProxy___PROXYFXNS(xdc_runtime_Main_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E( xdc_runtime_Main_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_Main_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_Main_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_Main_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_Main_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif


#else /* __isrom__ xdc_runtime_Main_Module_GateProxy_ */


#if defined(xdc_runtime_Main_Module_GateProxy___DELEGATE)
#define xdc_runtime_Main_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Main_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_Main_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_Main_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_Main_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_Main_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_Main_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_Main_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_Main_Module_GateProxy___PROXYFXNS(xdc_runtime_Main_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_Main_Module_GateProxy_enter__E( xdc_runtime_Main_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_Main_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_Main_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E_D( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_Main_Module_GateProxy_leave__E( xdc_runtime_Main_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_Main_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_Main_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif

#endif /* __isrom__ */

#if xdc_runtime_Main_Module_GateProxy___scope != -1
xdc_Bool xdc_runtime_Main_Module_GateProxy_Proxy__abstract__S()
#ifdef xdc_runtime_Main_Module_GateProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_Main_Module_GateProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_Main_Module_GateProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_Main_Module_GateProxy___scope */

#endif /* xdc_runtime_Main_Module_GateProxy___used */

#ifdef xdc_runtime_Memory_HeapProxy___used
/*
 *  ======== module Memory_HeapProxy ========
 *  Do not modify this file; it is generated from the specification Memory_HeapProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Memory_HeapProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Memory_HeapProxy.h>
#undef __nested__
#else
#include <xdc/runtime/Memory_HeapProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_Memory_HeapProxy_ */


#if defined(xdc_runtime_Memory_HeapProxy___DELEGATE)&& xdc_runtime_Memory_HeapProxy___scope != -1
#define xdc_runtime_Memory_HeapProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Memory_HeapProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_Memory_HeapProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IHeap_Params), __eb); }\
void xdc_runtime_Memory_HeapProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_Memory_HeapProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_Memory_HeapProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {\
    return __CONC__(__PRE,alloc)((__CONC__(__PRE,Handle))_this, size, align, eb); }\
xdc_Void xdc_runtime_Memory_HeapProxy_free__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size ) {\
    __CONC__(__PRE,free)((__CONC__(__PRE,Handle))_this, block, size); }\
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E_D( xdc_runtime_Memory_HeapProxy_Handle _this ) {\
    return __CONC__(__PRE,isBlocking)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats ) {\
    __CONC__(__PRE,getStats)((__CONC__(__PRE,Handle))_this, stats); }\

xdc_runtime_Memory_HeapProxy___PROXYFXNS(xdc_runtime_Memory_HeapProxy___DELEGATE)
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb );
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    return xdc_runtime_IHeap_alloc((xdc_runtime_IHeap_Handle)_this, size, align, eb); }
#else
    return xdc_runtime_Memory_HeapProxy_alloc__E_D(_this, size, align, eb); }
#endif
xdc_Void xdc_runtime_Memory_HeapProxy_free__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size );
xdc_Void xdc_runtime_Memory_HeapProxy_free__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    xdc_runtime_IHeap_free((xdc_runtime_IHeap_Handle)_this, block, size); }
#else
    xdc_runtime_Memory_HeapProxy_free__E_D(_this, block, size); }
#endif
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E_D( xdc_runtime_Memory_HeapProxy_Handle _this );
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E( xdc_runtime_Memory_HeapProxy_Handle _this ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    return xdc_runtime_IHeap_isBlocking((xdc_runtime_IHeap_Handle)_this); }
#else
    return xdc_runtime_Memory_HeapProxy_isBlocking__E_D(_this); }
#endif
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats );
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    xdc_runtime_IHeap_getStats((xdc_runtime_IHeap_Handle)_this, stats); }
#else
    xdc_runtime_Memory_HeapProxy_getStats__E_D(_this, stats); }
#endif
#endif


#else /* __isrom__ xdc_runtime_Memory_HeapProxy_ */


#if defined(xdc_runtime_Memory_HeapProxy___DELEGATE)
#define xdc_runtime_Memory_HeapProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Memory_HeapProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_Memory_HeapProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_Memory_HeapProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IHeap_Params), __eb); }\
void xdc_runtime_Memory_HeapProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_Memory_HeapProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_Memory_HeapProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {\
    return __CONC__(__PRE,alloc)((__CONC__(__PRE,Handle))_this, size, align, eb); }\
xdc_Void xdc_runtime_Memory_HeapProxy_free__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size ) {\
    __CONC__(__PRE,free)((__CONC__(__PRE,Handle))_this, block, size); }\
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E_D( xdc_runtime_Memory_HeapProxy_Handle _this ) {\
    return __CONC__(__PRE,isBlocking)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats ) {\
    __CONC__(__PRE,getStats)((__CONC__(__PRE,Handle))_this, stats); }\

xdc_runtime_Memory_HeapProxy___PROXYFXNS(xdc_runtime_Memory_HeapProxy___DELEGATE)
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb );
xdc_Ptr xdc_runtime_Memory_HeapProxy_alloc__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_SizeT size, xdc_SizeT align, xdc_runtime_Error_Block* eb ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    return xdc_runtime_IHeap_alloc((xdc_runtime_IHeap_Handle)_this, size, align, eb); }
#else
    return xdc_runtime_Memory_HeapProxy_alloc__E_D(_this, size, align, eb); }
#endif
xdc_Void xdc_runtime_Memory_HeapProxy_free__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size );
xdc_Void xdc_runtime_Memory_HeapProxy_free__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_Ptr block, xdc_SizeT size ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    xdc_runtime_IHeap_free((xdc_runtime_IHeap_Handle)_this, block, size); }
#else
    xdc_runtime_Memory_HeapProxy_free__E_D(_this, block, size); }
#endif
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E_D( xdc_runtime_Memory_HeapProxy_Handle _this );
xdc_Bool xdc_runtime_Memory_HeapProxy_isBlocking__E( xdc_runtime_Memory_HeapProxy_Handle _this ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    return xdc_runtime_IHeap_isBlocking((xdc_runtime_IHeap_Handle)_this); }
#else
    return xdc_runtime_Memory_HeapProxy_isBlocking__E_D(_this); }
#endif
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E_D( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats );
xdc_Void xdc_runtime_Memory_HeapProxy_getStats__E( xdc_runtime_Memory_HeapProxy_Handle _this, xdc_runtime_Memory_Stats* stats ) {
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    xdc_runtime_IHeap_getStats((xdc_runtime_IHeap_Handle)_this, stats); }
#else
    xdc_runtime_Memory_HeapProxy_getStats__E_D(_this, stats); }
#endif
#endif

#endif /* __isrom__ */

#if xdc_runtime_Memory_HeapProxy___scope != -1
xdc_Bool xdc_runtime_Memory_HeapProxy_Proxy__abstract__S()
#ifdef xdc_runtime_Memory_HeapProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_Memory_HeapProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_Memory_HeapProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_Memory_HeapProxy___scope */

#endif /* xdc_runtime_Memory_HeapProxy___used */

#ifdef xdc_runtime_System_SupportProxy___used
/*
 *  ======== module System_SupportProxy ========
 *  Do not modify this file; it is generated from the specification System_SupportProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_System_SupportProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/System_SupportProxy.h>
#undef __nested__
#else
#include <xdc/runtime/System_SupportProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_System_SupportProxy_ */


#if defined(xdc_runtime_System_SupportProxy___DELEGATE)&& xdc_runtime_System_SupportProxy___scope != -1
#define xdc_runtime_System_SupportProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_System_SupportProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Void xdc_runtime_System_SupportProxy_abort__E( xdc_String str ) {\
    __CONC__(__PRE,abort)(str); }\
xdc_Void xdc_runtime_System_SupportProxy_exit__E( xdc_Int stat ) {\
    __CONC__(__PRE,exit)(stat); }\
xdc_Void xdc_runtime_System_SupportProxy_flush__E( void ) {\
    __CONC__(__PRE,flush)(); }\
xdc_Void xdc_runtime_System_SupportProxy_putch__E( xdc_Char ch ) {\
    __CONC__(__PRE,putch)(ch); }\
xdc_Bool xdc_runtime_System_SupportProxy_ready__E( void ) {\
    return __CONC__(__PRE,ready)(); }\

xdc_runtime_System_SupportProxy___PROXYFXNS(xdc_runtime_System_SupportProxy___DELEGATE)
#endif


#else /* __isrom__ xdc_runtime_System_SupportProxy_ */


#if defined(xdc_runtime_System_SupportProxy___DELEGATE)
#define xdc_runtime_System_SupportProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_System_SupportProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Void xdc_runtime_System_SupportProxy_abort__E( xdc_String str ) {\
    __CONC__(__PRE,abort)(str); }\
xdc_Void xdc_runtime_System_SupportProxy_exit__E( xdc_Int stat ) {\
    __CONC__(__PRE,exit)(stat); }\
xdc_Void xdc_runtime_System_SupportProxy_flush__E( void ) {\
    __CONC__(__PRE,flush)(); }\
xdc_Void xdc_runtime_System_SupportProxy_putch__E( xdc_Char ch ) {\
    __CONC__(__PRE,putch)(ch); }\
xdc_Bool xdc_runtime_System_SupportProxy_ready__E( void ) {\
    return __CONC__(__PRE,ready)(); }\

xdc_runtime_System_SupportProxy___PROXYFXNS(xdc_runtime_System_SupportProxy___DELEGATE)
#endif

#endif /* __isrom__ */

#if xdc_runtime_System_SupportProxy___scope != -1
xdc_Bool xdc_runtime_System_SupportProxy_Proxy__abstract__S()
#ifdef xdc_runtime_System_SupportProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_System_SupportProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_System_SupportProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_System_SupportProxy___scope */

#endif /* xdc_runtime_System_SupportProxy___used */

#ifdef xdc_runtime_System_Module_GateProxy___used
/*
 *  ======== module System_Module_GateProxy ========
 *  Do not modify this file; it is generated from the specification System_Module_GateProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_System_Module_GateProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/System_Module_GateProxy.h>
#undef __nested__
#else
#include <xdc/runtime/System_Module_GateProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_System_Module_GateProxy_ */


#if defined(xdc_runtime_System_Module_GateProxy___DELEGATE)&& xdc_runtime_System_Module_GateProxy___scope != -1
#define xdc_runtime_System_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_System_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_System_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_System_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_System_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_System_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_System_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_System_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E_D( xdc_runtime_System_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E_D( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_System_Module_GateProxy___PROXYFXNS(xdc_runtime_System_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E_D( xdc_runtime_System_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E( xdc_runtime_System_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_System_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_System_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E_D( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_System_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_System_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif


#else /* __isrom__ xdc_runtime_System_Module_GateProxy_ */


#if defined(xdc_runtime_System_Module_GateProxy___DELEGATE)
#define xdc_runtime_System_Module_GateProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_System_Module_GateProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Ptr xdc_runtime_System_Module_GateProxy_Object__create__S( xdc_Ptr __oa, xdc_SizeT __osz, const xdc_Ptr __aa, const xdc_runtime_System_Module_GateProxy___ParamsPtr __pa, xdc_SizeT __sz, xdc_runtime_Error_Block* __eb ) {\
    return __CONC__(__PRE,Object__create__S)(__oa, __osz, __aa, (__CONC__(__PRE,__ParamsPtr))__pa, sizeof(xdc_runtime_IGateProvider_Params), __eb); }\
void xdc_runtime_System_Module_GateProxy_Object__delete__S( Ptr instp ) {\
    __CONC__(__PRE,Object__delete__S)(instp); }\
void xdc_runtime_System_Module_GateProxy_Params__init__S( xdc_Ptr dst, const xdc_Ptr src, xdc_SizeT psz, xdc_SizeT isz ) {\
    __CONC__(__PRE,Params__init__S)(dst, src, psz, isz); }\
xdc_runtime_Types_Label* xdc_runtime_System_Module_GateProxy_Handle__label__S( Ptr obj, xdc_runtime_Types_Label* lab ) {\
    return __CONC__(__PRE,Handle__label__S)(obj, lab); }\
xdc_Bool xdc_runtime_System_Module_GateProxy_query__E( xdc_Int qual ) {\
    return __CONC__(__PRE,query)(qual); }\
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E_D( xdc_runtime_System_Module_GateProxy_Handle _this ) {\
    return __CONC__(__PRE,enter)((__CONC__(__PRE,Handle))_this); }\
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E_D( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key ) {\
    __CONC__(__PRE,leave)((__CONC__(__PRE,Handle))_this, key); }\

xdc_runtime_System_Module_GateProxy___PROXYFXNS(xdc_runtime_System_Module_GateProxy___DELEGATE)
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E_D( xdc_runtime_System_Module_GateProxy_Handle _this );
xdc_IArg xdc_runtime_System_Module_GateProxy_enter__E( xdc_runtime_System_Module_GateProxy_Handle _this ) {
#ifdef xdc_runtime_System_Module_GateProxy___ABSTRACT
    return xdc_runtime_IGateProvider_enter((xdc_runtime_IGateProvider_Handle)_this); }
#else
    return xdc_runtime_System_Module_GateProxy_enter__E_D(_this); }
#endif
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E_D( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key );
xdc_Void xdc_runtime_System_Module_GateProxy_leave__E( xdc_runtime_System_Module_GateProxy_Handle _this, xdc_IArg key ) {
#ifdef xdc_runtime_System_Module_GateProxy___ABSTRACT
    xdc_runtime_IGateProvider_leave((xdc_runtime_IGateProvider_Handle)_this, key); }
#else
    xdc_runtime_System_Module_GateProxy_leave__E_D(_this, key); }
#endif
#endif

#endif /* __isrom__ */

#if xdc_runtime_System_Module_GateProxy___scope != -1
xdc_Bool xdc_runtime_System_Module_GateProxy_Proxy__abstract__S()
#ifdef xdc_runtime_System_Module_GateProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_System_Module_GateProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_System_Module_GateProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_System_Module_GateProxy___scope */

#endif /* xdc_runtime_System_Module_GateProxy___used */

#ifdef xdc_runtime_Timestamp_SupportProxy___used
/*
 *  ======== module Timestamp_SupportProxy ========
 *  Do not modify this file; it is generated from the specification Timestamp_SupportProxy.xdc
 *  and any modifications risk being overwritten.
 */

#ifndef xdc_runtime_Timestamp_SupportProxy__include
#ifndef __nested__
#define __nested__
#include <xdc/runtime/Timestamp_SupportProxy.h>
#undef __nested__
#else
#include <xdc/runtime/Timestamp_SupportProxy.h>
#endif
#endif


#ifndef __isrom__ /* xdc_runtime_Timestamp_SupportProxy_ */


#if defined(xdc_runtime_Timestamp_SupportProxy___DELEGATE)&& xdc_runtime_Timestamp_SupportProxy___scope != -1
#define xdc_runtime_Timestamp_SupportProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Timestamp_SupportProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_Timestamp_SupportProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_Timestamp_SupportProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_Timestamp_SupportProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_Timestamp_SupportProxy___PROXYFXNS(xdc_runtime_Timestamp_SupportProxy___DELEGATE)
#endif


#else /* __isrom__ xdc_runtime_Timestamp_SupportProxy_ */


#if defined(xdc_runtime_Timestamp_SupportProxy___DELEGATE)
#define xdc_runtime_Timestamp_SupportProxy___PROXYFXNS(__PRE)\
xdc_Bool xdc_runtime_Timestamp_SupportProxy_Module__startupDone__S(void) {\
    return __CONC__(__PRE,Module__startupDone__S)(); }\
xdc_Bits32 xdc_runtime_Timestamp_SupportProxy_get32__E( void ) {\
    return __CONC__(__PRE,get32)(); }\
xdc_Void xdc_runtime_Timestamp_SupportProxy_get64__E( xdc_runtime_Types_Timestamp64* result ) {\
    __CONC__(__PRE,get64)(result); }\
xdc_Void xdc_runtime_Timestamp_SupportProxy_getFreq__E( xdc_runtime_Types_FreqHz* freq ) {\
    __CONC__(__PRE,getFreq)(freq); }\

xdc_runtime_Timestamp_SupportProxy___PROXYFXNS(xdc_runtime_Timestamp_SupportProxy___DELEGATE)
#endif

#endif /* __isrom__ */

#if xdc_runtime_Timestamp_SupportProxy___scope != -1
xdc_Bool xdc_runtime_Timestamp_SupportProxy_Proxy__abstract__S()
#ifdef xdc_runtime_Timestamp_SupportProxy___ABSTRACT
    { return 1; }
#else
    { return 0; }
#endif
xdc_Ptr xdc_runtime_Timestamp_SupportProxy_Proxy__delegate__S(void) { return (xdc_Ptr)xdc_runtime_Timestamp_SupportProxy___DELEGATE_FXNS; }
#endif /* xdc_runtime_Timestamp_SupportProxy___scope */

#endif /* xdc_runtime_Timestamp_SupportProxy___used */


#endif

/* package gnu.targets.rts470MV */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char gnu_targets_rts470MV__dummy__;
#define __xdc_PKGVERS 1, 0, 0, 0
#define __xdc_PKGNAME gnu.targets.rts470MV
#define __xdc_PKGPREFIX gnu_targets_rts470MV_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.utils.trace */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_utils_trace__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.utils.trace
#define __xdc_PKGPREFIX ti_sdo_utils_trace_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.linuxutils.cmem */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_linuxutils_cmem__dummy__;
#define __xdc_PKGVERS 2, 2, 0
#define __xdc_PKGNAME ti.sdo.linuxutils.cmem
#define __xdc_PKGPREFIX ti_sdo_linuxutils_cmem_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.linuxutils.vicp */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_linuxutils_vicp__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.linuxutils.vicp
#define __xdc_PKGPREFIX ti_sdo_linuxutils_vicp_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.linuxutils.edma */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_linuxutils_edma__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.linuxutils.edma
#define __xdc_PKGPREFIX ti_sdo_linuxutils_edma_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.global */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_global__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.global
#define __xdc_PKGPREFIX ti_sdo_fc_global_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.utils.gtinfra */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_utils_gtinfra__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.utils.gtinfra
#define __xdc_PKGPREFIX ti_sdo_fc_utils_gtinfra_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.vicpsync */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_vicpsync__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.vicpsync
#define __xdc_PKGPREFIX ti_sdo_fc_vicpsync_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.memutils */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_memutils__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.memutils
#define __xdc_PKGPREFIX ti_sdo_fc_memutils_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.utils */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_utils__dummy__;
#define __xdc_PKGVERS 1, 0, 2
#define __xdc_PKGNAME ti.sdo.fc.utils
#define __xdc_PKGPREFIX ti_sdo_fc_utils_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.ires.vicp */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_ires_vicp__dummy__;
#define __xdc_PKGVERS 1, 0, 1
#define __xdc_PKGNAME ti.sdo.fc.ires.vicp
#define __xdc_PKGPREFIX ti_sdo_fc_ires_vicp_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.rman.examples */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_rman_examples__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.rman.examples
#define __xdc_PKGPREFIX ti_sdo_fc_rman_examples_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.ires.addrspace */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_ires_addrspace__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.ires.addrspace
#define __xdc_PKGPREFIX ti_sdo_fc_ires_addrspace_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.utils.api */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_utils_api__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.utils.api
#define __xdc_PKGPREFIX ti_sdo_fc_utils_api_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.ires.nullresource */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_ires_nullresource__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.ires.nullresource
#define __xdc_PKGPREFIX ti_sdo_fc_ires_nullresource_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.rman */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_rman__dummy__;
#define __xdc_PKGVERS 2, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.rman
#define __xdc_PKGPREFIX ti_sdo_fc_rman_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.edma3 */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_edma3__dummy__;
#define __xdc_PKGVERS 2, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.edma3
#define __xdc_PKGPREFIX ti_sdo_fc_edma3_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.sdo.fc.ires.edma3chan */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_sdo_fc_ires_edma3chan__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.sdo.fc.ires.edma3chan
#define __xdc_PKGPREFIX ti_sdo_fc_ires_edma3chan_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.catalog.c470 */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_catalog_c470__dummy__;
#define __xdc_PKGVERS 1, 0, 1, 0
#define __xdc_PKGNAME ti.catalog.c470
#define __xdc_PKGPREFIX ti_catalog_c470_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.platform */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_platform__dummy__;
#define __xdc_PKGVERS 1, 0, 1, 0
#define __xdc_PKGNAME xdc.platform
#define __xdc_PKGPREFIX xdc_platform_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package xdc.cfg */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char xdc_cfg__dummy__;
#define __xdc_PKGVERS 1, 0, 2, 0
#define __xdc_PKGNAME xdc.cfg
#define __xdc_PKGPREFIX xdc_cfg_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package ti.platforms.evmDM365 */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char ti_platforms_evmDM365__dummy__;
#define __xdc_PKGVERS 1, 0, 0
#define __xdc_PKGNAME ti.platforms.evmDM365
#define __xdc_PKGPREFIX ti_platforms_evmDM365_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif

/* package mp4vdecTestApp */

#include <xdc/std.h>
#ifndef __config__
__FAR__ char mp4vdecTestApp__dummy__;
#define __xdc_PKGVERS null
#define __xdc_PKGNAME mp4vdecTestApp
#define __xdc_PKGPREFIX mp4vdecTestApp_
#ifdef __xdc_bld_pkg_c__
#define __stringify(a) #a
#define __local_include(a) __stringify(a)
#include __local_include(__xdc_bld_pkg_c__)
#endif

#else

#endif
