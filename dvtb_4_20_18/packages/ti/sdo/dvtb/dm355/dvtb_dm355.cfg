/*
 * dvtb_dm355.cfg
 *
 * XDC Configuration File
 *
 * Copyright (C) 2010 Texas Instruments Incorporated - http://www.ti.com/ 
 * 
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

var Program = xdc.useModule('xdc.cfg.Program');

var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
osalGlobal.runtimeEnv = osalGlobal.LINUX;
var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.linux.Ipc');
xdc.useModule('ti.sdo.fc.global.Settings').osalPackage = "ti.sdo.ce.osal.linux";

/*
 * Load common XDC config settings
 */

var GTINFRA = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
GTINFRA.runtimeEnv = GTINFRA.NONE;

var GT = xdc.useModule("ti.sdo.utils.trace.GT");
GT.MALLOCFXN = "myMalloc";
GT.PRINTFXN = "printfCaller";

var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');

var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
    RMAN.persistentFreeFxn = "__ALG_freeMemory" ;
    RMAN.trace = false;
    RMAN.tableSize = 10;
    RMAN.semCreateFxn = "Sem_create";
    RMAN.semDeleteFxn = "Sem_delete";
    RMAN.semPendFxn = "Sem_pend";
    RMAN.semPostFxn = "Sem_post";
    RMAN.trace = false;
    RMAN.debug = false;

/* When EDMA3 resources are required, configure the fc.edma3 Meta-config module
 */
var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');
EDMA3.trace = false;
EDMA3.debug = false;

EDMA3.globalInit = true;
EDMA3.maxQdmaChannels = [10,10,10,10];

var VICP2 = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');
VICP2.debug = false;
VICP2.trace = false;

var EX = xdc.useModule("ti.sdo.fc.rman.examples.EXAMPLE");
EX.debug = false;

var DEBUGM = xdc.useModule('ti.sdo.fc.utils.SMGRMP'); /* For debug only */
DEBUGM.debug = false;

DEBUGM = xdc.useModule('ti.sdo.fc.utils.SHM'); /* For debug only */
DEBUGM.debug = false;

var VICPSYNC = xdc.useModule('ti.sdo.fc.vicpsync.VICPSYNC');
VICPSYNC.debug = false;    

var MEMUTILS = xdc.useModule('ti.sdo.fc.memutils.MEMUTILS');

var VICP = xdc.useModule('ti.sdo.linuxutils.vicp.VICP');
VICP.debug = false;	

var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
EDMA3CHAN.trace = false;
EDMA3CHAN.debug = false;


var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');

var LSP = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');
LSP.debug = false;

xdc.loadPackage("ti.sdo.fc.utils.api");    

xdc.loadPackage("ti.sdo.ce.video1");
xdc.loadPackage("ti.sdo.ce.video2");
xdc.loadPackage("ti.sdo.ce.image1");
xdc.loadPackage("ti.sdo.ce.speech");
xdc.loadPackage("ti.sdo.ce.speech1");

/*
 *  ======== Engine Configuration ========
 */

var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC');
var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC'); 
var JPEGENC = xdc.useModule('ti.sdo.codecs.jpegenc.ce.JPEGENC');
var JPEGDEC = xdc.useModule('ti.sdo.codecs.jpegdec.ce.JPEGDEC');
var G711ENC = xdc.useModule('ti.sdo.ce.examples.codecs.g711.G711ENC');
var G711DEC = xdc.useModule('ti.sdo.ce.examples.codecs.g711.G711DEC');

var Engine = xdc.useModule('ti.sdo.ce.Engine');

var decode = Engine.create("decode", [
    {name: "mpeg4dec", mod: MPEG4DEC, local: true, groupId: 1},
    {name: "jpegdec", mod: JPEGDEC, local: true, groupId: 1},
    {name: "g711dec", mod: G711DEC, local: true}        
]);

var encode = Engine.create("encode", [
    {name: "mpeg4enc", mod: MPEG4ENC, local: true, groupId: 1},
    {name: "jpegenc", mod: JPEGENC, local: true, groupId: 1},
    {name: "g711enc", mod: G711ENC, local: true}
    
]);

var encodedecode = Engine.create("encodedecode", [
    {name: "mpeg4enc", mod: MPEG4ENC, local: true, groupId: 1},
    {name: "mpeg4dec", mod: MPEG4DEC, local: true, groupId: 1},   
    {name: "g711enc", mod: G711ENC, local: true, groupId: 0},
    {name: "jpegenc", mod: JPEGENC, local: true, groupId: 1},
    {name: "jpegdec", mod: JPEGDEC, local: true, groupId: 1},
    {name: "g711dec", mod: G711DEC, local: true, groupId: 0}  
]);

Program.main = null;
